#+Title: emacs
#+TAGS: Fav(f) Most_used(m) cbugs(c)
#+STARTUP: overview

* 'Emacs'
  :PROPERTIES:
  :ID:       38a15adf-f505-4a54-b1d9-f76b22ce1147
  :END:
** 0.BASICS
*** help
****  general 
Built-in help system

I will describe some most useful commands based on my experience. I will not list all, so you have to rely on Emacs to get your information:

C-h m runs describe-mode to see all the key bindings and documentations of current major mode and minor modes of a buffer.

C-h w runs where-is to get which keystrokes invoke a given command.

C-h c runs describe-key-briefly to find out what command is bound to a key. For example, after C-h c, run C-x C-f gives you find-files.

C-h k runs describe-key to find out what command is bound to a key, along with the documentation of the command. Use this if you want to know how to use a command.

C-h e runs view-echo-area-messages, allow you to see the logging of echo area messages.

C-h v runs describe-variable, and ask you for a variable; you can TAB to complete a variable. This command is important, because aside from describing a variable, it allows you to customize the behaviors of Emacs and 3rd party packages. But for now, you don't need it.

C-h C-h runs help-for-help. Use this command if you want to see list of available help commands. Remember, if you partially remember a key binding, just press as much as you can remember and then press C-h, Emacs will list available commands for that prefix. Prefix C-h is no exception. C-h C-h simply returns all key bindings and commands of prefix C-h.

**** describe Variables
use C-h v to descrive variables like auto-mode-alist 
**** describe key
C-h k
**** describe Functions
to get info on a specific function

c-h f FUNCTIONNAME

you will get info on the function and how to set it IE:

#+BEGIN_EXAMPLE
With a prefix argument ARG, enable Tool Bar mode if ARG is
positive, and disable it otherwise.  If called from Lisp, enable
Tool Bar mode if ARG is omitted or nil.

#+END_EXAMPLE

so here if its 1 (positive) it works and if -1 (negative) its disabled

*** Using Emacs In A Text Terminal

Emacs in a Text Terminal.
 to start Emacs

 emacs -nw filename

 The "-nw" launches emacs without graphical window system.I
 n a text terminal, you can invoke the textual menu by pressing
Alt+`. (or, pressing the Esc key followed by the backtick ` key.)

*** WINDOWS

[[macsen_files/Image_zDZxTWFufFIlOlbuHLNYuw_0001.png]]
  WINDOWS
 ---------
 Emacs can have several "windows", each displaying its own text. We
 will explain later on how to use multiple windows. Right now we want
 to explain how to get rid of extra windows and go back to basic
 one-window editing. It is simple:
 C-x 1One window (i.e., kill all other windows).
 That is CONTROL-x followed by the digit 1. C-x 1 expands the window
 which contains the cursor, to occupy the full screen. It deletes all
 other windows.
 >> Move the cursor to this line and type C-u 0 C-l.
 >> Type C-h k C-f.
 See how this window shrinks, while a new one appears
 to display documentation on the C-f command.
 >> Type C-x 1 and see the documentation listing window disappear.
 This command is unlike the other commands you have learned in that it
 consists of two characters. It starts with the character CONTROL-x.
 There is a whole series of commands that start with CONTROL-x; many of
 them have to do with windows, files, buffers, and related things.
 These commands are two, three or four characters long.

*** change window Size
use the enlarge-window and shrink-window command
you may want to bind these 
*** movment
**** keybinds
***** 1. Emacs Line Navigation

Following four navigation can be done line by line.

-  C-p : go to previous line
-  C-n : go to next line
-  C-f : go forward one character
-  C-b : go backward one character

Repeat factor

By using the repeat factor in EMACS we can do this operation for N
times. For example, when you want to go down by 10 lines, then type C-u
10 C-p

Within a line if you want to navigate to different position, you have
following two options.

-  C-a : go to the starting of the current line.
-  C-e : go to the end of the current line.


***** 2. Emacs Screen Navigation

Following three navigation can be done in relation to text shown in the
screen.

-  C-v : Jump forward one full screen.
-  M-v : Jump backwards one full screen. ( If you dont have Meta key,
   use ESC key )
-  C-l : Make the current line as center line of window.

You can also use Page Up, Page Down for screen navigation.

***** 3. Emacs Special Navigation

Following are couple of special navigation that are used to go to the
start or end of buffer.

-  M-< : Go to the start of file
-  M-> : Go to the end of file

***** 4. Emacs Word Navigation

Following are two word navigation keys.

-  M-f : navigate a word forward.
-  M-b : navigate a word backward.

***** 5. Emacs Paragraph Navigation

-  M-a : Go to the beginning of the current paragraph. By pressing M-a
   again and again move to the previous paragraph beginnings.
-  M-e : Go to the end of the current paragraph. By pressing M-e again
   and again move to the next paragraph end, and again.

***** 6. Emacs Search Navigation

When you want to search by giving the plain text,

-  C-s : Type Ctrl+s followed by the word to Search. Press Ctrl+s
   continuously to move to the next occurrences. Press enter to
   terminate search.
-  C-r : Do a reverse search. All other explanation are like Ctrl+s

When you want to search using regular expression,

-  C-M-s : Type Ctrl+s followed by the regex to Search. Press Ctrl+s
   continuously to move to the next occurrences. Press enter to
   terminate search.
-  C-M-r : Do a reverse search. All other explanation are like
   Ctrl+Meta+s

***** 7. Emacs Navigation from Command Line

Emacs +N filename: Go to the Nth line of the file after opening it.

*** important binds

kill the buffer (C-x k)
 open file (C-x C-f)
*** launching emacs 
**** launching emacs as a SHell
#+BEGIN_SRC sh
emacs -f eshell
#+END_SRC

*** mouse
**** mouse support in terminal
Some terminal emulators under X support mouse clicks in the terminal window. In a terminal emulator which is compatible with xterm, you can use:

~M-x xterm-mouse-mode ~

to enable simple use of the mouse--only single clicks are supported. The normal xterm mouse functionality is still available by holding down the SHIFT key when you press the mouse button. The Linux console supports this mode if it has support for the mouse enabled, e.g. using the gpm daemon.
*** search for commands with apropos
The apropos commands answer questions like, “What are the commands for working with files?” More precisely, you specify an apropos pattern, which means either a word, a list of words, or a regular expression.

Each of the following apropos commands reads an apropos pattern in the minibuffer, searches for items that match the pattern, and displays the results in a different window.

C-h a
Search for commands (apropos-command). With a prefix argument, search for noninteractive functions too.

M-x apropos
Search for functions and variables. Both interactive functions (commands) and noninteractive functions can be found by this.

C-h d
Search for functions and variables whose documentation strings match the specified pattern (apropos-documentation).


*** start with systemd 
look at the systemd entery [[id:6e5c769c-0f97-4001-8ce7-c19acdd8ce89][setup emacsclient as a systemd unit in Arch]]

** `sync between laptop and work pc`
pull latest Emacs from repo github. if you get an error just overwrite local Emacs with this git command

#+BEGIN_SRC sh
git fetch
git reset --hard origin/master
#+END_SRC

then zip the file:~/.Emacs.d/elpa and file:~/Emacs.g folder and move them to work pc
extract them into respective places 

delete the setting.el before restarting

** saving/closing emacs
*** base 
Save To save file: press Ctrl+x, then Ctrl+s.
Quit Emacs Type: Ctrl+x then Ctrl+c.
Quit without Saving:To quit without saving, just do quit and emacs will ask if you want to
save.
If the keys you press seem to do weird things, then, hold down Ctrl then press g. This will cancel the sequence of keys you may have pressed
by mistake.
*** desktop-save-mode auto Save/Restore
With desktop-save-mode on, now it automatically save/restore opened files, windows config (number of windows, size, position), when quit ＆ restart emacs.
** !Debuging Emacs for Bugs/errors!
*** create backtrace
simply do M-: (setq debug-on-error t) to try for the current emacs session only
*** debugging your config file
%Tip-a good way I found to do so is to open Emacs (non deamon mode) and open the conf file. then start binary splitting it and after each split you can open a new Emacs window (again non deamon) and see if the problem is solved % 
**** Binary search
The secret to finding a problem in your init file is not a secret: binary search.
Use comment-region to comment out half your init file, then 3/4, 7/8,... It is very quick to identify the problem. comment-region also uncomments: C-h f comment-region RET.
**** show a stack trace
You'll need to provide more information to be sure. Try setting

#+BEGIN_SRC emacs-lisp :results none
(setq debug-on-error t)
#+END_SRC

which will give you a stack trace showing what function is complaining about the string being nil.
My guess is that buffer-file-name is returning nil, and that's where the problem lies (not all buffers have file names). Check out the debugging section of An Introduction To Programming in Emacs Lisp, or the debugging section of the Emacs Lisp manual.

**** Check parens
to see whats wrong in your start up files and if emacs give you startup error messages, go over all your init files (base init.el and all
sourced files) and issue this command:

#+BEGIN_EXAMPLE
M-x check-parens
#+END_EXAMPLE

it will check extra parenthesis and quotes and let you know where andwhat is wrong

**** debug erros in code
type ~M-x toggle-debug-on-error RET~, reproduce the problem/error you have to get the debug info 

you can then M-x goto-char RET to get to the to-the-charachter-of-the-invalid-read

*** get rid of unreadable characters (unicode etc)			:Fav:

How do I search for, delete, or replace unprintable (eight-bit or control) characters
(see also http://www.gnu.org/software/emacs/emacs-faq.text)

issue this in a problematic buffer with ?M-:? and paste the code below or just highlight below code and use 'eval-region'

#+BEGIN_SRC emacs-lisp
 (let ((buffer-invisibility-spec)) (query-replace-regexp "[^\t\n\r\f -~]" ""))
#+END_SRC

then enter y or ! (!no return!) to clear place/all

%Tip%:

-Regexp for the printable chars: `[\t\n\r\f -~]'

-Regexp for the unprintable chars: `[^\t\n\r\f -~]'

*** emacs ignores the org config file at startup (econf.org for me)
close all emacs session and delete the .el file (including # and links) corresponding to your conf.org
In example in my case its econf.el which corresponds to my org config file econf.org
restart emacs and things should be back to normal
*** How to startup emacs without loading any customization

How to startup emacs without loading any customization?
To run emacs without loading your personal init file, start emacs like this:
#+BEGIN_SRC sh
emacs -q
#+END_SRC
To not load any site-wide startup file, start emacs with emacs -Q. The site-wide startup file is usually part of your emacs
distribution, such as from Carbon emacs, Aquamacs, ErgoEmacs. Starting
emacs with "-Q" is like running a bare bone GNU Emacs.

** .emacs
*** start an alternate .init file
start Emacs like this

#+BEGIN_SRC sh
emacs -q --load "/path/to/init.el"
#+END_SRC
where init.el is your custom init
if you use a orgmode type setting setup in the custom init make sure to point to that custom org config

#+BEGIN_EXAMPLE
(require 'org)
(org-babel-load-file
(expand-file-name "mu4esettings.org"
                   user-emacs-directory))
#+END_EXAMPLE

*** Org mode file as a emacs config

For a simple example of usage, follow these 5 steps:

create a directory named .emacs.d in the base of your home directory
$Note-this usually is already created with most configs$ 

#+BEGIN_SRC sh
mkdir ~/.emacs.d
#+END_SRC

checkout the latest version of Org-mode into the src subdirectory of this new directory;

  #+BEGIN_SRC sh
cd ~/.emacs.d
mkdir src
cd src
git clone git://orgmode.org/org-mode.git
#+END_SRC

place the following code block in a file called init.el in your Emacs initialization directory (~/.emacs.d).

#+BEGIN_SRC emacs-lisp :results none
;;; init.el --- Where all the magic begins
;;
;; This file loads Org-mode and then loads the rest of our Emacs initialization from Emacs lisp
;; embedded in literate Org-mode files.

;; Load up Org Mode and (now included) Org Babel for elisp embedded in Org Mode files

;; this line below tells Emacs where the orgmode file are
(add-to-list 'load-path "~/.emacs.d/src/org-mode/lisp")
;; load org
(require 'org-install)
(require 'org)
;; location of the setting.org file (all Emacs configs to be evaluted by org babel)
(org-babel-load-file
 (expand-file-name "settings.org"
                   user-emacs-directory))

;; init.el ends here


#+END_SRC

The curent config can be found here:
[[file:~/.emacs.d/settings.org]]

Re-start Emacs to load the customizations.
 
*** reload a orgmode emacs config

use:

~M-: (org-babel-load-file "/path/to/file.org")~

to re-evaluate the whole thing 
 
*** define system defaults
**** default web browser
#+BEGIN_SRC emacs-lisp
(setq browse-url-browser-function (quote browse-url-generic))
(setq browse-url-generic-program "dwb")
#+END_SRC

*** Where is emacs's init file located?
Where is emacs's init file located?
 That depends on whether if you have the environment variable named
"HOME". ("HOME" should not be confused with a default Windows
environment variable named "HOMEPATH".) If you do have "HOME", then
emacs will look for it there. If you don't have "HOME", emacs will look
for init file at:
 On Windows Vista and Windows 7: %HOMEPATH%\AppData\Roaming\
 on Windows XP: %HOMEPATH%\Application Data\
 See: Windows Environment Variables Basic Tutorial.
 What's emacs's init file name?
 By default, it is %HOME%/.emacs, or %HOME%/.emacs.el, or
%HOME%/.emacs.d/init.el. The file can be byte-compiled, ending in
".elc".
 (info "(emacs) Find Init")
 How to find out if my emacs's init is loaded?
 Type some garbage in your init file, then restart emacs. If emacs
starts with error, then you know it's loaded.
 Or, you can put the following code in your init file:
 (set-background-color "pink"

*** Split Your .emacs into Multiple Files

Split Your .emacs into Multiple Files
 Go to your ".emacs". If the file has more than 2 hundred lines, then
just go to the middle and split the file into 2 files. Name it
.emacs.d/emacs init 1.el and .emacs.d/emacs init 2.el. The exact
file name doesn't matter. Then, in your ".emacs", change it to like
this:
 (load "~/.emacs.d/emacs init 1")
 (load "~/.emacs.d/emacs init 2")
 That's it.
 When next time you have more code you want to add, just pick a file and
add there. Each time, spend no more than 5 minutes doing it.
 Within that 5 min, you can shuffle the file content a bit. Moving
keybindings to init keybinding.el, move loading packages to a
separate file init load package.el, move misc settings (such as
dired, highlighting, line numbering, cursor, font, etc) to another file
misc settings.el.
 The init file categories i have are roughly this: {settings,
keybinding, load packages, elisp functions, ms windows, misc}.
Usually, new things i add to "misc.el". Once in a while, i clean up that
file, move things to proper places.
 This way, you have your customization under manageable condition,
without much effort. You may edit your init files once a month.
Gradually over the years, you may have multiple emacs init files, all
manageable and reasonably organized.

*** Aliases
In emacs, you can use alias to shorten commands. For example, make frequently used commands just 1 or 2 letters.

For example, here's my aliases:

(defalias 'yes-or-no-p 'y-or-n-p) ; y or n is enough
(defalias 'list-buffers 'ibuffer) ; always use ibuffer
(defalias 'perl-mode 'cperl-mode) ; always use cperl-mode

;; make frequently used commands short
(defalias 'g 'grep)
(defalias 'gf 'grep-find)
(defalias 'fd 'find-dired)

; elisp
(defalias 'eb 'eval-buffer)
(defalias 'er 'eval-region)
(defalias 'ed 'eval-defun)
(defalias 'eis 'elisp-index-search)
(defalias 'lf 'load-file)

*** Basic (emacs init file)

Your init file contains personal EmacsLisp code that you want to execute
when you start Emacs.
 For GnuEmacs, it is ~/.emacs or  emacs or ~/.emacs.d/init.el.
 For XEmacs, it is ~/.xemacs or ~/.xemacs/init.el.
 For AquamacsEmacs, it is ~/.emacs or ~/Library/Preferences/Aquamacs
Emacs/Preferences.el
 In Emacs, if you do not know where your InitFile is located or you do
not have one and want to create it, then just open it for editing in
Emacs:
 C-x C-f ~/.emacs RET

*** backups

**** How to disable emacs's automatic backup



How to disable emacs's automatic backup?

Use this code:

 (setq make-backup-files nil) ; stop creating those backup~ files
 (setq auto-save-default nil) ; stop creating those #auto-save# files

How to stop emacs's backup changing the file's creation date of the
original file
 (relevant for non linux only)

Put this code in your emacs init file:

 (setq backup-by-copying t)

Explanation: when emacs does a backup, by default it renames the
original file into the backup file name, then create a new file and
insert the current data into it. This effectively destroys the creation
date of your file. (If a file is created in 2001, and you modified it
today, the file's creation date will become today. Note: unixes
(including Linux and bsd) do not record file creation date, so this
doesn't matter. (ctime is not creation date.) Windows and OS X do record
file creation date.).

**** How to set emacs so that all backups are placed into one backup
folder

How to set emacs so that all backups are placed into one backup folder
 add this code to your init file:
 ;; make backup to a designated dir, mirroring the full path
 (defun my-backup-file-name (fpath)
 "Return a new file path of a given file path.
 If the new path's directories does not exist, create them."
 (let (
 (backupRootDir "~/.emacs.d/emacs-backup/")
 (filePath (replace-regexp-in-string "[A-Za-z]:" "" fpath )) ;
remove Windows driver letter in path,  "C:"
 (backupFilePath (replace-regexp-in-string "//" "/" (concat
backupRootDir filePath "~") ))
 )
 (make-directory (file-name-directory backupFilePath)
(file-name-directory backupFilePath))
 backupFilePath
 )
 )
 (setq make-backup-file-name-function 'my-backup-file-name)
 The above will mirror all directories at the given backup dir. For
example, if you are editing a file /Users/j/web/xyz/myfile.txt, and
your backup root is /Users/j/.emacs.d/emacs-backup/, then the backup
will be at
/Users/j/.emacs.d/emacs-backup/Users/j/web/xyz/myfile.txt~.
 If you want all backup to be flat in a dir, use the following:
 (setq backup-directory-alist '(("" . "~/.emacs.d/emacs-backup")))
 This will create backup files flat in the given dir, and the backup
file names will have "!" characters in place of the directory separator.
For example, if you are editing a file at
/Users/j/web/xyz/myfile.txt, and your backup dir is set at
/Users/j/.emacs.d/emacs-backup, then the backup file will be at:
/Users/j/.emacs.d/emacs-backup/Users!j!web!emacs!myfile.txt~. If you
use long file names or many nested dirs, this scheme will reach file
name length limit quickly. (Mac and Windows allow 255 chars for file
name.)

*** How to disable emacs's automatic backup
How to disable emacs's automatic backup?

Use this code:

 (setq make-backup-files nil) ; stop creating those backup~ files
 (setq auto-save-default nil) ; stop creating those #auto-save# files

How to stop emacs's backup changing the file's creation date of the
original file
 (relevant for non linux only)

Put this code in your emacs init file:

 (setq backup-by-copying t)

Explanation: when emacs does a backup, by default it renames the
original file into the backup file name, then create a new file and
insert the current data into it. This effectively destroys the creation
date of your file. (If a file is created in 2001, and you modified it
today, the file's creation date will become today. Note: unixes
(including Linux and bsd) do not record file creation date, so this
doesn't matter. (ctime is not creation date.) Windows and OS X do record
file creation date.).

*** How to avoid restarting emacs when adding code to emacs init file

How to avoid restarting emacs when adding code to emacs init file?
 Many ways.
 1.Just select the new code and call eval-region.
 2.Call eval-buffer to evaluate all code.
 3.Call load-file. Or, in dired, press L on the file name.

*** turn on CUA mode by default

Turn on the CUA mode. Put the following in your emacs init file:
 (cua-mode 1)
 The CUA mode will do 4 things:
 {Cut Copy Paste Undo} have {X C V Z} keys.
 Typing while a region is selected will delete it or over-ride it.
 Text selection will be highlighted.
 Text selection can be done by holding down the  Shift key and
press a arrow key.

*** Defining Alias to Increase Productivity

In emacs, you can define your own keyboard shortcuts such as F6 for
frequently used commands. But if you use emacs extensively, you may have
all easy keys used up. A alternative to keyboard shortcuts is to make
command names 1 or 2 letters short.
 For example, here's my aliases:
 (defalias 'yes-or-no-p 'y-or-n-p) ; y or n is enough
 (defalias 'list-buffers 'ibuffer) ; always use ibuffer
 (defalias 'perl-mode 'cperl-mode) ; always use cperl-mode
 (defalias 'man 'woman)
 ; major modes, easy naming
 (defalias 'ahk-mode 'xahk-mode)
 (defalias 'bbcode-mode 'xbbcode-mode)
 (defalias 'cmd-mode 'dos-mode)
 (defalias 'lsl-mode 'xlsl-mode)
 (defalias 'ocaml-mode 'tuareg-mode)
 (defalias 'math-symbol-input-mode 'xmsi-mode)

*** Turn a Minor Mode on/off/toggle

When setting a variable that takes {true, false}, use {t, nil}, like
this:
 (setq make-backup-files nil)
 When calling a mode function, use {1, 0}, like this:
 (global-linum-mode 1)
 If you want to turn on/off a mode, call the function, not set the
variable. For example:
 (global-linum-mode 1) ; GOOD
 wrong examples:
 (setq global-linum-mode t) ; BAD
 (setq global-linum-mode 1) ; TOTALLY WRONG!
 Also, some minor mode have a command for setting it globally, while
others do not. For example, there's linum-mode and global-linum-mode.
But there's auto-fill-mode but no "global-auto-fill-mode". The best
thing is to call describe-function and or describe-variable to see their
inline docs.

*** save history between sessions

With savehist-mode, you can save your minibuffer history (ie. the
commands you gave). It's the simple alternative to more complex
session-saving mechanisms like desktop-save-mode and (many!) friends.
 save-hist-mode lets you can customize quite a few things, so my setup
now looks like this:
 (setq savehist-additional-variables ;; also save...
 '(search-ring regexp-search-ring) ;; ... my search entries
 savehist-file "~/.emacs.d/savehist") ;; keep my home clean
 (savehist-mode t) ;; do customization before activate
 As shown, you should do the customizations before enabling
savehist-mode, or they will be ignored.
 The savehist-additional-variables customization particularly
interesting; you can put any (printable) variable in the list, ie. you
could put kill-ring in there, to retrieve your old kill ring (the
clipboard) when you restart emacs again.
 Note: if you want emacs to remember your recently-used files between
sessions, you can take a look at recentf.
 Also, note that I am setting savehist-file to ~/.emacs.d/savehist. In
general, I'll try to put all my emacs files there, instead of in my
home-directory. This makes it a bit easier to back up things and keep my
~/ clean. For historical reasons, I still have my ~/.emacs, but I could
use ~/.emacs.d/init.el instead

*** configure minor modes

As a rule, minor-modes can be enabled given positive argument or
disabled with a negative argument. Should the argument be omitted, the
minor-mode will be toggled on/off.
 Here are some more examples of minor-modes. The following will disable
the scroll bars, menu-bar and tool-bar, respectively.
 (scroll-bar-mode -1)
 (menu-bar-mode -1)
 (tool-bar-mode -1)

*** debug slowdowns

this only workd for emacs >=24
 M-x profile-start
 before loading the file, it will also ask you which method you want, it
defaults to CPU info
 then
 M-x profile-report
 this will show you which modes/functions etc take the most CPU

*** library loading
**** require
allows the authors of addons to write sevral files , chain them togheter into one packge. the use requires only to use 1 files to get all the sub files.
If you look in a package documentation there will be a line that says (provide 'PACKAGENAME).
that's the counterpart to:

(require 'PACKAGENAME)                                          

you put in the config

and example would be the org-mode plugin. there are hundreds of sub packages but all the user needs to stick in the config is:

(require 'org)                                          

$note$ there isnt usually a mode inside the name so it wont be org-mode but rather 'org in the require command

**** autoload
as opposed to require autoload only loads the needed packages on-demand and thus speeds up the emacs inital loading

*** OS/Host name based configuring 
**** Get system type and system name 

Get system type and system namey

To detect different systems, you can use the system-type variable, and to detect different computers (with different hostnames, of course), you can use the system-name variable.

The following defuns show how you can know wich system type and name you have in each machine:
#+BEGIN_SRC emacs-lisp
  
;; Get current system's name
(defun insert-system-name()
(interactive)
"Get current system's name"
(insert (format "%s" system-name))
)

;; Get current system type
(defun insert-system-type()
(interactive)
"Get current system type"
(insert (format "%s" system-type))
)
#+END_SRC


Those previous commands are interactive, so you can just type M-x insert-system-name or M-x insert-system-type to test them.
**** Single dot emacs file and per-computer configuration

Configuration depending on the system type

In order to include system-type based configurations, you can define functions to check if the current system is the one you are looking for. Check these two functions to check if system is Mac OS X (darwin) or GNU (gnu/linux).


#+BEGIN_SRC emacs-lisp

; Check if system is windows
(defun system-type-is-win ()
(interactive)
"Return true if system is windows"
(string-equal system-type "windows-nt")
)

;; Check if system is GNU/Linux
(defun system-type-is-gnu ()
(interactive)
"Return true if system is GNU/Linux-based"
(string-equal system-type "gnu/linux")
)

;; fonts in linux
(if (system-type-is-gnu)
(add-to-list 'default-frame-alist '(font . "Inconsolata-16"))
)

;; fonts in Win
(if (system-type-is-win)
(add-to-list 'default-frame-alist '(font . "Consolas-14"))
)


#+END_SRC

Once you have these functions, you can put the system-dependent configuration:

**** Configuration depending on the system name (linux hostname)
first on linux to define hostname issue

#+BEGIN_SRC sh
hostname
#+END_SRC 

#+RESULTS:
: zx1voics

then in your config you can see something like this

#+BEGIN_SRC emacs-lisp :results none
#+BEGIN_SRC emacs-lisp :results none
(when (string= system-name "zx1voics")
(add-to-list 'load-path "/usr/local/share/emacs/site-lisp/mu4e")
)
#+END_SRC

**** alternative OS specfic method

put OS-specific code in your initialization file but use the same file everywhere,  you might find this sample code useful.

On Windows, use dired+ and set the default font to Consolas.
On Linux, configure Emacs to play well with the X clipboard and use Inconsolata as the default font.

You can use system-type "darwin" to test for OS X.

#+BEGIN_SRC emacs-lisp :results none
(cond
    ((string-equal system-type "windows-nt") ; Microsoft Windows
        (progn
            (require 'dired+)         
            (set-default-font "Consolas")                
        )
    )
    ((string-equal system-type "gnu/linux") ; linux
        (progn
            (setq x-select-enable-clipboard t)
            (set-default-font "Inconsolata")
        )
    )
#+END_SRC

*** Remove welcome screen/splash from emacs
add to init.el/.emcas file:

#+BEGIN_SRC emacs-lisp
;; Remove splash screen
(setq inhibit-splash-screen t)
#+END_SRC

*** Define default apps
**** Browser
Emacs 23.2 doesn't directly support chrome, but it does support a "generic" browser, and something like this should work:
#+BEGIN_SRC 
(setq browse-url-browser-function 'browse-url-generic
      browse-url-generic-program "chromium-browser")
#+END_SRC
if it's Windows or Mac, you can try:
#+BEGIN_SRC 
(setq browse-url-browser-function 'browse-url-default-windows-browser)
(setq browse-url-browser-function 'browse-url-default-macosx-browser)
#+END_SRC

*** autoload lisp files from a folder
Any elisp files dropped into ~/.emacs.local.d/ will be automatically loaded.

I usually use this is a testing ground for new configuration before adding it here, and also for any personal / sensitive configuration.

#+BEGIN_SRC emacs-lisp :results none
(defun my/load-elisp-directory (path)
  (let ((file-pattern "\\.elc?$"))
    (when (file-directory-p path)
      (mapcar (lambda (lisp-file)
                (load-file lisp-file))
              (directory-files (expand-file-name path) t file-pattern)))))

(my/load-elisp-directory "~/.emacs.local.d")
#+END_SRC

** backup,saving etc
*** 'save as'								:Fav:
use:
?C-x? write-file 
@Warning:ido may interfere with this@

*** backup
**** how to backup
By default, Emacs auto-saves a buffer with changes in it to the same directory as the file opened in the buffer, but adds a character such as # or ~ to the beginning or end.
This auto-savin can be turned off with:

(setq make-backup-files nil)

But today I turned it back on, and decided, since I use SVN anyway for versioning, that I will auto-save into the same file. This is achieved with the following:

(setq auto-save-visited-file-name t)

Also, I turned up the rate at which Emacs auto-saves the files.

(setq auto-save-interval 20) ; twenty keystrokes
(setq auto-save-timeout 10) ; ten idle seconds

**** Delete auto-save files
To delete all auto-save files in the current directory, use `#’ in Dired to mark the files, then ‘x’ to delete them.
*** recents
**** How to open recently opened file in emacs

Call recentf-mode to turn it on. Then, call recentf-open-files to list
and open recently opened file. You can give it a single key keyboard
shortcut
 To turn it on for future sessions, put this in your emacs init file:
 (recentf-mode 1) ; keep a list of recently opened files
** bookmarks
*** intro

Bookmark Basics
 Bookmark+ builds on vanilla Emacs bookmarks. If you are familiar with
the latter, then you can skip this section, which mostly reviews the
former. However, this section also introduces some Bookmark+ concepts
and features that are detailed in other sections.
 In Emacs bookmarking these three things are different but related:
 1. the bookmark list
 2. the bookmark file
 3. the bookmark-list display (buffer `Bookmark List', aka the
bookmark "menu list", a misnomer)
 It is important to keep these three straight and understand their
differences in practice, in particular, when they do and do not
represent the same set of bookmarks.
 #1 is in memory. It is the current set of bookmarks. When you add,
rename, delete, etc. a bookmark, this list is updated.
 #2 is on disk. It is a persistent record of a set of bookmarks.
 The bookmark list (#1) is the current value of internal variable
'bookmark-alist'. The bookmark file (#2)can be anywhere. Its default
filename is the value of user option 'bookmark-default-file'.
 The bookmark list is typically initialized from the bookmark file ---
referred to as loading your bookmarks, but you can also create bookmarks
(adding them to the list) without ever saving them to disk.
 The bookmark list can be saved to the bookmark file --- referred to as
saving your bookmarks --- either automatically or on demand. But it is
not necessarily saved. Even if it has been saved in the past, that does
not mean that at any given time the bookmark list corresponds exactly to
the bookmark file.
 The list and the file can often become out of sync. In an Emacs
session, the bookmark list rules. After an Emacs session, the bookmark
file rules (it is all there is). You can use 'C-x p L'
(bmkp-switch-bookmark-file-create') to sync (revert) the list to
reflect the file --- just accept the default value, "switching" to the
same file.
 The bookmark-list display (#3) is a snapshot view of the bookmarks in
the bookmark list. As such, what you see there reflects the state of the
bookmark list at some point in time. So here again, the two, list and
display, can be out of sync. Hitting 'g' in the bookmark-list display
refreshes it to accurately reflect the current bookmark list (#1). Some
other operations in the display also keep it synced with the list.
 Using a prefix argument (C-u g') syncs the display (#3) and the list
(#1) to the file (#2). This can be useful when some other process (e.g.,
another Emacs session) updates the bookmark file or when you want to
abandon changes to the current bookmark list and any of the current
bookmarks. Outside the bookmark-list display, you can use command
'bmkp-revert-bookmark-file' to do this.
 You can load different bookmark files, either adding their bookmarks to
those already in the current bookmark list or replacing them.
 The most important takeaway from this section is that #1 (list), #2
(file), and #3 (display) can be out of sync, and they often are. And
that can be useful.
 Until now, everything said in this section is true of vanilla Emacs as
well as Bookmark+. Bookmark+ adds some flexibility regarding the use of
multiple bookmark files, and it can save the last state of the
bookmark-list display for later reuse.
 The saved state of the display is restored when you show the display
after quitting it (q') in the same session or quitting Emacs, but only
if the bookmark file whose location it recorded is the same as the
current bookmark file.
 It would not make sense to display a completely different set of
bookmarks from those that are currently loaded. The display must always
reflect the current bookmark list (even if it sometimes reflects it
imperfectly, because it is a snapshot). So if the bookmark file that is
loaded is different from the one that was recorded for the display
state, the recorded state is ignored.
 Automatic Saving
 Before getting into the topic of automatic saving, let me say this
clearly once: Back up your bookmark file(s)!
 I recommend that you set option 'bookmark-version-control' to 't', so
that you get numbered backups. See also nodes `Backup Names' and `Backup
Deletion' in the Emacs manual. (Bookmark+ creates backups when your
bookmark file is saved. Until bug #12507 is fixed, vanilla Emacs does
not.)
 User option 'bookmark-save-flag' controls whether and how often to
automatically save the bookmark list to the bookmark file. You can
toggle this option using `M-~' in the bookmark-list display.
 In the bookmark-list display, you can tell whether individual bookmarks
have been modified since the last save: they are marked with `'. I
believe that this indication is robust and accurate (if not, please
report a bug), but a word of caution: do not depend on it. The only way
to be sure that your bookmarks have been saved is to save them. ;-)
 Is there a way to unmodify a single bookmark that you have changed? No,
not unless it is the only one you modified. If you revert to the
bookmarks as last saved, then all changes to all bookmarks (including
addition and removal of bookmarks) are lost. If you want to work
carefully when making multiple changes, then save any modifications you
are sure of before you move on to others. If only one bookmark is
modified then reverting to the bookmark file effectively unmodifies that
bookmark.
 When you consult the doc for option 'bookmark-save-flag' you see that
besides values of 'nil' and 't', meaning off and on, it can have a value
that is the number of bookmark modifications to allow before
automatically saving. If the value is 10, for instance, then the 11th
modification triggers automatic saving.
 But a modification means any change to any bookmark. Typically, you are
more interested in considering all of the changes caused by a given
command as one modification. Why? Suppose you use a command such as `T >
+' (bmkp-bmenu-add-tags-to-marked'), which adds a set of tags to each
of the marked bookmarks. Even if there have been no other modifications
since you last saved bookmarks, if there are more marked bookmarks than
your setting of 'bookmark-save-flag' then automatic saving will kick in
in the middle of the command. Some of the bookmarks with the added tags
will be automatically saved. And that does not give you an opportunity
to cancel the changes (e.g., by quitting without saving).
 This is the reason for option 'bmkp-count-multi-mods-as-one-flag',
whose default value is 't', which means count all of a sequence of
modifications together as one modification, as far as
'bookmark-save-flag' is concerned.

*** basics

Emacs can remember a list of visited files.
 C-x r m Add current buffer to bookmarks.
 C-x r b Open a buffer from bookmarks.
 C-x r l List bookmarks.

*** bookmark a remote folder

connect to a remote file:
 To connect to 'myhost' as 'myuser' via SSH and open the file
~/example.txt:

 C-x C-f /ssh:myuser@myhost:~/example.txt

 after that just add it as a normal bookmark

*** bookmak a folder

if you set a bookmark while you're in a dired buffer it saves the
directory location

*** BKM+ commands

When you jump to a bookmark, you can use completion to specify the
bookmark name. 'bookmark-jump' and 'bookmark-jump-other-window', bound
to
 'C-x j j'
 and
 'C-x 4 j j',

*** sort in +

You can use `s s'... (repeat hitting the 's' key) to cycle among the
various sort orders possible, updating the display accordingly. By
default, you cycle among all available sort orders, but you can shorten
the cycling list by customizing option
'bmkp-sort-orders-for-cycling-alist'.
 You can also change directly to one of the main sort orders (without
cycling) using `s >', `s n', `s f n', etc. There are many such
predefined sort orders bound to keys with the prefix 's' --- use 'C-h m'
or `?' for more info.
 `s >' -- Sort marked (`>') before unmarked
 `s ' -- Sort modified (`') before unmodified
 `s 0' -- Sort by bookmark creation date/time
 `s b' -- Sort by last buffer or file access
 `s d' -- Sort by last bookmark access date/time
 `s D' -- Sort flagged (`D') before unflagged
 `s f d' -- Sort by last local file access date/time
 `s f k' -- Sort by local file kind: file, symlink, dir
 `s f n' -- Sort by file name
 `s f s' -- Sort by local file size
 `s f u' -- Sort by last local file update (edit) date/time
 `s g' -- Sort by Gnus thread: group, article, message.
 `s i' -- Sort by Info manual, node, position
 `s k' -- Sort by bookmark type (kind)
 `s n' -- Sort by bookmark name
 `s t' -- Sort tagged (`t') before untagged
 `s v' -- Sort by visit frequency

*** bookmark tagging

Bookmark Tags
 -------------
 T +- Add some tags to a bookmark

 to add tag enter T followed by +
 then enter bk name to be tagged (or press esc for the one cursor is on)
 then enter the tag. each time you press enter you can add another tag
 Pressing enter with no tag saves the tags! 

 T -- Remove some tags from a bookmark (`C-u': from all bookmarks)
 T 0- Remove all tags from a bookmark
 T d- Remove some tags from all bookmarks
 T r- Rename a tag in all bookmarks
 T l- List all tags used in any bookmarks (`C-u': show tag values)
 T e- Edit bookmark's tags
 T v- Set the value of a tag (as attribute)
 T > v- Set value of a tag, for each marked bookmark (`C-u': all)
 T > C-y- Add tags copied from a bookmark to those marked (`C-u':
all)
 T > q- Replace tags of marked with copied tags (`C-u': all)
 T > +- Add some tags to the marked bookmarks (`C-u': all)
 T > -- Remove some tags from the marked bookmarks (`C-u': all)
 T m %- Mark bookmarks having at least one tag that matches a regexp
 T m +- Mark bookmarks having at least one tag in a set (OR)
 T m - Mark bookmarks having all of the tags in a set (AND)
 T m ~ +- Mark bookmarks not having any of the tags in a set (NOT OR)
 T m ~ - Mark bookmarks not having all of the tags in a set (NOT
AND)
 T u %- Unmark bookmarks having a tag that matches a regexp
 T u +- Unmark bookmarks having at least one tag in a set (OR)
 T u - Unmark bookmarks having all of the tags in a set (AND)
 T u ~ +- Unmark bookmarks not having any tags in a set (NOT OR)
 T u ~ - Unmark bookmarks not having all tags in a set (NOT AND)

*** bookmark and jump to specific org-goto link 
₆In example₆ 
#+BEGIN_SRC emacs-lisp :results none
;  emacs
  (global-set-key (kbd "<f9> <f9> e ")
    (lambda ()
      (interactive)
        (widen)
        (org-id-goto "38a15adf-f505-4a54-b1d9-f76b22ce1147")
        (org-narrow-to-subtree)
))

  ;org
  (global-set-key (kbd "<f9> <f9> o")
    (lambda ()
      (interactive)
        (widen)
        (org-id-goto "be4759e1-2951-4c91-a155-056bc2a16d9f")
        (org-narrow-to-subtree)
))


#+END_SRC
** buffers,windows,frames

*** what is a window and a frame?

Windows and frames
 Emacs is designed for convenient editing of many files at a time. This
is achieved by dividing the Emacs interface into three levels. Namely,
buffers, which have already been introduced, as well as windows and
frames.
 A window is a viewport used for displaying a buffer. A window can
display only one buffer at a time, however one buffer can be displayed
in many windows. Beneath each window exists a mode-line, which displays
information for that buffer.
 A frame is an Emacs "window" (in standard terminology. i.e., 'window'
in the sense of the modern desktop paradigm) which contains a title bar,
menu bar and one or more 'windows' (in Emacs terminology. i.e., the
above definition of 'window').

*** ibuffer

In ibuffer, the key sequence  u S D will save all unsaved files and
close them. This is particularly useful after you've done a
findreplace on hundreds of files with dired-do-query-replace-regexp.
 Alias list-buffer to ibuffer
 Because ibuffer completely replaces the functionality of list-buffers
command, you can alias the command name list-buffers to ibuffer. Like
this:
 (defalias 'list-buffers 'ibuffer)
 With the above, the key for list-buffers Ctrl+x Ctrl+b will also be
set to ibuffer.

*** switch between 2 last buffers

The function to toggle between the two most recently used buffers is
easy enough:
 (defun my-bs-toggle ()
 "Toggle buffers, ignoring certain ones."
 (interactive)
 (catch 'done
 (dolist (buf (buffer-list))
 (unless (or (equal (current-buffer) buf)
 (my-bs-ignore-buffer (buffer-name buf)))
 (switch-to-buffer buf)
 (throw 'done t)))))

*** completion frame

press ESC 3 times:
 ESC ESC ESC

** commands
*** basics

To run a command by name, type Alt+x followed by the command name.
 ShortcutCommand NameDescription
 Ctrl+gkeyboard-quitCancel a command in progress, or cancel
unfinished keyboard keystroke sequence
 Alt+xexecute-extended-commandexecute a command by name
 Finding a Command's Name or Keyboard Shortcut
 If you know a command's name, you can find out its keyboard shortcut
(if there is one).
 If you know a keyboard shortcut, you can find out what command it
calls.
 The commands for these are describe-key and describe-function.
 ShortcutCommand NameDescription
 F1 kdescribe-keyFind the command name of a key
 F1 fdescribe-functionFind the key of a command

*** basic examples
Example of Useful Commands
 In emacs, a selection of text is called "region". Many commands acts on
the selected text. Here are some examples of commands that act on the
region.
 sort-lines
 upcase-initials-region
 upcase-region
 downcase-region
 Not all commands acts on region. Here are some commands that do not
necessary need a region:
 list-matching-lines (acts on whole file)
 delete-matching-lines (acts on region if exist, else work from cursor
point to end of file.)
 delete-non-matching-lines (acts on region if exist, else work from
cursor point to end of file.)
 highlight-phrase (color a word you want. Acts on the whole file)
 The above are just some examples. There are 2.5k commands in emacs by
default.

**** editing text

***** deleting

<DEL> Delete the character just before the cursor
 C-d  Delete the next character after the cursor
 M-<DEL> Kill the word immediately before the cursor
 M-d Kill the next word after the cursor
 C-k Kill from the cursor position to end of line
 M-k Kill to the end of the current sentence

***** Enriched Mode

Enriched mode is a buffer-local minor mode (see Minor Modes). When you
visit a file that has been saved in the 'text/enriched' format, Emacs
automatically enables Enriched mode, and applies the formatting
information in the file to the buffer text. When you save a buffer with
Enriched mode enabled, it is saved using the 'text/enriched' format,
including the formatting information.
 To create a new file of formatted text, visit the nonexistent file and
type
 M-x enriched-mode
 This command actually toggles Enriched mode. With a prefix argument,
it enables Enriched mode if the argument is positive, and disables
Enriched mode
 otherwise. If you disable Enriched mode, Emacs no longer saves the
buffer using the 'text/enriched' format; any formatting properties that
have been added to the buffer remain in the buffer, but they are not
saved to disk.

***** Align text

Align Text
 Emacs has several commands that's helpful for alignment. One of the
most useful is align-regexp. For example, suppose you have:
 tom = 5
 jenny = 8
 mary = 7
 and you want to align them by the equal sign. Just select the text,
then call align-regexp then give "=". Then you get:
 tom = 5
 jenny = 8
 mary = 7

*** deleting

<DEL> Delete the character just before the cursor
C-d  Delete the next character after the cursor
 M-<DEL> Kill the word immediately before the cursor
 M-d Kill the next word after the cursor
 C-k Kill from the cursor position to end of line
 M-k Kill to the end of the current sentence

*** Enriched Mode

Enriched mode is a buffer-local minor mode (see Minor Modes). When you
visit a file that has been saved in the text/enriched format,
Emacs automatically enables Enriched mode, and applies the formatting
information in the file to the buffer text. When you save a buffer with
Enriched mode enabled, it is saved using the text/enriched format,
including the formatting information.
 To create a new file of formatted text, visit the nonexistent file and
type
 M-x enriched-mode
This command actually toggles Enriched mode. With a prefix argument,
it enables Enriched mode if the argument is positive, and disables
Enriched mode
 otherwise. If you disable Enriched mode, Emacs no longer saves the
buffer using the text/enriched format; any formatting properties
that have been added to the buffer remain in the buffer, but they are
not saved to disk.

*** Align text

Align Text
 Emacs has several commands that's helpful for alignment. One of the
most useful is align-regexp. For example, suppose you have:
 tom = 5
 jenny = 8
 mary = 7
 and you want to align them by the equal sign. Just select the text,
then call align-regexp  you get:
 tom = 5
 jenny = 8
 mary = 7
** Console emacs
*** How do I met to the menu in Emacs in console mode
M-x menu-bar-open, which is usually bound to ?F10? (or ?C-F10?). This works with and without menu-bar-mode (which just shows the names of the menus at the top of the screen).
** config/Elisp
*** Emacs base functions 
**** setq
Function: (setq [ SYM VAL ]…)

Comment: A really fundamental function for customizing Emacs settings. An Emacs setting is really just a variable. Emacs has GUI for changing setting, but setq a variable is also equivalent.

Example:

#+begin_src emacs-lisp
(setq global-mark-ring-max 50000)
#+end_src
**** load 
Function: (load FILE &optional NOERROR NOMESSAGE NOSUFFIX MUST-SUFFIX)

Comment: This function allows you to load a file. FILE is the a filename that is looked up in the variable load-path. Do you notice &optional keyword? When you see this keyword, it means everything after &optional is, optional. The parameters NOERROR, NOMESSAGE, NOSUFFIX, MUST-SUFFIX are not required to be passed into the function if you don't need. However, if you want to pass an argument into the place of one a parameter, you must also pass arguments to all the parameters to the left of your chosen parameter. For example, if you want to pass an argument into NOSUFFIX, you are required to pass arguments into NOERROR, NOMESSAGE first. You are safe to ignore everything after your chosen parameter, and in our example, it's MUST-SUFFIX.

Example:
#+begin_src emacs-lisp
(load (substitute-in-file-name "$HOME/.emacs.d/module")) ;; first try to load module.elc; if not found, try to load module.el
(load (substitute-in-file-name "$HOME/.emacs.d/module.el")) ;; only load module.el
(load (substitute-in-file-name "$HOME/.emacs.d/module.elc")) ;; only load module.elc
(load "module") ; search for the file module.el or module.elc in variable load-path
#+end_src
**** require
Function: (require FEATURE &optional FILENAME NOERROR)

Comment: If you install a package from M-x list-packages, to load that package, use (require 'installed-package).

Example: For example, you installed package volatile-highlights, to load it:
#+begin_src emacs-lisp

(require 'volatile-highlights)
#+end_src
**** provide 
Function: (provide FEATURE &optional SUBFEATURES)

Comment: You can use this function at the end of a file to turn the file into a loadable module that is only loaded when called with require.

Example:

Suppose that in a file setup-editing.el, you put this line at the bottom:

#+begin_src emacs-lisp
(provide 'setup-editing)
#+end_src

Then, even if you load it with load function, it won't be activated. To activate, you have to execute (require 'setup-editing).
**** add to list
Function: (add-to-list LIST-VAR ELEMENT &optional APPEND COMPARE-FN)

Comment: Add an element ELEMENT to a list named LIST-VAR.

Example:
#+begin_src emacs-lisp
(add-to-list 'load-path "~/.emacs.d/personal") ; add personal to load-path,
                                               ; so "load" function can search for files in it
#+end_src

**** add hook
Function: (add-hook HOOK FUNCTION &optional APPEND LOCAL)

Comment: A hook is a Lisp variable which holds a list of functions, to be called on some well-defined occasion. (This is called running the hook. You can search for hook using C-h v and enter -hook suffix then TAB. Or you can find hooks in Customization Groups.

Example:
#+begin_src emacs-lisp
(add-hook 'prog-mode-hook 'linum-mode)
#+end_src

After you add the function linum-mode - which activates line number on the left margin of your Emacs - then every time you enter a prog-mode, which is the root all programming major modes derive from. A programming mode can be c-mode, asm-mode, emacs-lisp-mode, java-mode…

**** global-set-key
Function: (global-set-key KEY COMMAND)

Comment: This function binds a command to a key, as you can see in the function interface.

Example:

You can bind in one of the following ways:

(global-set-key (kbd "C-x C-b") 'ibuffer) ;; bind "C-x C-b" to ibuffer command
(global-set-key "\C-x\C-b" 'ibuffer)  ;; bind "C-x C-b to ibuffer command, but modifier 
                                      ;; keys must be escaped with the backslash
(global-set-key [?\C-x?\C-b] 'ibuffer) ;; use vector instead of a string

%I recommend you to use (kbd ...) function because we can write key bindings using our familiar key notations without adding unnecessary characters.%

Vector is array in other languages. Vector was used for mapping function keys, 

such as [left], [right], [up], [down], [f1]...[f12]. But now, you can also map function keys in (kbd ...) function using angle brackets:

(global-set-key (kbd "<f3>") 'kmacro-start-macro-or-insert-counter)

Here are common function keys (remember to wrap them in a pair of angle bracket):

Key	Description
left, up, right, down	Cursor arrow keys
begin, end, home, next, prior	Other cursor re-positioning keys
 	prior means PageUp
 	next means PageDOwn
select, print, execute, backtab	Miscellaneous keys
insert, undo, redo, clearline	backtab means S-TAB or C-iso-tab
insertline, deleteline, insertchar, deletechar	 
f1, f2, ... F35	Numbered function keys on top of your keyboard
kp-add, kp-subtract, kp-multiply, kp-divide	Keypad keys (to the right of the regular keyboard)
kp-backtab, kp-space, kp-tab, kp-enter	, with names or punctuation.
kp-separator, kp-decimal, kp-equal	 
kp-0, kp-1, ... kp-9	Keypad keys with digits.
kp-f1, kp-f2, kp-f3, kp-f4	Keypad PF keys.
**** define key 
Function: (define-key KEYMAP KEY DEF)

Comment:

This function binds a definition DEF, usually a command, to a key sequence KEY. A definition can be other things that you can find in the built-in documentation.

A key sequence (key, for short) is a sequence of input events that have a meaning as a unit. Input events include characters, function keys and mouse buttons—all the inputs that you can send to the computer. A key sequence gets its meaning from its binding, which says what command it runs.

When a key sequence KEY is pressed, Emacs runs the associated function. A keymap KEYMAP stores a list of bindings between KEY and definition DEF. Major mode or minor mode uses keymap to provide its own key bindings. A keymap usually has -mode-map suffix, i.e. dired-mode-map; if you want to change or add a key binding in a major mode or minor mode, you use define-key function like this:

Example:

#+begin_src emacs-lisp
;; Dired uses "e", "f" or RET to open a file
;; you can reuse one of these keys for different purpose
;; for example, you can bind it to wdired-change-to-wdired-mode
;; wdired-change-to-wdired-mode allows you to edit your Dired buffer
;; like a normal text buffer, such as edit file/directory names,
;; permission bits.. and then commit the changes to disk.
;;
;; "e" is short for "edit"
;; After finish your editing, "C-c C-c" to commit, "C-c C-k" to abort
(define-key dired-mode-map (kbd "e") 'wdired-change-to-wdired-mode)

#+end_src
**** defalias 
Function: (defalias SYMBOL DEFINITION &optional DOCSTRING)

Comment: defalias allows you to rename a command. It is usually used to abbreviate command name.

Example: Put the following aliases in your init.el:

#+begin_src emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p) ; y or n is enough
(defalias 'list-buffers 'ibuffer) ; always use ibuffer

                                        ; elisp
(defalias 'eb 'eval-buffer)
(defalias 'er 'eval-region)
(defalias 'ed 'eval-defun)

                                        ; minor modes
(defalias 'wsm 'whitespace-mode)
#+end_src

**** defun

Macro: (defun NAME ARGLIST &optional DOCSTRING DECL &rest BODY)

Comment: defun is a Lisp macro that allows you to define a function, like any other language. A function is a collection of Lisp forms to be executed. The return value is the last form.

Example:

Create a normal function (Not available in M-x):
#+begin_src emacs-lisp
(defun demo ()
  (message "Hello World" number string))
#+end_src

Create a command (Available in M-x):
#+begin_src emacs-lisp
(defun demo ()
  (interactive)
  (message "Hello World"))
#+end_src

%interactive is a special form that turns a function into a command and allow a command to accept various types of prefix arguments, such as a number, a string, symbol, buffer names…%
 You can C-h f and type interactive to find out more.
**** mapc
Function: (mapc FUNCTION SEQUENCE)

Comment: mapc calls the function FUNCTION on each element of the sequence SEQUENCE.

Example:

#+begin_src emacs-lisp
;; load every .el file inside ~/.emacs.d/custom/
(mapc 'load (directory-files "~/.emacs.d/custom" t ".*\.el"))

#+end_src
*** issue commands based on hostname in emacs config
you can config emacs so that some specific commands (such as paths, themes anything really) run on a specific machine while others run on another machine. this can be done based on hostname. 
here is an example of defining a path for a org-mode plugin based on which machine emacs is run

#+BEGIN_SRC emacs-lisp :results none
(if (string= system-name "voices") (setq-default org-download-image-dir "/home/zeltak/org/attach/images_2014/") (setq-default org-download-image-dir "/media/NAS/Uni/org/attach/images_2013/"))                                                           
#+END_SRC

'if' takes a condition, (string= system-name "server") which is 't' if the host name happens to be "server", otherwise 'nil'  
if the condition evaluates to 't', it does the first command (setq...) otherwise the second one (second setq statement)                                          

you can also add more then one command with the 'progn' command, ₆In example₆ 

#+BEGIN_SRC elisp
(if (string= system-name "voices") 
(progn
(setq initial-scratch-message "Don't use emacs on your server")
(add-to-list 'custom-theme-load-path "~/.emacs.d/nonelpa/flatland-emacs/")
(load-theme 'leuven t)
)

(progn
(setq initial-scratch-message "your not on voices")                                                           
(load-theme 'solarized t)
)
)
#+END_SRC

*** True and False
In elisp, the symbol nil is false, anything else is considered true. So, 0 is true, and empty string "" is also true. Also, nil is equivalent to the empty list (), so () is also false.

; all the following are false. They all evaluate to nil
(if nil "yes" "no") ;  "no"
(if () "yes" "no") ;  "no"
(if '() "yes" "no") ;  "no"
(if (list) "yes" "no") ;  "no", because (list) eval to a empty list, same as ()
*** setq
Setq - '/setq means the variable is not evaluated

setq is just like set with a quoted first arg:

(set 'foo '(bar baz))

is just like

(setq foo '(bar baz))
*** load path/add to list
to manually load functions/plugins to the emacs load path so you can require them use the add to list command
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/evil")
#+END_SRC

*** Require
when you need to load feautres that are not in stock emacs installion default you need to require it
so as opposed to lets say !winner-mode! which is stock emacs !evil! is a plugin so you need to require it on startup:
(require 'evil)

after you require the feature you can define options (make use of the c-h f to describe the specific option) as you would for other emacs native commands:

(setq evil-want-fine-undo t)
*** describe Functions
to get info on a specific function

c-h f FUNCTIONNAME

you will get info on the function and how to set it IE:

#+BEGIN_EXAMPLE
With a prefix argument ARG, enable Tool Bar mode if ARG is
positive, and disable it otherwise.  If called from Lisp, enable
Tool Bar mode if ARG is omitted or nil.

#+END_EXAMPLE

so here if its 1 (positive) it works and if -1 (negative) its disabled

#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.\\(org\\|org_archive\\|txt\\)$" . org-mode))
#+END_SRC
       
*** printing
to print something in the botom bar use the message command
#+BEGIN_SRC emacs-lisp
; printing
(message "hi")
#+END_SRC

will preint the word hi in bottom bar

*** functions

Basic function definition is of the form:

#+BEGIN_SRC emacs-lisp
(defun function name (param1 param2 ) "doc string" body)

;IE

(defun myFunction () "testing" (message "Yay!") )
#+END_SRC

When a function is called, the last expression in the function's definition body is returned. (You do not have to write Return .)
This function can be called in other places in a elisp program but the function won't be available when user types Alt+x unless you make it interactive. To make a function available for interactive use, add the (interactive) right after the doc string. this makes the function a !command!.

The following is a basic function definition for interactive use. The function takes no argument. Evaluate the following code. Then, you can call it by Alt+x yay
#+BEGIN_SRC emacs-lisp
(defun yay ()
  "Insert Yay! at cursor position."
  (interactive)
  (insert "Yay!"))
#+END_SRC
this function now appears in your M-x commands

In summary:

The (interactive ) clause is a way to make your function interactively callable, and a way to fill out your function's parameters when used interactively.
A function with the (interactive ) clause is called a command, and can be called by execute-extended-command Alt+x.
The (interactive "x") form takes a single-letter code to indicate how the command gets its arguments from user. There are about 30 codes for interactive, but the most useful are the following:

(interactive), for commands that takes no argument.
(interactive "n"), prompt user for a number as argument. (prompt string can follow right after "n" as part of the string, like this: (interactive "nWhat is your age?").)
(interactive "s"), prompt user for a string as argument.
(interactive "r"), for commands that takes 2 arguments, the beginning and ending positions of the current region. This form is typically used for commands that act on a text selection.

*** auto mode list
#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.\\(org\\|org_archive\\|txt\\)$" . org-mode))
#+END_SRC
to open specific file types in specific modes use auto-mode-alist, Ie to open all .org files in org
You can use C-h v to descrive auto-mode-alist fully

*** Hooks

%Tip most major modes will have a hook name Ie markdown-mode-hool, which can be used to assign hooks%
#+BEGIN_SRC emacs-lisp
;enable flyspell
(add-hook 'org-mode-hook  
          (lambda ()      
            (flyspell-mode)))
#+END_SRC
*** check what the variable is set to
it's easy to check whether local variables were actually set the way you expected,just use

?C-h v? `VAR`

for the `VAR` in question, and Emacs tells you if it has a buffer-local value.

₆In example₆ C-h org-use-tag-inheritance will tell you if its set to t or nili

*** describe key ofand get the key functions name
use ?C-h k? , followed by the keybind
*** add a speicifc orgmode TODO state
#+BEGIN_SRC emacs-lisp :results none
(org-todo "COOK") 
#+END_SRC
*** add notification in a command 
add a shell command like

#+BEGIN_SRC emacs-lisp :results none
(shell-command "notify-send fb uploaded")
#+END_SRC

₆In example₆ 

#+begin_src emacs-lisp

(defun z/dired-fb-upload ()
  (interactive)
  (sr-term)
  (let* ((fmt "fb %s\n")
         (file (sr-clex-file sr-selected-window))
         (command (format fmt file)))
    (if (not (equal sr-terminal-program "eshell"))
        (term-send-raw-string command)
      (insert command)
      (eshell-send-input)
      (shell-command "notify-send fb uploaded")
)))
#+end_src

** Functions
*** basic info
only interactive functions are available with ~M-x~
to make a function interactive issue something like this

#+BEGIN_SRC emacs-lisp :results none
(defun z/hydra-wrap-elisp () (interactive) (z/wrap-in-elisp-block))
#+END_SRC
*** create a new function to be used with binds and m-x from a base function 
#+BEGIN_SRC emacs-lisp :results none
(defun z/hydra-wrap-elisp () (interactive) (beginning-of-line) (z/wrap-in-elisp-block))
#+END_SRC

*** fset
define a function for the symbol using the fset, example

#+BEGIN_SRC emacs-lisp :results none
(fset 'z/prefix-org-refile (C-u M-x org-refile))   
#+END_SRC

*** simple food template Function
here is an anotated version
#+BEGIN_SRC emacs-lisp :results none
;name of the functiom
(defun recipe-templat
;maken recipe-template ()
        (interactive)
;       this will move the cursor to a 0 poistion so the "search forward from point" command below will work
         (goto-line 0)
;       search for a specific keyword/header to place the sub entries
         (search-forward " Inbox")
;move via org command 
         (org-meta-return)
         (org-metaright)
; define a variable called recipe-name and use read-string to give it a user entered string`
         (setq recipe-name (read-string "Title: "))
;insert the string recipe-name
         (insert recipe-name)
;ask for org tags to be entered
         (org-set-tags)
         
;create 2 sub headers: "ingridients" and "Preperation" by using the org mode meta-enter and meta right and then entering strings
         (org-meta-return)
         (org-metaright)
         (insert "Ingridients")
         (org-meta-return)
         (insert "Preperation")
; go back to main header by matcing on the recipe-name string from above
         (search-backward recipe-name)
; in the below property drawer example we will define a variable use the read-string to give it a user entered string
;src1 src2 etc will be the individual var names where the read-string will be the user entered names
         (setq src1 (read-string "Time: "))
;then we use the src1 etc to set the relevant org property value
         (org-set-property "Time" src1)
         (setq src2 (read-string "Rating: "))
         (org-set-property "Rating" src2)
         (setq source (read-string "Sources: "))
         (org-set-property "Source" source)
         (setq amount (read-string "Ammount: "))
         (org-set-property "Ammount" amount)
         (setq src5 (read-string "Fav: "))
         (org-set-property "Fav" src5)
         ;move to the ingridients section and start a yasnippet expansion
         (search-forward "Ingridients")
         (yas-insert-snippet)
)

#+END_SRC
*** sample function with interactive lines 
#+BEGIN_SRC emacs-lisp :results none
(global-set-key (kbd "C-c w e")
                    (lambda ()
                      (interactive)
;;jump to the start of the line 
                      (beginning-of-line)
;issue the function below z/wrap...
                      (z/wrap-in-elisp-block)
;;again jump to start of line 
                      (beginning-of-line)
;;since the function leaves an empty gap delete the first 2 caracters (white-space)
                      (delete-char 2)
                                           ))
#+END_SRC
*** run a bash/shell command in function
use the shell command ₆In example₆ 
#+BEGIN_SRC latex :results none
(shell-command "notify-send fb uploaded")
#+END_SRC

** Dired
*** basic keys
【Enter ↵】	Open the file
【q】	Close the dir
【C】	Copy file
【R】	Rename/move file
【D】	Delete file
【+】	create a new dir
【g】	Update the entire contents of the Dired buffer (revert-buffer). 

*** use dired to find and replace multiple files at once 
Call dired to list files in dir, or call find-dired if you need all subdirectories.
$Note$ if using ido use ?Ctrl-j? to open the dired mode after you choose a location with ido
Mark the files you want. You can mark with ?m? or regex by typing ?% m?
Type Q to call dired-do-query-replace-regexp.
Type your find regex and replace string $Note- you don't have to use regex here you can just type normally$ 
For each occurrence, type y to replace, n to skip (Type ?Ctrl+g? to abort the whole operation.
Type ! to replace all occurrences in current file without asking, N to skip all possible replacement for rest of the current file
To do the replacement on all files without further asking, type Y
Call ibuffer to list all opened files.
Type ?* u? to mark all unsaved files, type S to save all marked files, type D to close them all.	

*** travel through dirs without openning new buffer
Use ?a? (dired-find-alternate-file) instead of Enter
*** customize image-dired save location
use m-x customize-mode
then search for image-dired and set the locations of :
`image-dired-db-file` and `image-dired-dir`
*** How can I open files externally in Emacs dired mode 
Use ! while in dired to run a shell command on a file.
In the case of evince, it's smarter to use &, though, which will run the command asynchronously, so emacs will still be usable while you have the PDF open.

for long term use the open with library

Setup for your case may look like that:

#+BEGIN_SRC emacs-lisp :results none
(setq openwith-associations '(("\\.pdf\\'" "evince" (file))))
(openwith-mode t)
#+END_SRC

It sets file handler that will work from both dired and find-file.

*** How to hide some files
Call dired-do-kill-lines 【k】 to hide marked files

*** use 2 different dired buffer in splits ('dual pane')
zeltak: what you are seeing is because the two windows have the same dired buffer in them; if you do C-x 3 C-x d the behavior will be what you are looking for better I think

*** dired omit 
Omitting a file means removing it from the directory listing. Omitting is useful for keeping Dired buffers free of “uninteresting” files (for instance, auto-save, auxiliary, backup, and revision control files) so that the user can concentrate on the interesting files.
To activate it, add this to your .emacs

     #+BEGIN_SRC emacs-lisp :results none
     (setq-default dired-omit-mode t)
     #+END_SRC

     To toggle the mode, bind it to a keystroke that you like

     (define-key dired-mode-map (kbd "C-o") 'dired-omit-mode)

     dired-omit-files contains the regex of the files to hide in Dired Mode. For example, if you want to hide the files that begin with . and #, set that variable like this

     (setq-default dired-omit-files "^\\.?#\\|^\\.$\\|^\\.\\.$\\|^\\.")

     The variable dired-omit-extensions holds the list of all file extensions to hide in Dired Omit Mode. You can modify the list to add more file extensions to hide or remove the ones that you would like to show.

     (add-to-list 'dired-omit-extension ".example")
     (delete 'dired-omit-extension ".example")
*** copy file/folder names to kill ring 
The command `w` (dired-copy-filename-as-kill) puts the names of the marked (or next n) files into the kill ring, as if you had killed them with C-w. The names are separated by a space.

With a zero prefix argument `0 w`  this uses the absolute file name of each marked file. 
With just C-u as the prefix argument `C-u w`  it uses file names relative to the Dired buffer’s default directory. (This can still contain slashes if in a subdirectory.) 

As a special case, if point is on a directory headerline, w gives you the absolute name of that directory. Any prefix argument or marked files are ignored in this case.

*** dired color theme config 

For Dired

    dired-directory: Face used for subdirectories.
    dired-header: Face used for directory headers.
    dired-mark: Face used for dired marks.
    dired-flagged: Face used for files flagged for deletion.
    dired-marked: Face used for marked files.
    dired-perm-write: Face used to highlight permissions of group- and world-writable files.
    dired-symlink: Face used for symbolic links.

For Dired+

    diredp-date-time: Face used for date and time in dired buffers.
    diredp-deletion: Face used for deletion flags (D) in dired buffers.
    diredp-deletion-file-name: Face used for names of deleted files in dired buffers.
    diredp-dir-heading: Face used for directory headings in dired buffers.
    diredp-file-name: Face used for file names (without suffixes) in dired buffers.
    diredp-file-suffix: Face used for file suffixes in dired buffers (file extension).

There are many more faces that you can explore in Emacs Dired.

*** advanced marking 
You can mark files in dired by pressing m on the line of a file, and unflag it by pressing u. You can mark several files individually using m or mark all files whose names match a search string by using % m string <RET>. Use U to unmark all files.

The strings used for matching are regular expressions, so are very powerful. For example:

% m test <RET> will mark all files with names containing the string "test" (equivalent to *test* on the command line.
% m ^test <RET> will mark all files with names starting with the string "test" (equivalent to test* on the command line).
% m txt$ <RET> will mark all files with names ending with the string "txt" (equivalent to *txt on the command line).
% m ^test.*org$ <RET> will mark all files with names starting with the string "test" and ending with "org" (equivalent to test*org on the command line).
% m [kxj] <RET> will mark all files with names containing the letters k, x, or j
% m [kxj] <RET> will mark all files with names containing the letters k, x, or j
% m [6-9] <RET> will mark all files with names containing the digits 6,7,8,9

** copy,cut,paste

*** kill-rectangle  replace-rectangle

kill-rectangleCtrl+xrkDelete selected column of text.
 replace-rectangleCtrl+xrtReplace text in a selected
column. (This is alias to string-rectangle)

put your cursor on mark Ctrl+Space, then move it to position needed
then call kill-rectangle A+x+kill-rectangle

 yank-rectangle Ctrl+xryPaste a column of text (after you
used kill-rectangle).

The yank-rectangle is useful when you want to move a column of text. Try
to swap the "x" and "o" blocks in the above sample text.

*** CUA mode select block



Call cua-mode to turn it on.

Ctrl+Enter to start selecting rectangle.

you can start typing to insert text to the whole column, or press
Backspace to delete to the left every char on the left boundary,
or press Delete to delete the whole rectangle, or use any of {Cut
Ctrl+x, Copy Ctrl+c, Paste Ctrl+v}.

To cancel selection, press Ctrl+Enter again.

** Editing
*** commenting
****  comment region

Comment Region :
 M-x comment-region,
 to uncomment:
 uncomment-region
 one can bind these keys
**** comment/uncomment SECTION
use
M-; (comment-dwim)
*** Copy Filename to the Clipboard
Sometimes I need to copy the name of the currently visited file to the clipboard. Emacs does not have a built-in command for that, but cooking one is pretty straightforward:

#+BEGIN_SRC emacs-lisp  
(defun copy-file-name-to-clipboard ()
  "Copy the current buffer file name to the clipboard."
  (interactive)
  (let ((filename (if (equal major-mode 'dired-mode)
                      default-directory
                    (buffer-file-name))))
    (when filename
      (kill-new filename)
      (message "Copied buffer file name '%s' to the clipboard." filename))))
#+END_SRC

Evaluate the new bit of code in Emacs (maybe by using C-M-x somewhere in the body of the function definition) and invoke the command with M-x copy-file-name-to-clipboard.

*** Single Key to Delete Whole Line

To delete a whole line, call kill-whole-line Ctrl+ Shift+ Backspace. You can give it the same key as kill-line, to replace it. ( Emacs Keybinding Syntax Examples) You can also set the Cut command (kill-ring-save Alt+w) to cut the whole line when there's no selection. See: Emacs: How to Copy/Cut Current Line.

*** repeat last command
Sometimes youll want to quickly repeat an Emacs command several times and more often than not it wont have a convenient keybinding you can use to do this. Enter C-x z (repeat) - it simply repeats the most recently executed command. And the best part? After youve pressed C-x z once you can continue repeating the last command simply by pressing z. Vi(m) users will probably note that this is quite similar to the . command there.

*** manipulate cases
One operation that we have to do fairly often when editing text is manipulating the case of words. The most popular case manipulations are probably capitalize, convert to lowercase and convert to uppercase. Emacs naturally has built-in commands for all of those.

Pressing M-c runs the command capitalize-word, which will capitalize the next word and move the cursor after it. Pressing M-- M-c will capitalize the previous word without moving the cursor.

Pressing M-l runs the command downcase-word, which will lowercase the next word and move the cursor after it. Pressing M-- M-l will lowercase the previous word without moving the cursor.

Pressing M-u runs the command upcase-word, which will uppercase the next word and move the cursor after it. Pressing M-- M-u will uppercase the previous word without moving the cursor.

*** White space
**** start whitespace mode
to visually see all whitespaces in emacs issue the command:

'whitespace-mode'
**** Deleting Whitespace
**** Just one space-make sure there is only 1 space between words
To make sure two words are separated by just one space, 

use M-SPC ('just-one-space' command)

**** Remove whitespace at the end of the document
To remove whitespace at the end of a document, use any of the following:

C-x C-o (delete-blank-lines) at the end of the buffer (`M->).

However, be aware that if require-final-newline is non-nil, then a (single) newline will be added automatically at the end of the file. (The particular non-nil value determines when it is added  see C-h v require-final-newline.) This code:

#+BEGIN_SRC sh
    (defun my-delete-trailing-blank-lines ()
      "Deletes all blank lines at the end of the file."
      (interactive)
      (save-excursion
        (save-restriction
          (widen)
          (goto-char (point-max))
          (delete-blank-lines))))

#+END_SRC
**** Delete extra blank lines between paragraphs
C-x C-o (delete-blank-lines) also deletes any extra blank lines between two paragraphs, leaving just one blank line.
 
**** Delete white space in web formatted pages
to solve your problem, first select the text in question and do M-x delete-blank-lines 
then select it again and do :s/^ //                                                           
this leaves both empty lines and leading whitespace are gone                                          

*** Edit Files as Root

One area where Emacs traditionally falls short by default is editing
files that require =root= permissions. Since most Emacs users just use a
single Emacs frame they never leave, they have the problem of having
started it with their current user's privileges(and it's unlikely this
user is =root=). In this post I'll describe two ways to alleviate that
particular problem (note that =emacsclient= users have other options to
pick from as well - one is mentioned at the very end of the post).

Here's Option A - a simple command that allows you to reopen the
currently visited file with root permissions(obtained via =tramp= and
=sudo=) and prompts you for a file name if you're not currently visiting
a file or supply a prefix argument:


#+BEGIN_EXAMPLE lisp
    (defun sudo-edit (&optional arg)
      "Edit currently visited file as root.

    With a prefix ARG prompt for a file to visit.
    Will also prompt for a file to visit if current
    buffer is not visiting a file."
      (interactive "P")
      (if (or arg (not buffer-file-name))
          (find-file (concat "/sudo:root@localhost:"
                             (ido-read-file-name "Find file(as root): ")))
        (find-alternate-file (concat "/sudo:root@localhost:" buffer-file-name))))
#+END_EXAMPLE

I came across a similar command a few years back and it's been pretty
useful to me ever since. If you like it, I'd suggest binding it to
=C-x C-r= (kind of like =find-file='s binding =C-x C-f=).


#+BEGIN_EXAMPLE
    (global-set-key (kbd "C-x C-r") 'sudo-edit)
#+END_EXAMPLE

Option B

Lately I've decided that such a command is a bit of an overhead, since
we can check the file permissions automatically anyways. While I'm not
quite fond of advising commands (debugging advised commands is no fun)
this was an excellent opportunity to exploit them (for great good):


#+BEGIN_EXAMPLE lisp
    (defadvice ido-find-file (after find-file-sudo activate)
      "Find file as root if necessary."
      (unless (and buffer-file-name
                   (file-writable-p buffer-file-name))
        (find-alternate-file (concat "/sudo:root@localhost:" buffer-file-name))))
#+END_EXAMPLE

This advises =ido-find-file=(you might want to advise =find-file=
instead if you're not using =ido=) to reopen the selected file as
root(you'll be prompted for your =sudo= password) if you don't have
write permissions for it. Extremely cool!

The first command has been part of
[[https://github.com/bbatsov/prelude][Prelude]] since forever. As of
late, the =ido-find-file= advice is also present there and it generally
voids the need for =sudo-edit=.

P.S.

=emacsclient= users have it easy. They just need the following shell
alias(I generally alias =e= to =emacsclient -t=):


#+BEGIN_EXAMPLE lisp
    alias E="SUDO_EDITOR=\"emacsclient -t -a emacs\" sudoedit"
#+END_EXAMPLE

*** copy/cut/paste the current line

at i often find the need to copy the current line too. Usually, this
meas moving the cursor to beginning of line, mark, move to end of line,
then copy. This is 4 operations. The following code will make it just a
single operation:
 (defadvice kill-ring-save (before slick-copy activate compile)
 "When called interactively with no active region, copy the current
line."
 (interactive
 (if mark-active
 (list (region-beginning) (region-end))
 (progn
 (message "Current line is copied.")
 (list (line-beginning-position) (line-beginning-position 2)) ) )
))
 (defadvice kill-region (before slick-copy activate compile)
 "When called interactively with no active region, cut the current
line."
 (interactive
 (if mark-active
 (list (region-beginning) (region-end))
 (progn
 (list (line-beginning-position) (line-beginning-position 2)) ) )
))
 Put the code in your emacs init file. Then, select the text and call
eval-region. Now, when you do not have a text selection, copy will just
copy the current line. Similar for cut. Super!
 This is now part of ErgoEmacs Keybinding.
 A great time saver is to bind them to single keys. Like this:
 (global-set-key (kbd "<f2>") 'kill-region) ; cut.
 (global-set-key (kbd "<f3>") 'kill-ring-save) ; copy.
 (global-set-key (kbd "<f4>") 'yank) ; paste.
 I've been using this for a few years. For deletting or cutting a few
lines, this is more convenient than having to set mark first.
*** Abbreviating Text
**** start 
Emacs can abbreviate text for you to be expanded automatically. To setup abbreviations, do this:
place the following into your "~/.emacs" file:
Also, if you want abbreviations to be saved whenever you save files (C-x s) or quit emacs, add the following to your .emacs:

#+BEGIN_SRC emacs-lisp :results none
(setq save-abbrevs t)              ;; save abbrevs when files are saved
                                     ;; you will be asked before the abbreviations are saved
#+END_SRC

Restoring Abbrevs- Turning on abbrev mode will read your abbrev file. To turn on abbrev-mode globally in your init file:

#+BEGIN_SRC emacs-lisp :results none
(setq-default abbrev-mode t)
#+END_SRC

**** set abbriv location and name
this can be done in the init file or if defined your custom file:/home/zeltak/.emacs.d/custom.el

#+BEGIN_SRC emacs-lisp :results none
(setq abbrev-file-name "/home/zeltak/.emacs.d/abbrv/personal_abbrv.txt")
#+END_SRC

****  use orgmode tables for abbrv files
For example, I wanted to be able to define my abbreviations in an Org Mode table in my config. I remembered coming across this technique a few weeks ago, but I couldn’t find the webpage with the code. It turned out to be simple to write from scratch. Here’s the plain text I added to my config.

#+NAME: abbrev
| Base  | Expansion                             |
|-------+---------------------------------------|
| bc    | because                               |
| wo    | without                               |
| wi    | with                                  |
| ex    | For example,                          |
| email | sacha@sachachua.com                   |
| dote  | http://sachachua.com/dotemacs         |
| web   | http://sachachua.com/                 |
| blog  | http://sachachua.com/blog/            |
| ec    | http://sachachua.com/blog/emacs-chat/ |

#+begin_src emacs-lisp :exports code :var data=abbrev
(mapc (lambda (x) (define-global-abbrev (car x) (cadr x))) data)
#+end_src

The :var data=abbrev argument to the Emacs Lisp source block is where all the magic happens. Here, it takes the data from the table named “abbrev” (which I set using #+NAME: before the table) and makes it available to the code. Emacs evaluates that data when the code is tangled (or exported) to my configuration. The code that’s in my Sacha.el looks like this:

#+BEGIN_EXAMPLE
(let ((data (quote (("bc" "because")
                    ("wo" "without")
                    ("wi" "with")
                    ("ex" "For example,")
                    ("email" "sacha@sachachua.com")
                    ("dote" "http://sachachua.com/dotemacs")
                    ("web" "http://sachachua.com/")
                    ("blog" "http://sachachua.com/blog/")
                    ("ec" "http://sachachua.com/blog/emacs-chat/")))))
  (mapc (lambda (x) (define-global-abbrev (car x) (cadr x))) data) )
#+END_EXAMPLE

**** list current abbriviations
To display a list of the current abbreviations Emacs uses, enter the command
`list-abbrevs`       

*** Delete all lines starting with common letter (flush lines)
'flush-lines'             delete lines containing matches

In Example

m-x
flush-lines
m: 

will delete all lines starting with 'm:'
*** Change/edit Case
**** Case Conversion
Emacs has commands for converting either a single word or any arbitrary range of text to upper case or to lower case.

M-l Convert following word to lower case (downcase-word). 

M-u Convert following word to upper case (upcase-word). 

M-c Capitalize the following word (capitalize-word). 

C-x C-l Convert region to lower case (downcase-region). 

C-x C-u Convert region to upper case (upcase-region). 

**** Capitalizing words and regions

In Emacs, to capitalize a word, position your cursor directly before the
word and type  M-c  .

Note: If you or your system administrators have changed the standard
Emacs key bindings, the command above might not work. If it doesn't,
try:

M-x capitalize-word

(If you aren't sure how to enter these commands in Emacs, see
[[data/aghb.html][In Emacs, how are keystrokes denoted?]])

To capitalize all the words in a region, position your cursor before the
region you wish to capitalize and set a mark. (For information about how
to set a mark in Emacs, see [[data/afhh.html][In Emacs, how do I set the
mark?]]) Once you have set the mark, position the cursor at the end of
the region you want to capitalize and enter:

M-x capitalize-region

**** Making words and regions all uppercase

To make all the letters in a word uppercase, position your cursor before
the word and type  M-u .

If that doesn't work, try:

M-x upcase-word

To make all the words in a region uppercase, position your cursor before
the region and set a mark. Then move your cursor below the region and
type  C-x C-u .

If that doesn't work, try:

M-x upcase-region

Note: By default, this command is disabled, but when you try to use
it, Emacs will give you the option of turning it on.

**** Making words and regions all lowercase

To make all the letters in a word lowercase, position your cursor before
the word and type  M-l  (the letter l).

If that doesn't work, try:

M-x downcase-word

To make all the words in a region lowercase, position your cursor before
the region and set a mark. Then move your cursor below the region and
type  C-x C-l  (the letter l).

If that doesn't work, try:

M-x downcase-region

Note: By default, this command is disabled, but when you try to use
it, Emacs will give you the option of turning it on.

*** Delete Duplicate Lines

'delete-duplicate-lines' will delete duplicated lines in current text selection.

** Regex in emacs
*** Regular Expression Syntax

Here is the syntax used by Emacs for regular expressions. Any character
matches itself, except for the list below.

The following characters are special

#+BEGIN_SRC elsip
.  + ? ^ $ \ [ 
#+END_SRC

Between brackets [], the following are special

#+BEGIN_SRC elisp
] - ^ 
#+END_SRC

Many characters are special when they follow a backslash -- see below.

#+BEGIN_EXAMPLE
      .        any character (but newline)
              previous character or group, repeated 0 or more time
      +        previous character or group, repeated 1 or more time
      ?        previous character or group, repeated 0 or 1 time  
      ^        start of line
      $        end of line
      [...]    any character between brackets
      [^..]    any character not in the brackets
      [a-z]    any character between a and z
      \        prevents interpretation of following special char
      \|       or
      \w       word constituent
      \b       word boundary
      \sc      character with c syntax (e.g. \s- for whitespace char)
      \( \)    start\end of group
      \< \>    start\end of word
      \` \'    start\end of buffer
      \1       string matched by the first group
      \n       string matched by the nth group
      \{3\}    previous character or group, repeated 3 times
      \{3,\}   previous character or group, repeated 3 or more times
      \{3,6\}  previous character or group, repeated 3 to 6 times
#+END_EXAMPLE

.?, +?, and ?? are non-greedy versions of ., +, and ? -- see
[[http://www.emacswiki.org/emacs/NonGreedyRegexp][NonGreedyRegexp]].
Also, \W, \B, and \Sc match any character that does not match
\w, \b, and \sc.

Characters are organized by category. Use C-u C-x  to display the
category of the character under the cursor.

#+BEGIN_EXAMPLE
      \ca      ascii character
      \Ca      non-ascii character (newline included)
      \cl      latin character
      \cg      greek character
#+END_EXAMPLE

Here are some
[[syntax\_classes[[http://www.emacswiki.org/emacs?actionedit;idsyntax_classes][?]]]]
that can be used between brackets, [].

#+BEGIN_EXAMPLE
      [:digit:]  a digit, same as [0-9]
      [:upper:]  a letter in uppercase
      [:space:]  a whitespace character, as defined by the syntax table
      [:xdigit:] an hexadecimal digit
      [:cntrl:]  a control character
      [:ascii:]  an ascii character
#+END_EXAMPLE

Syntax classes:

#+BEGIN_EXAMPLE
      \s-   whitespace character        \s/   character quote character
      \sw   word constituent            \s$   paired delimiter         
      \s_   symbol constituent          \s'   expression prefix        
      \s.   punctuation character       \s<   comment starter          
      \s(   open delimiter character    \s>   comment ender            
      \s)   close delimiter character   \s!   generic comment delimiter
      \s"   string quote character      \s|   generic string delimiter 
      \s\   escape character            
#+END_EXAMPLE

You can see the current
[[syntax\_table[[http://www.emacswiki.org/emacs?actionedit;idsyntax_table][?]]]]
by typing C-h s. The syntax table depends on the current mode. As
expected, letters a..z are listed as word constituents in text-mode.
Other word constituents in this mode include A..Z, 0..9, $, %, currency
units, accented letters, kanjis. See
[[http://www.emacswiki.org/emacs/EmacsSyntaxTable][EmacsSyntaxTable]]
for details.

*** Idiosyncrasies of Emacs Regular Expressions

-  In a interactive search involving a regexp, a space character stands
   for one or more whitespace characters (tabs are whitespace
   characters). Enter C-q SPC to get a single space character. Or put
   the following in your
   [[http://www.emacswiki.org/emacs/InitFile][InitFile]] to override
   this behaviour.

#+BEGIN_EXAMPLE
                     (setq search-whitespace-regexp nil)
#+END_EXAMPLE

-  [^ ... ] matches all characters not in the list, even newlines.
   Put a newline in the list if you want it not to be matched. You can
   enter a newline character using C-o, C-q C-j, or
   C-q 012 RET. Note also that \s- matches space, tab, newline and
   carriage return. This can be handy in a [^ ... ] construct.
-  Default case handling for replacing commands executes case
   conversion. This means that both upper and lower case match in the
   regexp, whereas the case in the replacement string is chosen
   according to the match syntax. Try for example replacing john by
   harry below. Case conversion can be toggled on/off by typing
   M-c in the minibuffer during search. You can also set the
   variable case-fold-search to nil to disable case conversion; see
   [[http://www.emacswiki.org/emacs/CaseFoldSearch][CaseFoldSearch]] for
   more details. In the following example, only the last line would then
   be replaced.

#+BEGIN_EXAMPLE
                               John  >  Harry
                               JOHN  >  HARRY
                               john  >  harry
     
#+END_EXAMPLE

-  Backslashes must be double-quoted when used in Lisp code. Regular
   expressions are often specified using strings in
   [[http://www.emacswiki.org/emacs/EmacsLisp][EmacsLisp]]. Some
   abbreviations are available: \n for newline, \t for tab, \b for
   backspace, \u3501 for character with unicode value 3501, and so on.
   Backslashes must be entered as \\. Here are two ways to replace the
   decimal point by a comma (e.g. 1.5 -> 1,5), first by an interactive
   command, second by executing Lisp code (type C-x C-e after the
   expression to get it executed).

#+BEGIN_EXAMPLE
               M-x replace-regexp RET \([0-9]+\)\. RET \1, RET
              (while (re-search-forward "\\([0-9]+\\)\\." nil t)
                            (replace-match "\\1,"))
#+END_EXAMPLE

*** Some Regexp Examples

#+BEGIN_EXAMPLE
     [-+[:digit:]]                     digit or + or - sign
     \(\+\|-\)?[0-9]+\(\.[0-9]+\)?     decimal number (-2 or 1.5 but not .2 or 1.)
     \(\w+\) +\1\>                     two consecutive, identical words
     \<[[:upper:]]\w                  word starting with an uppercase letter
      +$                               trailing whitespaces (note the starting SPC)
     \w\{20,\}                         word with 20 letters or more
     \w+phony\>                        word ending by phony
     \(19\|20\)[0-9]\{2\}              year 1900-2099
     ^.\{6,\}                          at least 6 symbols
     ^[a-zA-Z0-9_]\{3,16\}$            decent string for a user name
     <tag[^> C-q C-j ]>\(.?\)</tag>  html tag
#+END_EXAMPLE

*** Some Emacs Commands that Use Regular Expressions

#+BEGIN_EXAMPLE
     C-M-s                   incremental forward search matching regexp
     C-M-r                   incremental backward search matching regexp 
     replace-regexp          replace string matching regexp
     query-replace-regexp    same, but query before each replacement
     align-regexp            align, using strings matching regexp as delimiters
     highlight-regexp        highlight strings matching regexp
     occur                   show lines containing a match
     multi-occur             show lines in all buffers containing a match
     how-many                count the number of strings matching regexp
     keep-lines              delete all lines except those containing matches
     flush-lines             delete lines containing matches
     grep                    call unix grep command and put result in a buffer
     lgrep                   user-friendly interface to the grep command
     rgrep                   recursive grep
     dired-do-copy-regexp    copy files with names matching regexp
     dired-do-rename-regexp  rename files matching regexp 
     find-grep-dired         display files containing matches for regexp with Dired
#+END_EXAMPLE

Note that list-matching-lines is an alias for occur and
delete-matching-lines is an alias for flush-lines. The command
highlight-regexp is bound to C-x w h. Also query-replace-regexp is
bound by default to C-M-%, although some people prefer using an alias,
like M-x qrr. Put the following in your
[[http://www.emacswiki.org/emacs/InitFile][InitFile]] to create such
alias.

#+BEGIN_EXAMPLE
       (defalias 'qrr 'query-replace-regexp)
#+END_EXAMPLE

See also:
[[http://www.emacswiki.org/emacs/IncrementalSearch][IncrementalSearch]],
[[http://www.emacswiki.org/emacs/ReplaceRegexp][ReplaceRegexp]],
[[http://www.emacswiki.org/emacs/AlignCommands][AlignCommands]],
[[http://www.emacswiki.org/emacs/OccurBuffer][OccurBuffer]],
[[http://www.emacswiki.org/emacs/DiredPower][DiredPower]]
*** using regex for fontlock
for normal regex
#+BEGIN_SRC emacs-lisp :results none
(font-lock-add-keywords
 'org-mode
'(("\\(%[^%\n]+%\\)" (0 '(:weight ultra-bold :background "#DDFFDD" :foreground "#000000") t))))


#+END_SRC

for special characters (₆In Example₆ ? etc) use this:
#+BEGIN_SRC emacs-lisp :results none
(font-lock-add-keywords
 'org-mode
'(("\\(\\?[^?\n]+\\?\\)" (0 '(:foreground "#000000" :weight ultra-bold :background "#FBFF00") t))))

#+END_SRC
for more details look below:
 #+BEGIN_EXAMPLE
fledermaus | ok, let's break it down to a few basics                                                                              
 fledermaus | a regular expression consists of atoms and modifiers.                                                                
 fledermaus | an atom is a "thing" which matches something, the simplest atom being a non-special character                        
 fledermaus | a modifier changes the number of times that thing matches.                                                           
 fledermaus | so "a" matches a (an expression containing just one atom)
ledermaus | "a?" is an atom plus a modifier. "a" matches a and ? means "the previous atom, 0 or 1 times"                        
ledermaus | so "aa?" means a followed by a or nothing                                                                           
ledermaus | ok. so next up is grouping constructs. they allow you to take a sequence of atoms and modfiers, and say "everythng  
          | _outside_ this group should treat the wholee group as an atom"                                                      
ledermaus | the grouping construct inh this dialect of regexps is \( \)                                                         
ledermaus | so, up at the top there, yo have a !, which is not special in regexps. it's just an atom                            
ledermaus | you want to replace it with ?, but ? is a modifier, so you need to make it non-special, ehich you do with the       
          | character \                                                                                                         
ledermaus | so the regexp is \? instead of !                                                                                    
ledermaus | but it's in a string, so you get \\?                                                                                
ledermaus | zeltak: next up, we have a kind of atom we haven't discussed yet: []                                                
ledermaus | [] denotes a "character class", which means "any of the characters inside the [ ]"                                  
ledermaus | or a negated character class, [^ ]                                                                                  
ledermaus | which means anything _except_ the listed characters                                                                 
ledermaus | zeltak: so, as you can see, modifiers don't make any sense inside a [] because [] or [^] is an atom. things can't   
          | repeat inside [], so ?, +,  etc are not special there and do not need to be escaled.                               
ledermaus | the final ! is once again a simple atom, so is replaced the same way as the first one.                              
   zeltak | fledermaus: gotcha. so im gussing the last instance of the ! should be like the first.                              
ledermaus | exactly.                                                                                                            
#+END_EXAMPLE

*** Regex tips and tricks
**** replace all numbers with space
use the regex syntax [0-9]
or in a command 
#+BEGIN_SRC emacs-lisp :results none
(progn (goto-char (point-min)) (replace-regexp "[0-9]" ""))      
#+END_SRC

you can also create a function from that 

** ELISP
*** Introduction to lisp
**** Functions
The symbol after ( is usually a function name, unless its part of a list of literals (numbers, strings, etc.). You'll learn how to recognize literal lists later.

In math, operators like + and * go between the numbers they will work on. In Emacs Lisp, the operator (or the "function") is at the start of the expression, followed by the things it's going to operate on ("arguments").

#+BEGIN_EXAMPLE
( ( 1 + 2 ) * 3 )    Math expression
( * ( + 1 2 ) 3 )    Emacs Lisp expression
#+END_EXAMPLE

To find out if something is a function, what it does, what arguments it takes, and if it has any keyboard shortcuts, use the C-h f (describe-function) command. Give it the function name. For example, C-h f add-hook will show you the documentation for add-hook, and C-h f show-paren-mode will show you the documentation for that.
**** variables

Variables are containers that can hold different values. In Emacs Lisp, you can change the value of a variable as many times as you want, and you can change it to different types of data as needed.

Like the way you can use C-h f (describe-function) to learn more about a function, you can use C-h v (describe-variable) to learn more about a variable by name. For example, use C-h v to look up the documentation for visible-bell. It says:

Non-nil means try to flash the frame to represent a bell.
A non-nil value is anything that isn't nil, such as t or 1. If you would like to configure your Emacs to flash instead of ringing the bell, you could add the following code to your ~/.emacs.d/init.el:

#+BEGIN_EXAMPLE
(setq visible-bell t)
#+END_EXAMPLE

Many variables have the same value no matter what youre looking at. Some variables change depending on the buffer you're in, and are called "buffer-local" variables. Use C-h v to find out if a variable is buffer-local. For example, the documentation for tab-width includes:
#+BEGIN_EXAMPLE
Automatically becomes buffer-local when set.
#+END_EXAMPLE
This means you can't globally set it with setq, because any changes you make will only be applied to the current buffer. However, you can set the default value with setq-default like this:
#+BEGIN_EXAMPLE
(setq-default tab-width 2)
#+END_EXAMPLE
**** single qoute (')
Let's take a closer look at this example.

#+BEGIN_EXAMPLE
(add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
#+END_EXAMPLE
add-hook is a function
both:
'emacs-lisp-mode-hook​  
'turn-on-eldoc-mode​

have single quotes, which tells Emacs to skip evaluating them. They refer to the name of the thing instead of its value. 

emacs-lisp-mode-hook is a variable that contains a list of functions to run, and turn-on-eldoc-mode is a function that were adding to that list.

The single quote means take it literally - treat it as the name of something. If you remove the quote from emacs-lisp-mode-hook, Emacs will look up the value in that variable and use that as the name of the variable to actually set, and you'll probably get an error.
**** setq
Not everything is quoted. You'll often see lines like this in Emacs configuration files:

#+BEGIN_EXAMPLE
(setq delete-old-versions -1)
#+END_EXAMPLE


setq stands for "set quoted". This is actually the same code as:
#+BEGIN_SRC emacs-lisp :results none
(set 'delete-old-versions -1)
; or
(set (quote delete-old-versions) -1)
#+END_SRC
but setq is shorter, so it's more common.

**** Work with lists

You can set the value of a variable to multiple things. In Emacs configuration files, youll often see ' used for lists. For example,

#+BEGIN_SRC emacs-lisp :results none
(setq diff-switches '("-b" "-u"))
#+END_SRC

sets the options for the diff command to a list containing two items, -b and -u. Quoting the list creates a list and quotes all the content in it as needed. You can create lists with the list function instead. The code above is the same as:

#+BEGIN_SRC emacs-lisp :results none
(setq diff-switches (list "-b" "-u"))
#+END_SRC

The code above sets the value of the variable to a list, ignoring any previous values it had.

`Add to a list`

Most of the time, though, you want to add to a list instead of completely replacing it. Youll often see something like this in people's configuration files:

#+BEGIN_SRC emacs-lisp :results none
(add-to-list 'load-path "~/elisp")
#+END_SRC

This adds the ~/elisp directory to the beginning of the list of directories that Emacs checks when loading libraries. If the directory is already in the list, add-to-list does nothing.

`Deleting from a list`

If you need to delete something from a list, you can use the delete function like this:

#+BEGIN_SRC emacs-lisp :results none
(setq load-path (delete "~/elisp" load-path))
#+END_SRC

This deletes the specified member from the list. Note that the second argument for delete is not quoted, so Emacs Lisp uses the value instead of treating it as the name of a list.

Hooks are lists of functions, so you can delete items using delete. Alternatively, a cleaner way to remove a hook is to use remove-hook like this:

#+BEGIN_SRC emacs-lisp :results none
(remove-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
#+END_SRC

**** Hooks

Hooks are lists of functions that are called from Emacs Lisp in order to modify the behaviour of something. For example, different modes have their own hooks so that you can add functions that will run when that mode is initialized. You saw this example earlier in the module:

#+BEGIN_SRC emacs-lisp :results none
(add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
#+END_SRC


This is equivalent to:

#+BEGIN_SRC emacs-lisp :results none
(add-to-list 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
#+END_SRC

It adds the turn-on-eldoc-mode function to the list of functions when a buffer is initialized with emacs-lisp-mode.
**** Dot notation

Some things look like lists, but theres a dot between the first element and the last element. Whether something should have a dot or not depends on what's expected by the function that uses the data. For example:

#+BEGIN_SRC emacs-lisp :results none
(add-to-list 'package-archives '("melpa" . "http://melpa.milkbox.net/packages/"))
#+END_SRC

This calls the add-to-list function with two arguments. The first argument (​'package-archives​) specifies the list to add an item to
and the second argument (​'("melpa" . "http://melpa.milkbox.net/packages/")​) is the data to add.

The dot (x . y) shows that this is a cons cell, which is something that has two parts. These parts are called the car and the cdr, and can contain symbols, values, lists, and so on. A cons cell like ("abc" . "def") looks like this:

*** hooks
**** add a hook
a simple hook EXAMPLE

#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook  
          (lambda ()      
            (auto-complete-mode)))

#+END_SRC

where the hook executes one org mode starts and the exe is turning on auto-complete-mode

*** require, load, load-file, autoload
Emacs lisp's module system is a primitive system, centered on loading file, with some slightly high level things such as its features, autoload, require. However, nothing is strict or enforced by elisp.

| Function Name   | Purpose                   | Tech Detail                         | Comment                             |
| <15>            | <25>                      | <35>                                | <35>                                |
|-----------------+---------------------------+-------------------------------------+-------------------------------------|
| load-file       | Load a file               | Load one specific file              | Use this if you have one SPECIFIC file at one particular file path |
|-----------------+---------------------------+-------------------------------------+-------------------------------------|
| load            | Load a file.              | load a file by searching thru var load-path. Also, tries to load a compiled version (.elc) if exists. | Use this if the path for the file is not known in advance, and you are using a file name without full path, such as undo or undo.el, and you want to load the compiled version if it exists (undo.elc). |
|                 |                           |                                     |                                     |
|                 |                           |                                     |                                     |
|                 |                           |                                     |                                     |
|                 |                           |                                     |                                     |
|-----------------+---------------------------+-------------------------------------+-------------------------------------|
| require         | Load a package if it has not already been loaded | Checks the var features, if symbol is not there, then call load to load it. | Checks the var features, if symbol is not there, then call load to load it. |
|-----------------+---------------------------+-------------------------------------+-------------------------------------|
| autoload        | Load a file only when a function is called. | Associate a function name with a file path. When the function is called, load the file, and execute the function. | If you are writing a major mode, it's good to have your package installation go by autoload (if possible). It saves startup time. |
|                 |                           |                                     |                                     |
|-----------------+---------------------------+-------------------------------------+-------------------------------------|

*** lisp example library
**** insert text around (start/end) of region
 #+BEGIN_SRC emacs-lisp :results none
 (defun z/wrap-markup-region (start end)
   "Insert a markup <b></b> around a region."
   (interactive "r")
   (save-excursion
     (goto-char end) (insert "</b>")
     (goto-char start) (insert "<b>")
     ))
 #+END_SRC

**** Find/Replace Text Region- good for cleaning up scripts 
This code illustrates how to do text replacements on a region. Very useful. For example:

#+BEGIN_SRC emacs-lisp :results none
(defun replace-greek-region (start end)
  "Replace “alpha” to “α” and other greek letters in current region."
  (interactive "r")
  (save-restriction
    (narrow-to-region start end)
    (goto-char (point-min))
    (while (search-forward " alpha" nil t) (replace-match " α" nil t))
    (goto-char (point-min))
    (while (search-forward " beta" nil t) (replace-match " β" nil t))
    (goto-char (point-min))
    (while (search-forward " gamma" nil t) (replace-match " γ" nil t))
    )
  )
#+END_SRC
**** Highlighting Lines

This example shows you how to make lines containing the words “ERROR:” or “NOTE:” highlighted, whenever a file ending in “log” is opened.
#+BEGIN_SRC emacs-lisp :results none
(defun highlite-it ()
  "Highlight certain lines…"
  (interactive)
  (if (equal "log" (file-name-extension (buffer-file-name)))
      (progn
        (highlight-lines-matching-regexp "ERROR:" 'hi-red-b)
        (highlight-lines-matching-regexp "NOTE:" 'hi-blue-b))))

(add-hook 'find-file-hook 'highlite-it)
#+END_SRC

The add-hook line will make emacs call “highlite-it” whenever a file is opened. It works by adding the function “highlite-it” to the list in the variable find-file-hook.

find-file is the function that open files. find-file-hook is a variable containing list of functions that will run when find-file is run.
** Emacs on MS windows
*** how to launch emacs in windows (with no command prompt)
Note that GNU Emacs for Windows comes with two executables to start Emacs:
"emacs.exe" and "runemacs.exe"
The former keeps a DOS-Prompt window in the background, while the latter does not, so when if you choose that distribution and want to create a shortcut, be sure to launch "runemacs.exe".

*** how to install and use custom config
the best way i found was to install the emacs speaks statistics
http://ess.r-project.org/

!note! this will not install org-mode, but is ok if you use latest orgmode from MELPA/Git etc

then in windows simple clone your git repo with your emacs config to 

~/.emacs.d (full path on windows is file:/c:\Users\ekloog\.emacs.d

** emacs Server (deamon mode)
*** Emacs as systemd service						:Fav:

Its simple enough to run the emacs daemon with systemd, create the following file

[[file:]]/etc/systemd/system/emacs@.service

and put this inside:

#+BEGIN_SRC sh
[Unit]
Description=Emacs: the extensible, self-documenting text editor

[Service]
Type=forking
ExecStart=/usr/bin/emacs --daemon
ExecStop=/usr/bin/emacsclient --eval "(progn (setq kill-emacs-hook 'nil) (kill-emacs))"
Restart=always
User=%i
WorkingDirectory=%h

[Install]
WantedBy=multi-user.target
Enable the unit for your user

#+END_SRC

then you can enable/strat/stop the deamon with usual systemd syntax:

#+BEGIN_SRC sh
systemctl enable emacs@USER
systemctl start emacs@USER

#In example 
systemctl start emacs@zeltak
#+END_SRC

*** start server (daemon mode)
simply start emacs as:

#+BEGIN_SRC sh
emacs --daemon
#+END_SRC

and it starts running in the background. After that, you can start emacs client frames (windows) using:

#+BEGIN_SRC sh
emacsclient 
#or for terminal only
emacsclient -t
#+END_SRC

*** kill server

In example  

#+BEGIN_SRC sh
emacsclient -e "(kill-emacs)
#+END_SRC
 
*** different window name per emacs client				:Fav:

#+BEGIN_SRC sh
emacsclient -c -e '(x-change-window-property "WM_CLASS" "Client_NAME_NEEDED" nil nil nil t)' 
#+END_SRC

$Note-you only need to change the Client_NAME_NEEDED part$:

** Ess
*** install ESS through git
#+BEGIN_SRC sh
git clone https://github.com/emacs-ess/ESS.git  	 
#+END_SRC

then add this to Emacs config:

#+BEGIN_SRC emacs-lisp :results none
(add-to-list 'load-path "/home/zeltak/.emacs.d/src/ESS/lisp/")
(load "ess-site")
#+END_SRC

*** `ess-remote` connect to a remote server (zuni) and run R scripts (and tangled org) 
- Start a new shell:
#+BEGIN_SRC emacs-lisp :results none
ansi-term
#+END_SRC

- ssh into the machine
#+BEGIN_SRC emacs-lisp :results none
ssh uni
#+END_SRC

- Start the ESS process on the remote machine:  for example R

#+BEGIN_SRC sh
R
#+END_SRC
%Tip-you can check the correct machine with the R command%
#+BEGIN_SRC R
Sys.info()
#+END_SRC

- Start ‘M-x ess-remote':
#+BEGIN_SRC emacs-lisp :results none
ess-remote
#+END_SRC
%Tip- in some terms issue ~C-x M-x~ to launch the ess-remote command% 

You will be prompted for a program name with completion. Choose R.
#+BEGIN_EXAMPLE
Dialect: R|stata|....
#+END_EXAMPLE
Your process is now known to ESS.


- Graphics (interactive) on the remote machine. If you run X11 (See X11, X Windows) on both the local and remote machines then you should be able to display the graphs locally by setting the ‘DISPLAY’ environment variable appropriately. also enable X11 forwarding in your ssh config file:/~/.ssh/config  for the specific server

- org

for org mode compatibility change you sessuin name to the ansi term buffer R name. (defaults to *ansi-term*)
₆In example₆ 


this is the one we ended up using 
#+BEGIN_SRC R  :session *ansi-term*  :results none
ls()
#+END_SRC 

then just issue the command as usual (₆In example₆ eval block with C-c etc)

**** alternative methods (not tested by zeltak)
***** connect via tamp 

ESS works with processes on remote computers as easily as with processes on the local machine. The recommended way to access a statistical program on remote computer is to start it with tramp. Require tramp in your .emacs file:
(require 'tramp)
%note- not needed with emacs 24 onwards%

Now start an ssh session with

?C-x f? /ssh:user@host: RET

Tramp should open a dired buffer in your remote home directory. Now call your favorite ESS process (R, Julia, stata etc) as you would usually do on local machine: M-x R.

Alternatively you can start your process normally (M-x R). After you are asked for starting directory, simply type ‘/ssh:user@host: RET’. R process will be started on the remote machine.

***** using separate ssh command 
you connect to the server you want to run R on via SSH on your local machine (client)
$Note- you need to make sure Emacs daemon is runnig on that server$

#+BEGIN_SRC sh
ssh -X user@hostipaddress 
#+END_SRC
$Note$ the -X for X11 forwarding. once connected issuse 

#+BEGIN_SRC sh
emacs -nw
#+END_SRC 

to start a terminal Emacs client.
open your R script as usual (this should bring up ESS) and start working,that is evaluating lines/sections of code
this will prompt you to choose a folder as your work dir and will create a *R* buffer which will act as the console

%Tip-since this is an Emacs client window which is connected to the server you can close your ssh session and the R proccess will still keep running , very much like in tmux. you can simply exit EMACS (C-x C-c) and open a new Emacs and it will still be there. also you can connect to that session from Emacs gui when you get back to the office% 

%Tip- if tab isn't working in terminal for some org related stuff (if using org with R) just use 0rg-cycle% 

***** using screen

Here is how to use ESS with R running in a remote screen session:

ssh to the remote host (outside of emacs)

start screen session

detach it

open shell in emacs (M-x shell)

ssh to the remote host again in the emacs shell

resume the screen session (screen -r)

start R

finally attach ESS to the R process using M-x ess-remote in the shell buffer where you started R

*** a handy function to clear shell
use the function below and bind it to a key of your liking

 #+BEGIN_SRC emacs-lisp :results none
 (defun clear-shell ()
    (interactive)
    (let ((old-max comint-buffer-maximum-size))
      (setq comint-buffer-maximum-size 0)
      (comint-truncate-buffer)
      (setq comint-buffer-maximum-size old-max))) 
 #+END_SRC 

** Gnus
http://www.emacswiki.org/emacs/GnusGmail
*** keys
delete mail N【B DEL】
mark multiple emails with # (and unmark with M-#)
*** terms
article-one information piece-email,article etc terms
backend-a way to get article, mailbox , rss, news backends
gnus has its own .el file but you can use an org mode config file and stick the config there
*** Errors 
**** gnus hangs at startup
if gnus hanges, one possibility is this: if you just commented out a previous setup for Gmail and replaced it with one for  
an NNTP server, Gnus will now be confused and stuck trying to get those previously-subscribed Gmail IMAP folders. just delete .newsrc and try again
*** setup
**** A quick guide
***** start 
when Gnus is properly set up, you will come to the "Group Buffer" window. The "Group Buffer" lists the email folders. In Gnus, the folder is named "Group". By default, the groups (email folders) are invisible!

You need subscribe the groups to make it visible. For example, my Gmail folder "Inbox" is a group named "nnimap+gmail:INBOX" in "Group Buffer" and its invisible by default!. If I dont subscribe that group, I can't read email in my INBOX. I know this is confusing. But this is the way of Gnus.

Check section "Subscribe groups" for details. After subscribing the group INBOX, the INBOX could still be invisible if INBOX does not contain unread emails. That makes no sense for an email client (It does make sense for a stone age news reader)! Anyway, the solution is simple, `C-u 5 gnus-group-list-all-groups` will get desired result. 
I assigned hotkey "o" to it. Here is my elisp code you could paste into your .emacs.
***** group buffer 
In the "Group Buffer", you can select a group (email folder) by pressing "RET" to check emails in that folder.
%Tip I strongly suggest pressing "C-u RET" instead because your true intention is to see ALL the emails instead of the emails filtered by "smart" Gnus.%

After selecting a group and pressing "RET", you reach the "Summary Buffer" which is, as I said before, a list of your emails.

Now everything is simple, you can press "RET" to see the email and use normail Emacs hotkeys for navigation. Hotkey "q" is for quitting "Summary Buffer".

In summary, you only need remember "Group Buffer" is the list of mail folders and "Summary Buffer" is the list of mails.
***** Search emails
"G G" to search email at server side in "Group Buffer". 
You can use "#" ("M-#" to unmark)to mark the group you want to search. If you don't mark the groups, the curent group under cursor is searched. 
If you put the cursor at the first line above any group, all the groups will be searched. You could use more advanced syntax instead of simple keyword. I suggest not doing so.

"/ /" to limit the emails by subject at "Summary Buffer". "Limiting" is means searching mail locally.

"/ a" to limit the emails by author at "Summary Buffer".

"/ w" to cancel the current filter.

You can apply the limits sequentially and cancel them one by one using "/ w"

BTW, I love "Limiting" in Gnus. See http://www.gnu.org/software/emacs/manual/html_mono/gnus.html#Limiting for more limiting tricks.

See http://sachachua.com/blog/2008/05/emacs-gnus-searching-mail/ for details.
***** Subscribe group (email folder)

"A A" in "Group Buffer" to list all groups on all the connected server. @It may take a while@.
%Tip- I suggest pressing "L" to avoid querying data from all the servers if possible.%

After getting the list of all subscribed/unsubscribed groups, press "u" to subscribe/unsubscribe specific group.

I repeat, in order to see the emails in "INBOX" folder/group, you need MANUALLY subscribe the group "INBOX"!

"l" to navigate back the default view of group buffer which you may find confusing, as I mentioned before. Press "o" is much better if you uses my elisp code to show all the subscribed groups.

"g" to refresh groups list.

***** composing and sending 
"R" to reply with quoted text. "r" to reply without quoted.
"S W" (press S then press W) to reply all (It's named "wide reply" in Emacs) with quoted text. "S w" to reply all without quoted.

to Compose new email: The hot key is "a" or "m" in "Summary Buffer".

BTW, you don't need open Gnus to compose a mail. You can type "C-x m" anywhere in Emacs.

Attach a file- The hot key is "C-c C-a"

Download attachment- The hot key is "o". See "Using Mime" in Emacs manual for details.

Send email- "C-c C-c"


Forward mail-"C-c C-f" or "M-x gnus-summary-mail-forward" in "Summary Buffer".

BTW, you can mark several emails you want to forward (hot key is "#") and then forward them all at once (Holger Schauer provided this tip).

After the forwarded email is created, you may copy the body of that email without sending it. The copied content could be inserted into any other email.

***** Refresh "Summary Buffer" in Gnus (check new emails)
Hot key "/ N" or command "M-x gnus-summary-insert-new-articles"

***** Make ALL emails in "Summary Buffer" visible (IMPORTANT)

"C-u RET" on the selected group (email folder) in "Group Buffer", or "C-u M-g" in "Summary Buffer".

Thats the most important part of this article! Gnus only display unread emails. Kind of stupid for an email client. Say my client call me to discuss his proposal in his old emails. I open my Gnus but client's emails are invisible in "Summary Buffer" because they are marked expired by Gnus. Can I ask my client hang on for five minutes because I cannot find the emails he sent?

Check http://stackoverflow.com/questions/4982831/i-dont-want-to-expire-mail-in-gnus for the details.

***** Mark emails read

Press "c" is enough. Either in summary buffer or group buffer. This is the most useful Gnus command because Gmail sucks.

***** How to read email offline

Go to the "Summary Buffer". "Summary Buffer" list the emails in one email folder.

You need mark the emails you want to read offline by "M-x gnus-summary-tick-article-forward".

The marked article will enter the disk cache.

You can remove the article from the disk cache by "M-x gnus-summary-put-mark-as-read".

The disk cache is actually the directory "~/News/cache/". I suggest backing up it with Github's private repository.

You also need insert below code into ~/.emacs,

#+BEGIN_SRC emacs-lisp :results none
(setq gnus-use-cache t)
#+END_SRC

***** How to use multiple Gmail accounts

Here is a sample

#+BEGIN_SRC emacs-lisp :results none
(add-to-list 'gnus-secondary-select-methods
             '(nnimap "gmail-second"
                      (nnimap-address "imap.gmail.com")
                      (nnimap-server-port 993)
                      (nnimap-stream ssl)
                      (nnir-search-engine imap)
                      (nnimap-authinfo-file "~/.authinfo-second.gpg")
                      ; @see http://www.gnu.org/software/emacs/manual/html_node/gnus/Expiring-Mail.html
                      ;; press 'E' to expire email
                      (nnmail-expiry-target "nnimap+gmail:[Gmail]/Trash")
                      (nnmail-expiry-wait 90)
                      ))
#+END_SRC

"gnus-secondary-select-methods" means the list of your email accounts.
***** Archiving mails
What is the equivalent Gnus command to the „Archive“ button? (Remove from „Inbox“ and stay in „All mail“)
Remove the “Inbox” tag by deleting from the “INBOX” folder with:
~B DEL~

***** Deleting mails
How can you delete a mail in Gnus so that it disappears from your Inbox in gmail and goes to Trash?

B m does gnus-summary-move-article. Invoke it, then type “[Gmail]/Trash”. In Gmail terms, this will remove the “Inbox” label and apply the “Trash” label. Messages in the trash don’t show up in other folders, even though they may have other labels.

To really delete, type B DEL (gnus-summary-delete-article), but beware: you’ll have to delete it from the Trash or Spam folder for it to really delete it. Otherwise, it will only remove the label from the message. I suggest writing a script (probably relying on Message-ID) to find the same message in the trash and delete that copy.

Moving an email to the trash will fail to remove the Inbox label[1]. The solution is to make Gnus locate the message in [Gmail]/All Mail with the same Message-ID as the one in INBOX. Delete the one in the Inbox and move the one in All Mail to the trash. Crocky, but the only solution unless Gmail fixes this on their end. Anyone who has the skill to write this script is welcome to do it.

*** authinfo
simple either save a new file with pass in file:~/.authinfo.gpg 
or if you already have a file:~/.authinfo encrypt it to a .gpg file 
** images
*** turn on image mode

M-x iimage-mode

*** images in org-mode

Depending on exactly what you want to achieve, you might try one the the
following ideas:
1. use org-mode as your buffer's major mode. You then have access to
all the power of org-mode formatting, which includes linking to image
files and displaying them:
an image without description

 [[file:/tmp/image.png]]

 an image with description

 [[file:/tmp/image.png][my description]]

 then you can call
 org-toggle-inline-images (C-c C-x C-v)
 to display images in the buffer (without a prefix argument, it will
display only images without description; if you give a prefix argument,
it will display all images)
 2. write your own elisp code to insert images where you want them, and
put it in an eval local pseudo-variable so that it is called when
opening the file. For example:
 foo
 <HERE>
 bar
 # Local Variables:
 # eval: (progn (beginning-of-buffer)(search-forward
"<HERE>")(insert-image (create-image "/tmp/image.png")))
 # End:
 You can of course wrap the elisp code into a neat function and simply
call it from the eval local variable (which is cleaner, but forces you
to have the function definition somewhere else, away from your file)

*** image mode
Open a image in your photos folder. (call dired to open a dir, then Enter ↵ on a image file to open in image mode. 〔➤ dired tutorial〕)
Press 'n' (image-next-file) to view next image.
Press 'p' (image-previous-file) to view previous image. 
** keybinds
*** What keys can be defined
What type of keys can i define?
Single Key.  F8,  Menu,  Page , Keypad 1
Single Key Sequence.  F9 8, F9  Page 
Key Combination.  Ctrl+8, Ctrl+Alt+8
Sequence of single/combo keys.  Alt+7 8, Alt+7 Ctrl+i
*** Emacs Keybinding Syntax Examples
http://ergoemacs.org/emacs/keyboard_shortcuts_examples.html
- Single Modifier Key

#+BEGIN_SRC latex :results none
(global-set-key (kbd "M-a") 'backward-char) ; Alt+a
(global-set-key (kbd "C-a") 'backward-char) ; Ctrl+a
Function keys and Special keys

(global-set-key (kbd "<f3>")   'backward-char)   ; F3 key
(global-set-key (kbd "<kp-3>") 'backward-char)   ; the “3” key on number keypad

(global-set-key (kbd "<insert>") 'backward-char) ; Ins key
(global-set-key (kbd "<delete>") 'backward-char) ; Del key

(global-set-key (kbd "<home>") 'backward-char)
(global-set-key (kbd "<end>") 'backward-char)

(global-set-key (kbd "<next>") 'backward-char)   ; page down key
(global-set-key (kbd "<prior>") 'backward-char)  ; page up key

(global-set-key (kbd "<left>") 'backward-char)   ; ←
(global-set-key (kbd "<right>") 'backward-char)  ; →
(global-set-key (kbd "<up>") 'backward-char)     ; ↑
(global-set-key (kbd "<down>") 'backward-char)   ; ↓

(global-set-key (kbd "RET") 'backward-char) ; Enter/Return key
(global-set-key (kbd "SPC") 'backward-char) ; Space bar key
(info "(elisp) Function Keys")
#+END_SRC

-Menu/App Key

#+BEGIN_SRC latex :results none
;; On Linux, menu/apps key syntax is <menu>
(global-set-key (kbd "<menu> c") 'calendar) ;
;; Windows, menu/apps key syntax is <apps>
(global-set-key (kbd "<app> c") 'calendar) ;
#+END_SRC
Example of single key sequence starting with the ▤ Menu key.

#+BEGIN_SRC latex :results none
;; Linux, the menu/apps key syntax is <menu>
;; Windows, the menu/apps key syntax is <apps>
(define-key key-translation-map (kbd "<apps>") (kbd "<menu>")) ; make the syntax equal

(global-set-key (kbd "<menu>") nil) ; good idea to put nil to the starting key
(global-set-key (kbd "<menu> n") nil) ; good idea to put nil to the starting key
(global-set-key (kbd "<menu> n 6") 'calendar) 
(global-set-key (kbd "<menu> n 7") 'calc)

#+END_SRC
-Super ＆ Hyper Keys

#+BEGIN_SRC latex :results none
;; Example of single key sequence
(global-set-key (kbd "<f7>") nil) ; good idea to put nil to the starting key
(global-set-key (kbd "<f7> <f8>") 'calendar)
(global-set-key (kbd "<f7> <f9>") 'calc)
;; Example of sequence of single or chord keys

(global-set-key (kbd "C-e") nil) ; good idea to put nil to the starting key
(global-set-key (kbd "C-e a") 'calendar)  ; Ctrl+e a
(global-set-key (kbd "C-e SPC") 'calendar)  ; Ctrl+e Space
(global-set-key (kbd "C-e C-a") 'calendar); Ctrl+e Ctrl+a
1 Modifier + Special Key

(global-set-key (kbd "M-<f3>") 'backward-char) ; Alt+F3
(global-set-key (kbd "C-<f3>") 'backward-char)  ; Ctrl+F3
(global-set-key (kbd "S-<f3>") 'backward-char)  ; Shift+F3

(global-set-key (kbd "M-<up>") 'backward-char)  ; Alt+↑
(global-set-key (kbd "C-<up>") 'backward-char)  ; Ctrl+↑
(global-set-key (kbd "S-<up>") 'backward-char)  ; Shift+↑
#+END_SRC
2 Modifier Keys

#+BEGIN_SRC latex :results none
(global-set-key (kbd "M-A") 'backward-char) ; Alt+Shift+a
(global-set-key (kbd "C-A") 'backward-char) ; Ctrl+Shift+a
(global-set-key (kbd "C-M-a") 'backward-char) ; Ctrl+Alt+a
Example of 2 modifier keys with a digit key:

(global-set-key (kbd "M-#") 'backward-char)       ; Alt+Shift+3 or Alt+#
(global-set-key (kbd "C-#") 'backward-char)       ; Ctrl+Shift+3 or Ctrl+#
(global-set-key (kbd "C-M-3") 'backward-char)     ; Ctrl+Alt+3

(global-set-key (kbd "C-S-<kp-3>") 'backward-char); Ctrl+Shift+“numberic pad 3”

;3 modifier keys pressed simultaneously:

(global-set-key (kbd "C-M-S-a") 'backward-char)   ; Ctrl+Alt+Shift+a
(global-set-key (kbd "C-M-!") 'backward-char)     ; Ctrl+Alt+Shift+1 or Ctrl+Alt+!
(global-set-key (kbd "C-M-S-<up>") 'backward-char); Ctrl+Alt+Shift+↑

;No Modifiers
;A shortcut can be created without any modifier keys.

(global-set-key (kbd "3") 'backward-char)
(global-set-key (kbd "a") 'backward-char)
(global-set-key (kbd "é") 'backward-char)
(global-set-key (kbd "α") 'backward-char)
(global-set-key (kbd "你") 'backward-char)
#+END_SRC

*** intro

What type of keys can i define?
 Single Key. ( F8,  Menu,  Page , Keypad 1 )
 Single Key Sequence. ( F9 8, F9  Page )
 Key Combination. ( Ctrl+8, Alt+8)
 Sequence of combo key. ( Alt+7 8, Alt+7 Ctrl+i)
How to find key syntax?
Call describe-key F1 k, then press the key combination. Emacs will
then display its syntax. For example, suppose you want to know the
syntax for the key press of Ctrl+Alt+F8. Call describe-key, then
press Ctrl+Alt+F8, then emacs will print "<C-M-f8> is undefined".
That means, you can use (kbd "<C-M-f8>") to represent that key
combination in lisp code.
 For examples, see: Emacs Keybinding Syntax Examples.
 Note: There is a lot syntax variations, but the one printed by
describe-key is guaranteed to work. For details of emacs's keystroke
syntax variation, see: Emacs's Key Notations Explained (/r, \^M, C-m,
RET, <return>, M-, meta).
 How to find out the current keybinding to a key?
 Call describe-key F1 k, then type the key combination. Emacs will
then show the command that key press is bound to.
 To see a list of ALL current keybindings, call describe-bindings F1
b.

*** simple chain command example

use this
 global-set-key (kbd "C-c a") (lambda () (interactive) (cmd-1 ...) (cmd2
...) ))
 In example:
 (global-set-key (kbd "S-<f8>") (lambda () (interactive) (save-buffer)
(kill-buffer) ))

*** How to change/add keys to a major mode

How to change/add keys to a major mode?
 Use a hook for the mode. A hook will load your code whenever that mode
is activated. Here's a usable example:
 ; define some keys only when the major mode html-mode is active
 (add-hook 'html-mode-hook
 (lambda ()
 (local-set-key (kbd "C-c w") 'bold-word)
 (local-set-key (kbd "C-c b") 'blue-word)
 (local-set-key (kbd "C-c p") 'insert-p)
 (local-set-key (kbd "M-4") 'tag-image)
 (local-set-key (kbd "M-5") 'wrap-url)
 )
 )

*** Rebinding Key Choices

Keys to Avoid
 Emacs has its quirks. The following keys you should not redefine:
 The question mark ? or any combination with it. (due to emacs technical
implementation quirk)
 The Esc key or Ctrl+[. (The Esc key is tied to Ctrl+[ and
Meta. Esc by itself has complicated meanings depending when it is
pressed and how many times it is pressed.)
 F1 or Ctrl+h. (This key combo is used for emacs help system
and have a special status in emacs's key system. For example, type
Ctrl+x, then type Ctrl+h, it'll list what valid keys can follow
and the associated command.)
 Ctrl+m or Enter  (These are tied together. On Apple Keyboards
the main Enter is labeled Return.)
 Ctrl+i or Tab  (These are tied together)
 Ctrl+ Shift+letter. In text terminals, it cannot distinguish
shifted and unshifted versions of such combination. Works fine if you
always use emacs in a GUI environment.
 Good Key Choices
 Emacs has some 7 thousand commands. By default, 800 of them have key
shortcuts. All the common key spots are used. If you define your own
keys without care, you may find that many major mode or minor mode
override your keys, because they have priority.
 By official emacs documentation (info "Key Binding Conventions") , the
key space for users are the function keys F5 to F9, and Ctrl+c
letter. This is very restrictive.
 The following keys are good spots for your own definitions, and does
not cause any problems in practice.
 [[macsen_files/Image_doxwkfAoBnX8ORryMxAxrw_0001.png]]
 Super  Hyper Keys

Emacs supports extra modifier keys called Super  Hyper. On a PC
keyboard, you can set the Win key or Menu key to them, or Apple
keyboard's Opt or Cmd key.
See:[[http://ergoemacs.org/emacs/emacs_hyper_super_keys.html][Emacs: How
to define Super  Hyper Keys]].

*** map move windows

(global-set-key [M-left] 'windmove-left) ; move to left windnow
 (global-set-key [M-right] 'windmove-right) ; move to right window
 (global-set-key [M-up] 'windmove-up) ; move to upper window
 (global-set-key [M-down] 'windmove-down) ; move to downer window

*** Smart window switch

Smart window switch
 The traditional window switch with C-x o can be cumbersome to use in
the long run. The windmove commands provide a more convenient way to do
this. All you have to do is to hold down Shift while pointing at a
window with the arrow keys.
 To activate the windmove keys, use the following in your configuration
fille
 (when (fboundp 'windmove-default-keybindings)
 (windmove-default-keybindings)

*** Standard Copy Paste Keys (CUA)

Standard Copy Paste Keys

First, turn on the CUA mode, under the menu Options  C-x/C-c/C-v Cut
and Paste (CUA). The CUA mode will activate the following shortcuts:

-  Ctrl+x for cut
-  Ctrl+c for copy
-  Ctrl+v for paste
-  Ctrl+z for undo

Also, it will highlight when a region of a text is selected. And, when a
text is selected, typing any text will automatically replace the current
selection. Pressing the Backspace key will also delete the selection.
 the emacs's Options menu. You can turn on standard copy and paste
shortcuts called CUA mode:

 [[macsen_files/emacs_cua_mode_menu.png]]

*** CUA mode keys

Basic Keyboard Shortcuts
 Open, Save, Close
 Ctrl+x Ctrl+fOpen a new file
 Ctrl+x Ctrl+sSave file
 Ctrl+x kClose the current file
 Moving Cursor
 Use the arrow keys    , and  Home,  End,  Page ,  Page  keys.
 Ctrl+Move cursor left by word.
 Ctrl+Move cursor right by word.
 Ctrl+ HomeBeginning of document.
 Ctrl+ EndEnd of document.
 Deleting Text
 Alt+dDelete the next word
 Alt+ BackspaceDelete the previous word
 Ctrl+kDelete all characters from cursor to end of line
 Copy Paste Undo
 First pull the menu Options  C-x/C-c/C-v Cut and Paste (CUA), then
pull the menu Options  Save Options.
 Ctrl+zUndo. (To redo, type any character then do undo twice.)
 Ctrl+cCopy
 Ctrl+xCut
 Ctrl+vPaste
 Ctrl+x hSelect All
 Ctrl+SpaceMark the starting point for copy/cut a text
 Split Window
 Ctrl+x 2Split window into 2 panes
 Ctrl+x 1Make the cursor pane fill window
 Ctrl+x oMove cursor to the other pane
 Searching Text
 To search a word, press Ctrl+s, then type your search text, emacs
will move the cursor to the location of the matched text as you type.
Press Ctrl+s again to jump to the next occurrence, press Ctrl+r
to jump to the previous occurrence.
 Once you found what you are looking for, press a arrow key to exit.
 To exit search and leave the cursor at the place before search started,
press Ctrl+g.

*** How to unset a keybinding
How to unset a keybinding?
To unset a keybinding, use global-unset-key. For example, you have
defined a keystroke for undo, and wants to kick the habit of the hitting
the default shortcut for undo:

#+BEGIN_SRC sh
(global-unset-key (kbd "C- "))
#+END_SRC

*** Use function keys for custom keyboard shortcuts
You can define keyboard shortcuts that are sequences of keys. 

This is how Emacs can have keyboard shortcuts like C-c C-c. The function keys are great for this, because (a) they often dont have assigned functions (or have ones that you dont mind losing), and (b) you dont have to press two or more keys to start your shortcut sequence, like you would do with C-c.

I like using F8 or F9 because Im right-handed and my keyboard groups function keys together. On my keyboard, theres a slight gap separating F5-F8 and F9-F12, which means its easy to distinguish F8 from F9 by feel if I happen to land on the edge.
Define those keyboard shortcuts as sequences so that you can add more shortcuts easily without having to rejig your muscle memory.

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<f9> <f9>") 'org-agenda-list)
(global-set-key (kbd "<f9> <f8>") (lambda () (interactive) (org-capture nil "r")))
#+END_SRC

If you want to rebind something that was previously bound to a non-prefix map, you can unbind it first:

(global-unset-key (kbd "<f9>"))

*** add a mode specific keybind
you use this code:
#+BEGIN_SRC emacs-lisp
(define-key text-mode-map (kbd "<f8>") 'delete-trailing-whitespace)
#+END_SRC

%Tip usually the naming will be mode + a map at the end like text-mode-map%

or you can also use hooks:

#+BEGIN_SRC emacs-lisp
; define some keys only when the major mode html-mode is active
(add-hook 'html-mode-hook
 (lambda ()
 (local-set-key (kbd "C-c w") 'bold-word)
 (local-set-key (kbd "C-c b") 'blue-word)
 (local-set-key (kbd "C-c p") 'insert-p)
 (local-set-key (kbd "M-4") 'tag-image)
 (local-set-key (kbd "M-5") 'wrap-url)
 )
)
#+END_SRC

*** define a function to toggle on/off and bindkey

use this function (stick it in your config file)

#+BEGIN_SRC emacs-lisp :results none
 (defun minimap-toggle ()
 "Toggle minimap for current buffer."
 (interactive)
 (if (not (boundp 'minimap-bufname))
 (setf minimap-bufname nil))
 (if (null minimap-bufname)
 (progn (minimap-create)
 (set-frame-width (selected-frame) 100))
 (progn (minimap-kill)
 (set-frame-width (selected-frame) 80))))
#+END_SRC
 
 I have this set to <f7>:
 (global-set-key (kbd "<f7>") 'minimap-toggle)

*** bind a key with a prefix (like C-u) 
you could use this self contained code:

#+BEGIN_SRC emacs-lisp :results none
(global-set-key (kbd "<f12>")                                    
                #'(lambda ()                                     
                    (interactive)                                
                    (let ((current-prefix-arg '(4)))             
                      (call-interactively #'org-refile))))
#+END_SRC

the key part is the last line where you need to define the function name (FUNCNAME)

(call-interactively #'FUNCNAME))))

or %better% eval this macro and use it in all future binds

#+BEGIN_SRC emacs-lisp :results none
(defmacro C-u (&rest args)
  (let ((prefix (list 4)))
    (while (cdr args)
      (cond
       ((eq (car args) 'C-u)
        (setf (car prefix) (* 4 (car prefix))))
       ((eq (car args) 'M-x)
        ;; ignore
        t)
       (t
        (error "Unknown arg %S" (car args))))
      (setq args (cdr args)))
    (unless (functionp (car args))
      (error "%S is not a function" (car args)))
    `(lambda ()
       (interactive)
       (let ((current-prefix-arg ',prefix))
         (call-interactively ',(car args))))))

(global-set-key (kbd "<f12>") (C-u M-x org-refile))
#+END_SRC

*** TODO Toggle-Map
The following keymap toggles some options which tend to be useful throughout a session.

#+BEGIN_SRC emacs-lisp :results none
(define-prefix-command 'endless/toggle-map)
;; The manual recommends C-c for user keys, but C-x t is
;; always free, whereas C-c t is used by some modes.
(define-key ctl-x-map "t" 'endless/toggle-map)
(define-key endless/toggle-map "c" 'column-number-mode)
(define-key endless/toggle-map "d" 'toggle-debug-on-error)
(define-key endless/toggle-map "e" 'toggle-debug-on-error)
(define-key endless/toggle-map "f" 'auto-fill-mode)
(define-key endless/toggle-map "l" 'toggle-truncate-lines)
(define-key endless/toggle-map "q" 'toggle-debug-on-quit)
(define-key endless/toggle-map "t" 'endless/toggle-theme)
;;; Generalized version of `read-only-mode'.
(define-key endless/toggle-map "r" 'dired-toggle-read-only)
(autoload 'dired-toggle-read-only "dired" nil t)
#+END_SRC

There are eight keys being defined there, most of which aren't even used every day, but I know I'll never forget a single one. That is the beauty of mnemonics.

Doesnt "Emacs, toggle column" just roll off your tongue as you're typing C-x t c? I feel like I'm commanding the strands of reality, but that could just be my D&D past taking the better of me.

*** bind menu key
Make the Menu as Leader Key

Even better is to set ▤ Menu key as the lead key of key sequences for emacs's hundreds of commands. 〔➤ Banish Key Chords〕
#+BEGIN_SRC emacs-lisp :results none

;; On Linux, menu/apps key syntax is <menu>
(global-set-key (kbd "<menu> c") 'calendar)

;; Windows, menu/apps key syntax is <apps>
(global-set-key (kbd "<app> c") 'calendar)
#+END_SRC

Example of key sequence starting with the ▤ Menu key.:

#+BEGIN_SRC emacs-lisp :results none
;; Linux, the menu/apps key syntax is <menu>
;; Windows, the menu/apps key syntax is <apps>
;; make the syntax equal
(define-key key-translation-map (kbd "<apps>") (kbd "<menu>"))

(progn
  (define-prefix-command 'xah-fly-leader-key-map)

  (define-key xah-fly-leader-key-map (kbd "RET") (if (fboundp 'smex) 'smex 'execute-extended-command ))
  (define-key xah-fly-leader-key-map (kbd "<backspace>") nil)
  (define-key xah-fly-leader-key-map (kbd "<delete>") nil)
  (define-key xah-fly-leader-key-map (kbd "SPC") xah-insertion-keymap)
  (define-key xah-fly-leader-key-map (kbd "<menu>") 'exchange-point-and-mark)
  (define-key xah-fly-leader-key-map (kbd "TAB") xah-menu-tab-keymap)

  (define-key xah-fly-leader-key-map (kbd ".") xah-highlight-keymap)

  (define-key xah-fly-leader-key-map (kbd "'") 'quoted-insert)
  (define-key xah-fly-leader-key-map (kbd ",") nil)
  (define-key xah-fly-leader-key-map (kbd "-") nil)
  (define-key xah-fly-leader-key-map (kbd "/") nil)
  (define-key xah-fly-leader-key-map (kbd ";") nil)
  (define-key xah-fly-leader-key-map (kbd "=") nil)
  (define-key xah-fly-leader-key-map (kbd "[") nil)
  (define-key xah-fly-leader-key-map (kbd "\\") nil)
  (define-key xah-fly-leader-key-map (kbd "`") nil)


  (define-key xah-fly-leader-key-map (kbd "8") nil)
  (define-key xah-fly-leader-key-map (kbd "7") 'delete-window)
  (define-key xah-fly-leader-key-map (kbd "3") 'delete-other-windows)
  (define-key xah-fly-leader-key-map (kbd "4") 'split-window-below)
  (define-key xah-fly-leader-key-map (kbd "5") 'split-window-right)

  (define-key xah-fly-leader-key-map (kbd "6") nil)
  (define-key xah-fly-leader-key-map (kbd "2") 'dired-jump)
  (define-key xah-fly-leader-key-map (kbd "1") 'xah-open-file-path-under-cursor)
  (define-key xah-fly-leader-key-map (kbd "9") 'ispell-word)
  (define-key xah-fly-leader-key-map (kbd "0") nil)

  (define-key xah-fly-leader-key-map (kbd "a") 'mark-whole-buffer)
  (define-key xah-fly-leader-key-map (kbd "b") 'end-of-buffer)
  (define-key xah-fly-leader-key-map (kbd "c") xah-menu-c-keymap)
  (define-key xah-fly-leader-key-map (kbd "d") 'beginning-of-buffer)
  (define-key xah-fly-leader-key-map (kbd "f") 'xah-search-current-word)
  (define-key xah-fly-leader-key-map (kbd "g") 'isearch-forward)
  (define-key xah-fly-leader-key-map (kbd "h") 'xah-help-keymap)
  (define-key xah-fly-leader-key-map (kbd "i") xah-menu-i-keymap)
  (define-key xah-fly-leader-key-map (kbd "j") 'xah-cut-line-or-region)
  (define-key xah-fly-leader-key-map (kbd "k") 'yank)
  (define-key xah-fly-leader-key-map (kbd "l") 'recenter-top-bottom)
  (define-key xah-fly-leader-key-map (kbd "m") 'universal-argument)
  (define-key xah-fly-leader-key-map (kbd "n") xah-harmless-keymap)
  (define-key xah-fly-leader-key-map (kbd "o") nil)
  (define-key xah-fly-leader-key-map (kbd "p") 'query-replace)
  (define-key xah-fly-leader-key-map (kbd "q") 'xah-copy-line-or-region)
  (define-key xah-fly-leader-key-map (kbd "r") xah-edit-cmds-keymap)
  (define-key xah-fly-leader-key-map (kbd "s") nil)
  (define-key xah-fly-leader-key-map (kbd "t") xah-menu-t-keymap)
  (define-key xah-fly-leader-key-map (kbd "u") nil)
  (define-key xah-fly-leader-key-map (kbd "v") xah-menu-v-keymap)
  (define-key xah-fly-leader-key-map (kbd "w") xah-danger-keymap)
  (define-key xah-fly-leader-key-map (kbd "x") nil)
  (define-key xah-fly-leader-key-map (kbd "y") nil)
  (define-key xah-fly-leader-key-map (kbd "z") 'comment-dwim))

 (global-set-key (kbd "<menu>") 'xah-fly-leader-key-map) 
#+END_SRC
*** The difference between "<return>" and "RET" (and TAB <tab>)

What's the difference between emacs "<return>" and "RET" key notation?
"<return>" is the Return ↩ key while emacs runs in a graphical user interface.

"RET" is the Return ↩ key while emacs runs in a terminal.

"RET" is also equivalent to "C-m" (【Ctrl+m】). (For why, see: Emacs's Key Notations Explained (/r ^M C-m RET <return> M- meta))

if you define:

(global-set-key (kbd "<return>") 'backward-char)
and run emacs in terminal, your keybinding will have no effect.

you need to use:

(global-set-key (kbd "RET") 'backward-char)
But the problem is, by binding (kbd "RET"), you are also binding (kbd "C-m"), regardless you run emacs in terminal or GUI.

What's the difference between emacs "<tab>" and "TAB" key notation?
Same situation for "<return>" vs "RET".

Here, "TAB" is equivalent to "C-i".

Same for "ESC" == "C-[".
** look and feel
*** fonts
*** faces 	 
**** find out colors/fonts etc for a specific package/mode

there are 2 ways to do it:

you may use  ~M-x list-faces-display~ and look there in all available faces

!Or!

use the ~apropos~ command and search for a key word ₆In example₆ 

#+BEGIN_SRC emacs-lisp :results none
~apropos~  >>> helm.*face actually
#+END_SRC

**** Face Attributes

[[file:/home/zeltak/Dropbox/Org/Tech/images/img23472PYP.jpg]]


Face attributes determine the visual appearance of a face. The following table lists all the face attributes, their possible values, and their effects.

Apart from the values given below, each face attribute can have the value unspecified. This special value means that the face doesn't specify that attribute directly. An unspecified attribute tells Emacs to refer instead to a parent face (see the description :inherit attribute below); or, failing that, to an underlying face (see Displaying Faces). The default face must specify all attributes.

Some of these attributes are meaningful only on certain kinds of displays. If your display cannot handle a certain attribute, the attribute is ignored.

:family
Font family or fontset (a string). See Fonts, for more information about font families. The function font-family-list (see below) returns a list of available family names. See Fontsets, for information about fontsets. 
:foundry
The name of the font foundry for the font family specified by the :family attribute (a string). See Fonts. 
:width
Relative character width. This should be one of the symbols ultra-condensed, extra-condensed, condensed, semi-condensed, normal, semi-expanded, expanded, extra-expanded, or ultra-expanded. 
:height
The height of the font. In the simplest case, this is an integer in units of 1/10 point.
The value can also be a floating point number or a function, which specifies the height relative to an underlying face (see Displaying Faces). If the value is a floating point number, that specifies the amount by which to scale the height of the underlying face. If the value is a function, that function is called with one argument, the height of the underlying face, and returns the height of the new face. If the function is passed an integer argument, it must return an integer.

The height of the default face must be specified using an integer; floating point and function values are not allowed. 

:weight
Font weightone of the symbols (from densest to faintest) ultra-bold, extra-bold, bold, semi-bold, normal, semi-light, light, extra-light, or ultra-light. On text terminals which support variable-brightness text, any weight greater than normal is displayed as extra bright, and any weight less than normal is displayed as half-bright.


:slant
Font slantone of the symbols italic, oblique, normal, reverse-italic, or reverse-oblique. On text terminals that support variable-brightness text, slanted text is displayed as half-bright. 
:foreground
Foreground color, a string. The value can be a system-defined color name, or a hexadecimal color specification. See Color Names. On black-and-white displays, certain shades of gray are implemented by stipple patterns. 
:background
Background color, a string. The value can be a system-defined color name, or a hexadecimal color specification. See Color Names.


:underline
Whether or not characters should be underlined, and in what way. The possible values of the :underline attribute are:
nil
Don't underline. 
t
Underline with the foreground color of the face. 
color
Underline in color color, a string specifying a color. 
(:color color :style style)
color is either a string, or the symbol foreground-color, meaning the foreground color of the face. Omitting the attribute :color means to use the foreground color of the face. style should be a symbol line or wave, meaning to use a straight or wavy line. Omitting the attribute :style means to use a straight line.


:overline
Whether or not characters should be overlined, and in what color. If the value is t, overlining uses the foreground color of the face. If the value is a string, overlining uses that color. The value nil means do not overline.


:strike-through
Whether or not characters should be strike-through, and in what color. The value is used like that of :overline. 
:box
Whether or not a box should be drawn around characters, its color, the width of the box lines, and 3D appearance. Here are the possible values of the :box attribute, and what they mean:
nil
Don't draw a box. 
t
Draw a box with lines of width 1, in the foreground color. 
color
Draw a box with lines of width 1, in color color. 
(:line-width width :color color :style style)
This way you can explicitly specify all aspects of the box. The value width specifies the width of the lines to draw; it defaults to 1. A negative width -n means to draw a line of width n that occupies the space of the underlying text, thus avoiding any increase in the character height or width.
The value color specifies the color to draw with. The default is the foreground color of the face for simple boxes, and the background color of the face for 3D boxes.

The value style specifies whether to draw a 3D box. If it is released-button, the box looks like a 3D button that is not being pressed. If it is pressed-button, the box looks like a 3D button that is being pressed. If it is nil or omitted, a plain 2D box is used.


:inverse-video
Whether or not characters should be displayed in inverse video. The value should be t (yes) or nil (no). 
:stipple
The background stipple, a bitmap.
The value can be a string; that should be the name of a file containing external-format X bitmap data. The file is found in the directories listed in the variable x-bitmap-file-path.

Alternatively, the value can specify the bitmap directly, with a list of the form (width height data). Here, width and height specify the size in pixels, and data is a string containing the raw bits of the bitmap, row by row. Each row occupies (width + 7) / 8 consecutive bytes in the string (which should be a unibyte string for best results). This means that each row always occupies at least one whole byte.

If the value is nil, that means use no stipple pattern.

Normally you do not need to set the stipple attribute, because it is used automatically to handle certain shades of gray. 

:font
The font used to display the face. Its value should be a font object. See Font Selection, for information about font objects.
When specifying this attribute using set-face-attribute (see Attribute Functions), you may also supply a font spec, a font entity, or a string. Emacs converts such values to an appropriate font object, and stores that font object as the actual attribute value. If you specify a string, the contents of the string should be a font name (see Fonts); if the font name is an XLFD containing wildcards, Emacs chooses the first font matching those wildcards. Specifying this attribute also changes the values of the :family, :foundry, :width, :height, :weight, and :slant attributes. 

:inherit
The name of a face from which to inherit attributes, or a list of face names. Attributes from inherited faces are merged into the face like an underlying face would be, with higher priority than underlying faces (see Displaying Faces). If a list of faces is used, attributes from faces earlier in the list override those from later faces.
 Function: font-family-list &optional frame
This function returns a list of available font family names. The optional argument frame specifies the frame on which the text is to be displayed; if it is nil, the selected frame is used.

 User Option: underline-minimum-offset
This variable specifies the minimum distance between the baseline and the underline, in pixels, when displaying underlined text.

 User Option: x-bitmap-file-path
This variable specifies a list of directories for searching for bitmap files, for the :stipple attribute.

 Function: bitmap-spec-p object
This returns t if object is a valid bitmap specification, suitable for use with :stipple (see above). It returns nil otherwise.

Face attributes determine the visual appearance of a face. The following
table lists all the face attributes, their possible values, and their`
effects.

*** themes
**** change theme
use:

#+BEGIN_EXAMPLE
M-x load-theme
#+END_EXAMPLE

choose theme (you can use tab to list all available themes)

**** load a theme at startup 

#+BEGIN_SRC emacs-lisp :results none
;;;add custom themes to list
(add-to-list 'custom-theme-load-path "/home/zeltak/.emacs.d/themes")
;to load a specifc theme 
(load-file "~/.emacs.d/themes/zprime-theme.el")
;load the choosen theme at startup 
(load-theme 'zprime t)
#+END_SRC

If you'd like to return to the default-theme just do a M-x disable-theme.
**** create a custom theme file 
Theme files !must be named *-theme.e! in your defined `custom-theme-load-path`
**** Emacs intenral theme editing/info commands
you can use the `customize-themes` command to select a theme interactively and edit it
	Type M-x custom-describe-theme to describe the theme at point.  
**** How to Set a Theme Depending on Mode
Here's how you can set background color depending on the file name extension.

#+BEGIN_SRC sh
;; sample code for setting a background color depending on file name extension

(defun my-set-theme-on-mode ()
  "set background color depending on file suffix"
  (interactive)
  (let ((fileNameSuffix (file-name-extension (buffer-file-name) ) ))
    (cond
     ((string= fileNameSuffix "el" ) (set-background-color "honeydew"))
     ((string= fileNameSuffix "txt" ) (set-background-color "cornsilk"))
     (t (message "%s" "no match found"))
     )
    ))

(add-hook 'find-file-hook 'my-set-theme-on-mode)
#+END_SRC
You can modify the code to set themes instead of just background
 
for more info look here:

http://ergoemacs.org/emacs/emacs_set_theme_on_mode.html
**** change a face in a theme 
1.find out the specific face you want to change using list-faces-display
then in your theme change the relevant section. ₆In example₆ using the leuven based theme to change the helm selection use

#+BEGIN_SRC emacs-lisp :results none
`(helm-selection ((,class (:foregrounf "black" :background "#2AA198")))) 
#+END_SRC

$Note$- you can change font,color, weight etc..

also $Note$ that the above is relevant to leuven but other theme configs may be differently configed

**** launch Emacs from command line  with a specific theme 
#+BEGIN_SRC sh
emacs  --eval="(load-theme 'wombat)"  
#+END_SRC
*** menus
**** create custom menus
the best way is to use easy menu:

http://www.emacswiki.org/emacs/EasyMenu
and
http://emacs-fu.blogspot.co.il/2009/04/adding-custom-menus.html

Here is a basic example showing how to use EasyMenu. ‘my-menu’ is the symbol used to identify your menu, and ‘my-mode-map’ identifies the keymap for the mode where you want the menu to be visible.

%Tip- you can create specific menus that would appear in specific mode , ₆In Example₆ instead of global-map use org-mode-map% 

#+BEGIN_SRC emacs-lisp :results none
    (easy-menu-define my-menu my-mode-map "z1"
		      '("zmenu"
			["One entry" my-function t]
			("Sub Menu"
			 ["My subentry" my-obscure-function t])))
#+END_SRC
where
`my-menu` is the emacs identifier
`my-mode-map` is in which mode to have it appear (`global-map` for everywhere and `org-map-mode` for orgmode)
`z1` is the name of the menu
`zmenu` is the actual name you see
You can also add menus and menu items to the global menu bar. Here is an example that adds an entry to the Tools menu. Watch out, the name of the menu where you want to add the item (the PATH parameter) is case sensitive.

#+BEGIN_SRC lisp
    (require 'easymenu)
    (easy-menu-add-item nil '("tools") ["IRC" erc-select t])

#+END_SRC

One way to determine PATH is to use C-h k and click on a menu item close to where you want your entry to appear. The ‘Help’ buffer then says something like:

#+BEGIN_SRC lisp
<menu-bar> <tools> <games> <tetris> runs the command tetris
which is an interactive autoloaded Lisp function in `tetris'.
#+END_SRC

*** modline 
**** change the modeline to highlight the active bar
You can change the modeline to highlight the active bar using the following in your .emacs (change colors and style to suit your preferences of course).

#+BEGIN_EXAMPLE
(set-face-attribute  'mode-line
                 nil 
                 :foreground "gray80"
                 :background "gray25" 
                 :box '(:line-width 1 :style released-button))
(set-face-attribute  'mode-line-inactive
                 nil 
                 :foreground "gray30"
                 :background MY_BG_COLOR 
                 :box '(:line-width 1 :style released-button))
#+END_EXAMPLE

you can also add this to yout theme you use. Just open the file within your color-theme library named ₆In example₆ zenburn.el and search for the lines that have modline and replace with above text  
** movment
*** basic 
The following commands are useful for viewing screenfuls:
 C-vMove forward one screenful
 M-vMove backward one screenful
 C-lClear screen and redisplay all the text,
 moving the text around the cursor
 to the center of the screen.
 (That's CONTROL-L, not CONTROL-1.)
 C-fMove forward a character
 C-bMove backward a character
 M-fMove forward a word
 M-bMove backward a word
 C-nMove to next line
 C-pMove to previous line
 C-aMove to beginning of line
 C-eMove to end of line
 M-aMove back to beginning of sentence
 M-eMove forward to end of sentence
 
 
 move to popup buffer window > pgup
 quit popup window > q
*** jump to last posiiton						:Fav:

use ?C-x C-space? to jump to last position

%Tip% if using Evil one can use also ?C-o?

*** go to specific column
use 'M-g Tab' and then column number to switch to that column

** macros
**** basic macro recording
The key strokes can include calling emacs commands or commands that execute any emacs lisp functions.
To record keystrokes use:
***** to start recording a macro and 

?M-x start-kbd-macro?

If you made a mistake, you can cancel  ?Ctrl+g? (keyboard-quit) and start over.

***** to stop the macro

?M-x end-kbd-macro?

***** To run the keystrokes you've just recorded, call call-last-kbd-macro or
?C-x e?

***** to repeat the macro `X` times, you first press
?C-u? `X` and then ?C-x e? 

**** Saving Your Keyboard Macro for Future Use				:Fav:

If you want to use your keyboard macro for future use, you can save it. To save the macro: Call

?M-x name-last-kbd-macro?

and give it a name.

then issue

?M-x insert-kbd-macro?

look for the name you just gave and select it.This will insert the lisp code for the named macro at the cursor position.
₆In example₆ 


#+BEGIN_EXAMPLE
(fset 'z-wrap-line-bash
   [?V f4 ?b ?\M-x right])
#+END_EXAMPLE

Copy and Paste the code into your emacs init file.
In any future emacs session, you can call your kmacro by name just like any emacs command. Once you've saved your macro with a name, you can also give it a keyboard shortcut, such as F8.

**** edit a macro while its running
when your recored a macro press ~c-x q~ while its running to specify a stop in the macro
when you run that macro and it stops emacs will present a menu and you can enter 'recursive editing' to enter text 
** modes
*** Associate a File with a Major Mode
http://ergoemacs.org/emacs/emacs_auto-activate_a_major-mode.html

Associate by File Name Suffix

Use auto-mode-alist to associate a major mode with file name extension.

#+BEGIN_SRC emacs-lisp :results none
;; setup files ending in “.js” to open in js2-mode
(add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
#+END_SRC

auto-mode-alist is a built-in variable. Its value is a list of pairs. ((info "(elisp) Association Lists")) First element is a regex string. The second element is a mode name.

Note: in the elisp code above, the double backslash in the string \\.js\\' is used to escape the backslash. So, the regex engine just got \.js\'. The \. is to match a period. The \' is one of emacs special regex syntax, to match end of a string (not including end of a line that's not end of string. End of line is $). (See also: emacs regex tutorial.) (info "(elisp) Regexp Backslash")

You can see the value of auto-mode-alist by calling describe-variable.

*** define in .emacs

minor mode examples are blink-cursor-mode and column-number-mode
 As a rule, minor-modes can be enabled given positive argument or
disabled with a negative argument.
 Should the argument be omitted, the minor-mode will be toggled on/off.
 Here are some more examples of minor-modes. The following will disable
the scroll bars, menu-bar and tool-bar, respectively.
 (scroll-bar-mode -1)
 (menu-bar-mode -1)
 (tool-bar-mode -1)
*** cua mode
**** columnd edit mode
to start 

press ~C-Enter~

to add text to strat of section press Enter/home and start typing
to add text to end of section press Enter again/end  and start typing

to create a numbered list higlight the area, press ~esc n~ and then enter as needed 

** opening local/remote/root files

**** open as root

To prompt for the root password before opening /etc/hosts with root
permissions:
 C-x C-f /su::/etc/hosts
 In example:
 C-x C-f
 /su::
 (or /sudo::)
 enter password and then continue with PATH
 /etc/hosts

**** open a remote file

To connect to 'myhost' as 'myuser' via SSH and open the file
~/example.txt:

 C-x C-f /ssh:myuser@myhost:~/example.txt
** !packages/plugins!
*** load .el files manually
use the `load-file` option 

in detail:
if you downloaded a simple emacs package on the web named xyz.el: To use the package, all you have to do is to make emacs load the file.

use |M-x| load-file then give the file path.

Now, emacs is aware of the package. To activate, call the command in the package. For example, if the file name is 'xyz.el', then the command to activate it is typically xyz or xyz-mode.
*** El-get
**** install it
just add this in your config:
#+BEGIN_SRC emacs-lisp :results none
(add-to-list 'load-path "~/.emacs.d/el-get/el-get")

(unless (require 'el-get nil 'noerror)
  (with-current-buffer
      (url-retrieve-synchronously
       "https://raw.github.com/dimitri/el-get/master/el-get-install.el")
    (goto-char (point-max))
    (eval-print-last-sexp)))

(add-to-list 'el-get-recipe-path "~/.emacs.d/el-get-user/recipes")
(el-get 'sync)

#+END_SRC
That is technically all you need in order to get things up and running.

**** add non elpa packages from git

If I find a new package I want, whether its on github, elpa, or otherwise, I first check if the package info already exists in el-get's huge list of recipes, or I write it up myself. As an example, install an elpa package is as simple as:

#+BEGIN_SRC emacs-lisp
(:name rainbow-mode :type elpa)
#+END_SRC

How about a git repository? In that case it's just:

#+BEGIN_SRC emacs-lisp
(:name scala-mode :type git :url "http://github.com/scala/scala-dist.git")

;Or a shortened github version:

(:name scala-mode :type github :pkgname "scala/scala-dist.git")

#+END_SRC


#+BEGIN_SRC emacs-lisp :results none

#+END_SRC
*** Synchronize packages between different machines
**** using package-install

you can do it by adding calls to `package-install` in your emacs configuration itself.

#+BEGIN_EXAMPLE
(package-install 'auctex)
#+END_EXAMPLE

The idea is that package-install is idempotent, so if the package is already present, nothing will actually happen. Assuming you have such a call for every package you use (or at least the leaves in the dependency graph), that would effectively synchronize your packages across machines.

For multiple packages you can use the following:

#+BEGIN_EXAMPLE
(setq my-package-list '(package1 package2 packageN))
(mapc 'package-install my-package-list)
#+END_EXAMPLE

*** general
**** Emacs 24 Package System



Emacs package system lets you auto-update and manage emacs packages. It
lets you easily see packages available, update to latest version,
install/remove packages. So you don't have to manually track what's
installed, each package's home page, whether there's new version, etc.
It is bundled with emacs 24.
([[http://ergoemacs.org/emacs/emacs24_features.html][New Features in
Emacs 24]])

 Listing Available Packages

Call
 package-list-packages.
 It'll list available packages, like this:

 [[macsen_files/emacs_packages_elpa_screenshot.png]]
 Install Packages

This list is shown in package-menu-mode. In this mode, here's the most
useful keys:

-  Enter Describe the package under cursor. (describe-package)
-  i mark for installation. (package-menu-mark-install)
-  u unmark. (package-menu-mark-unmark)
-  d mark for deletion (removal of a installed package).
   (package-menu-mark-delete)
-  x for "execute" (start install/uninstall of marked items).
   (package-menu-execute)
-  r refresh the list from server. (package-menu-refresh)

(For complete list of keys, call describe-mode Ctrl+hm)

So, for example, i want to install the clojure-mode. I type i to mark
it, x to run install. Then, i got the following files in my dir, all
automatically byte-compiled and loaded.

 ~/.emacs.d/elpa/clojure-mode-1.7.1:
 clojure-mode-autoloads.el
 clojure-mode-pkg.el
 clojure-mode-pkg.elc
 clojure-mode.el
 clojure-mode.elc

and now i can call clojure-mode, and it works right there! (no need to
restart, but for some packages, you may need to turn it on.)

 Installed Packages Location

New packages are installed at ~/.emacs.d/elpa/.

 Packages Repositories

The source of the packages are from package servers. There are several.

-  [[http://elpa.gnu.org/][http://elpa.gnu.org/]] Default. Official GNU
   Emacs package repository. This repository contains the minimal set,
   and are FSF signed.
-  [[http://tromey.com/elpa/][http://tromey.com/elpa/]] ELPA (being
   phased out as of 2012-07-03).
-  [[http://marmalade-repo.org/][http://marmalade-repo.org/]] Marmalade.
   More extensive number of packages. But has some maintenance problems.
-  [[http://melpa.milkbox.net/][http://melpa.milkbox.net/]] MELPA. As of
   2012-10-18, MELPA has most packages, and updated daily.

To add it, put the following in your emacs init file:

 (when (>= emacs-major-version 24) (require 'package)
(package-initialize) (add-to-list 'package-archives'("melpa" .
"http://melpa.milkbox.net/packages/") t) )

Note: the emacs package system, called ELPA (aka package.el), is started
and written by
[[https://plus.google.com/118038589019918324505/posts][Tom Tromey]].
Marmalade is written by
[[https://plus.google.com/116776358422263344346/posts][Nathan
Weizenbaum]]. MELPA is written by [[http://milkbox.net/][Donald Ephraim
Curtis]] (aka milkypostman) Thank you guys.

 Helpful Commands and Variables

New variable "package-enable-at-startup". By default, this is t (true).

New variable "package-load-list". This determines which packages should
be loaded at start-up.

Call describe-function or describe-variable for details.

**** update ELPA packages						:Fav:
every time you do a elpa install (list packages) it checks for undated plugins
you can manually update with 'U'  followed by 'x' to update all
**** Automatically Loading Files from within emacs

If you want emacs to load the file when it starts, put the file in the dir ~/.emacs.d/, then put the following in your emacs init file:
#+BEGIN_SRC emacs-lisp
;; Tell emacs where is your personal elisp lib dir
;; this is default dir for extra packages
(add-to-list 'load-path "~/.emacs.d/")

;; load the packaged named xyz.
(load "xyz") ;; best not to include the ending .el or .elc

#+END_SRC

Auto-Activation of Mode When Opening File
This is usually setup by the package, but not always. Here's the basics:
 ;; setup files ending in ".js" to open in js2-mode
 (add-to-list 'auto-mode-alist'("\\.js\\'" . js2-mode))c
**** How to save a list of all the installed packages in Emacs 24
if you do ~C-h v~ 
`package-activated-list`

you can copy the output there with all non built in packages installed

#+BEGIN_EXAMPLE
package-activated-list is a variable defined in `package.el'.
Its value is
(el-get hydra cl-lib hydra cl-lib el-get ace-isearch helm-swoop helm async ace-jump-mode ace-window ace-jump-mode auctex auto-complete popup back-button pcache persistent-soft list-utils pcache list-utils ucs-utils list-utils pcache persistent-soft list-utils pcache smartrep nav-flash bbdb bbyac browse-kill-ring bookmark+ browse-kill-ring company dired+ dired-details+ dired-details dired-details dired-rainbow dired-hacks-utils dash dash dired-sort easy-kill ebib parsebib dash edit-server-htmlize edit-server evil goto-chg undo-tree evil-nerd-commenter expand-region flx-ido flx god-mode google-contacts oauth2 goto-chg guide-key s popwin dash helm-bibtex f dash s dash s parsebib helm async helm-chrome helm async helm-cmd-t helm-swoop helm async hydra key-chord lentic f dash s dash m-buffer dash m-buffer dash magit git-rebase-mode git-commit-mode manage-minor-mode nav-flash oauth2 openwith parsebib popup popwin rainbow-mode rich-minority s smartrep smex switch-window ucs-utils list-utils pcache persistent-soft list-utils pcache undo-tree xmlgen yasnippet zenburn)
#+END_EXAMPLE

**** disable elpa check on startup
add this to config
#+BEGIN_SRC emacs-lisp :results none
;; package init not needed, since it is done anyway in emacs 24 after reading the init
;; but we have to load the list of available packages

(setq package-enable-at-startup nil)
#+END_SRC 
*** plugins
**** Use package
https://github.com/jwiegley/use-package

***** simplest use-package declaration
The idea of use-package is to wrap all initialisation and configuration of a package in a top-level form. 
#+BEGIN_EXAMPLE
(use-package foo)
#+END_EXAMPLE

This loads in the package foo, but only if foo is available on your system. If not, a warning is logged to your *Messages* buffer. If it succeeds a message about "Loading foo" is logged, along with the time it took to load, if that time is over 0.01s.


#+DOWNLOADED: /tmp/screenshot.png @ 2015-02-06 08:31:20
#+attr_html: :width 300px
 [[/home/zeltak/org/attach/images_2015/screenshot_2015-02-06_08:31:20.png]]

A typical use in my configuration looks like this:

#+BEGIN_SRC emacs-lisp :results none
(use-package whitespace
  :bind (("C-c T w" . whitespace-mode))
  :init
  (dolist (hook '(prog-mode-hook text-mode-hook conf-mode-hook))
    (add-hook hook #'whitespace-mode))
  :config (setq whitespace-line-column nil)
  :diminish whitespace-mode)
#+END_SRC

This form binds Whitespace Mode to C-c T w globally, enables it automatically for certain modes, and configures it. :bind and :init are evaluated immediately, whereas :config is deferred until after the package is loaded, similar to with-eval-after-load1. :diminish is just a shortcut for the diminish utility which removes minor modes from the mode line.
***** init 

Use the `:init` keyword to do some stuff to initialize foo. If loading was deferred, the code is run immediately; otherwise the package is required before running the code. See below for options that defer loading of the package.

#+BEGIN_SRC emacs-lisp :results none
(use-package foo
  :init
  (progn
    (setq foo-variable t)
    (foo-mode 1)))
#+END_SRC

***** Config - describe the setting of library
`:Config` keyword describes settings, etc. after you have loaded the library.

A companion to the :init keyword is :config. Although :init always happens in the case of deferred modules (which are likely to be the most common kind), :config form only run after the module has been loaded by Emacs:

#+BEGIN_SRC emacs-lisp :results none
(use-package ace-jump-mode
  :bind ("C-." . ace-jump-mode)
  :config
  (message "Yay, ace-jump-mode was actually loaded!"))

#+END_SRC

***** both config and init 
You can have both :init and :config:

#+BEGIN_SRC emacs-lisp :results none
(use-package haskell-mode
  :commands haskell-mode
  :init
  (add-to-list 'auto-mode-alist '("\\.l?hs$" . haskell-mode))
  :config
  (progn
    (use-package inf-haskell)
    (use-package hs-lint)))
#+END_SRC

In this case, I want to autoload the command haskell-mode from "haskell-mode.el", add it to auto-mode-alist at the time ".emacs" is loaded, but wait until after I've opened a Haskell file before loading "inf-haskell.el" and "hs-lint.el".


***** TODO bind
TODO-play with binds and describe-perosnal...see %Tip% below 
A very common thing to do when loading a module is to bind a key to primary commands within that module:

#+BEGIN_SRC emacs-lisp :results none
(use-package ace-jump-mode
  :bind ("C-." . ace-jump-mode))
#+END_SRC

%Tip-after you do that you can run a command describe-personal-keybindings% to get all your binds  

%Tip- bind* will make the bind override all modes % 

This does two things: first, it creates autoload for the ace-jump-mode command, and defers loading of ace-jump-mode until you actually use it. Second, it binds the key C-. to that command. After loading, you can use M-x describe-personal-keybindings to see all such bindings you've set throughout your Emacs.

A more literal way to do the exact same thing is:

#+BEGIN_SRC emacs-lisp :results none
(use-package ace-jump-mode
  :commands ace-jump-mode
  :init
  (bind-key "C-." 'ace-jump-mode))
#+END_SRC
***** disabled 
The :disabled keyword can be used to turn off a module that you're having difficulties with, or to stop loading something you're not really using at the present time:

#+BEGIN_SRC emacs-lisp :results none
(use-package ess-site
  :disabled t
  :commands R)
#+END_SRC
***** load path 
If your package needs a directory added to the load-path in order to load, use :load-path. It takes a string or a list of strings. If the path is relative, it will be expanded within user-emacs-directory:

#+BEGIN_SRC emacs-lisp :results none
(use-package ess-site
  :disabled t
  :load-path "site-lisp/ess/lisp/"
  :commands R)
#+END_SRC

***** diminish 
use-package also provides built-in support for the diminish utility, if you have that installed. It's purpose is to remove strings from your mode-line that would otherwise always be there and provide no useful information. It is invoked with the :diminish keyword, which is passed either the minor mode symbol, a cons of the symbol and a replacement string, or just a replacement string in which case the minor mode symbol is guessed to be the package name with "-mode" at the end:

#+BEGIN_SRC emacs-lisp :results none
(use-package abbrev
  :diminish abbrev-mode
  :init
  (if (file-exists-p abbrev-file-name)
      (quietly-read-abbrev-file))

  :config
  (add-hook 'expand-load-hook
            (lambda ()
              (add-hook 'expand-expand-hook 'indent-according-to-mode)
              (add-hook 'expand-jump-hook 'indent-according-to-mode))))
#+END_SRC
***** ensure (intsall from melpa if missing)
You can use use-package to load packages from ELPA with package.el. This is particularly useful if you share your .emacs between several machines; the relevant packages will download automatically once placed in your .emacs. The :ensure key will install the package automatically if it is not already present:

#+BEGIN_SRC emacs-lisp :results none
(use-package magit
  :ensure t)
#+END_SRC

If you need to install a different package from the one named by use-package, you can specify it like this:

#+BEGIN_SRC emacs-lisp :results none
(use-package tex-site
  :ensure auctex)
#+END_SRC
***** “Local” packages
While I try to use packages as much as possible, and also release most of my custom code as packages to melpa, I still have some code in my configuration that is too small or too specific to my own workflow and my personal preferences to be released independently.
use-package makes it easy to maintain this code. I can keep it in separate libraries, pretending that they are proper packages installed with the package manager, and use use-package as usual to load my custom code. For example, I have a lunaryorn-simple library which contains many small helper functions for editing. It sits in the lisp/ subdirectory of my Emacs directory and is never installed with the package manager, but use-package lets me configure as if it were:

#+BEGIN_SRC emacs-lisp :results none
(use-package lunaryorn-simple
  :load-path "lisp/"
  :bind (([remap kill-whole-line]        . lunaryorn-smart-kill-whole-line)
         ([remap move-beginning-of-line] . lunaryorn-back-to-indentation-or-beginning-of-line)
         …
         ("C-c u d"                      . lunaryorn-insert-current-date)))
#+END_SRC

The only special thing is :load-path, which adds the containing directory to Emacs’ load-path so that it can find my personal library. But I don’t need to care for autoloads and lazy loading: use-package automatically adds autoloads for all commands bound to keys in :bind. My library is loaded lazily when I invoke any of these commands, just like a regular package installed via the package manager.
With this feature I can keep my init file (almost) free of any code. It only contains package configuration now. My custom code is neatly tucked away in separate libraries that look just like regular Emacs packages. This does not only make my configuration easier to understand, it has also fundamentally changed my package development workflow.
Most of my packages are born out of small customisation and personal functions that grow as I extend them, until they are large and stable enough to be released as separate packages. Previously, making a package out of these was painful: I had to manually extract all the required code form my init file and fix various compiler warnings and errors, naturally making many mistakes on the way.
Now I start with a separate library right away, which is a proper package on its own. All code goes through flycheck to make sure that there are no errors or warnings. Once the package is suitable for an independent release, there’s no special work left: It’s all already there, and all that I still need to do is to move the file to a dedicated repository, add a README, and push it to MELPA. I think you can expect quite some new packages from me over the next time!

***** If - conditional branch
: If keyword describes the conditions under which to load the library. Condition is nil if that is evaluated with use-package macro does not do anything.

A typical use case is when you switch you can either load the library by the OS that Emacs is running. For example cygwin-mount.el is a library that allows you to interpret the Cygwin path in the Windows of Emacs. If this operation OS is Windows to load only is written as follows.

#+BEGIN_SRC emacs-lisp :results none
( use-package  Cygwin-Mount 
  : if  ( eq  System-type  'windows-NT ) 
  : config 
  setting of ;; Cygwin-Mount 
  )
#+END_SRC

***** idle 
Idle initialisation

use-package also helps me to keep my Emacs startup fast with “idle initialisation”, which initialises packages after Emacs was started and has been idle for some time. I use this feature mainly for global modes that are slow to load and enable.
company for instance is a powerful completion package, but it also large and takes time to load and enable. On the other hand, completion is not so important for me that I need it immediately, so I delay its initialisation:
(use-package company
  :ensure t
  :defer t
  :idle (global-company-mode))
With this configuration global-company-mode is delayed until Emacs has been idle. As a result, Emacs starts faster: Packages of less importance do not contribute to startup time anymore. They are initialised later, when Emacs doesn’t have to do anything else anyway.

**** Elpa
***** to uprade all packages
issue this:
M-x package-list-packages <RET> U x y <RET>
**** Company
***** intro

Once installed, enable company-mode with M-x company-mode

To use company-mode in all buffers, add the following line to your init file:

#+BEGIN_SRC sh
(add-hook 'after-init-hook 'global-company-mode)
#+END_SRC


Completion will start automatically after you type a few letters.

Use M-n, M-p, <tab> and <return> to complete.

Search through the completions with:

C-s, C-r and C-o.

Type M-x company-complete to initiate completion manually. Bind this command to a key combination of your choice.

When the completion candidates are shown, press <f1> to display the documentation for the selected candidate, or C-w to see its source. Not all back-ends support this.

For more information, type M-x describe-function RET company-mode.

To customize other aspects of its behavior, type M-x customize-group RET company.
	
***** add/remove backnends
To see or change the list of enabled back-ends, type M-x customize-variable RET company-backends. Also see its description for information on writing a back-end.
For information on specific back-ends, also check out the comments inside the respective files.

**** stripe-buffer mode
Use different background colors for even and odd lines. With the help of library hl-line-mode yet another color can be used for the current line.

add this to your .emacs:

#+BEGIN_SRC emacs-lisp
;;stripe-buffer

(require 'stripe-buffer)
(add-hook 'dired-mode-hook 'turn-on-stripe-buffer-mode)
;get a horizontal line instead of a cursor. It uses the stripe-hl-line face, which you might wish to customize.
(add-hook 'dired-mode-hook 'stripe-listify-buffer)
;add to org mode tables
(add-hook 'org-mode-hook 'turn-on-stripe-table-mode)
#+END_SRC iDO mode
***** jump to dired from ido
use C-j to jump into dired mode when within ido
**** Projectile
https://github.com/bbatsov/projectile
If you ever forget any of Projectile's keybindings just do a:

C-c p C-h
***** ignore file
If youd like to instruct Projectile to ignore certain files in a project, when indexing it you can do so in the .projectile file by adding each path to ignore, where the paths all are relative to the root directory and start with a slash. Everything ignored should be preceded with a - sign. Alternatively, not having any prefix at all also means to ignore the directory or file pattern that follows. Here's an example for a typical Rails application:

#+BEGIN_EXAMPLE
-/log
-/tmp
-/vendor
-/public/uploads
#+END_EXAMPLE

This would ignore the folders only at the root of the project. Projectile also supports relative pathname ignores:
#+BEGIN_EXAMPLE
-tmp
-*.rb
-*.yml
-models
#+END_EXAMPLE

You can also ignore everything except certain subdirectories. This is useful when selecting the directories to keep is easier than selecting the directories to ignore, although you can do both. To select directories to keep, that means everything else will be ignored.

Example:

#+BEGIN_EXAMPLE
+/src/foo
+/tests/foo
#+END_EXAMPLE
Keep in mind that you can only include subdirectories, not file patterns.
If both directories to keep and ignore are specified, the directories to keep first apply, restricting what fi
***** helm integration
Projectile can be integrated with Helm via helm-c-source-projectile source (available in helm-projectile.el). There is also an example function for calling Helm with the Projectile file source. You can call it like this:

M-x helm-projectile

or even better - bind it to a keybinding like this:

(global-set-key (kbd "C-c h") 'helm-projectile)
**** workgroups
create and save a winodws state (not buffers/session)
-first issue wg-create-workgroup, give it a name (not sure why this step is needed)
-then when you have you buffers etc setup issue wg-save

**** minimap

***** define a function to toggle on/off and bindkey

use this function (stick it in your config file)
 (defun minimap-toggle ()
 "Toggle minimap for current buffer."
 (interactive)
 (if (not (boundp 'minimap-bufname))
 (setf minimap-bufname nil))
 (if (null minimap-bufname)
 (progn (minimap-create)
 (set-frame-width (selected-frame) 100))
 (progn (minimap-kill)
 (set-frame-width (selected-frame) 80))))
 
 I have this set to <f7>:
 (global-set-key (kbd "<f7>") 'minimap-toggle)

**** TODO yasnippet
***** install and configure Yasnippet
****** melpa install 
The best way to install is through the emacs package manager, if not you need to initialize yas/root-directory. 
#+BEGIN_SRC emacs-lisp
(require 'yasnippet)
(setq yas-snippet-dirs
      '("~/.emacs.d/snippets/"            ;; personal snippets
	"~/.emacs.d/elpa/yasnippet-20130218.2229/snippets"
        ))
(yas-global-mode 1)
#+END_SRC
!note!-the yas-snippet-dirs option is used to specify where the directories are located.
****** where do snippets appear and when (yas modes)
this is set by the name of the folder (in your custom snippet folder defined in the `yas-snippet-dirs`
₆In example₆ to get snippets to appear in ess-mode (r and sas snippets) you would create a folder named:

file:~/.emacs.d/snippets/ess-mode/

and put all you .snippets there

you can use folder names like org-mode, python-mode etc etc.

%Tip- you can get other modes snippets in you current mode by using the following tips:%

1. use a `text-mode` folder and this will make sure it will appear in many modes

2. issue the command `yas-activate-extra-mode` which can activate arbitrary "yas-only" modes corresponding to the names of snippet subdirectories, and not necessarily actual major-mode names
₆In example₆ if I am in org-mode and issue `yas-activate-extra-mode` >> ess-mode. I will get my ess snippets in org-mode 

3. use a folder named `fundamental-mode` and add this snippet to you config

https://github.com/capitaomorte/yasnippet/issues/557

#+BEGIN_SRC emacs-lisp :results none
(add-hook 'yas-minor-mode-hook
          (lambda ()
            (yas-activate-extra-mode 'fundamental-mode)))
#+END_SRC

this will load all `fundamental-mode` snippet 

4. The .yas-parents file

It's very useful to have certain modes share snippets between themselves. To do this, choose a mode subdirectory and place a `.yas-parents` file  containing a whitespace-separated list of other mode names.
When you reload those modes become parents of the original mode.

#+BEGIN_EXAMPLE

|-- c-mode
|   |-- .yas-parents    # contains "cc-mode text-mode"
|   `-- printf
|-- cc-mode
|   |-- for
|   `-- while
|-- java-mode
|   |-- .yas-parents    # contains "cc-mode text-mode"
|   `-- println
`-- text-mode
    |-- email
    `-- time
#+END_EXAMPLE


***** Quickly finding snippets

There are some ways you can quickly find a snippet file:

#+BEGIN_SRC emacs-lisp :results none
M-x yas-new-snippet
#+END_SRC
Prompts you for a snippet name, then tries to guess a suitable directory to store it, prompting you for creation if it does not exist. Finally, places you in a new buffer set to snippet-mode so you can write your snippet.

#+BEGIN_SRC emacs-lisp :results none
M-x yas-visit-snippet-file
#+END_SRC

Prompts you for possible snippet expansions like yas-insert-snippet, but instead of expanding it, takes you directly to the snippet definition's file, if it exists.

***** Define custom Templates

make sure the in you yas config ([[install%20and%20configure%20Yasnippet][config]])  the local location for the user snippets are correct (inlcuding top folder)
then create files like these there

#+BEGIN_SRC emacs-lisp
# -- mode: snippet --
# name:cb_bsh
# key: cbb
# --

test$1
test$2
etc
#+END_SRC

The `name` of the snippet, function is more like a comment than anything else.
On the other hand, `key` is very important: it's what I have to insert in the buffer to get the expansion with M-x yas-expand.
Everything after # -- is the snippet body.
This particular snippet has two fields, in places of $1 and $2.
$0 is where the point will be when the snippet expansion is finished
As I expand, pressing TAB will move from field to field until the expansion is finished.

***** Expand Whole hyphenated-word as Input

in YASNippet, you can define your own templates. For example:
 bsnp
 
 (buffer-substring-no-properties START END)
 But sometimes your word contains a hyphen, but upon expansion, it uses
only part of the word as input. For example, you want:
 buffer-substring
 
 (buffer-substring START END)
 But you get:
 buffer-substring
 
 buffer-(substring STRING FROM &optional TO)
 How to fix this?
 Put the following in your init file:
 ;; 2011-07-29 yasnippet. Make the "yas/minor-mode"'s expansion behavior
to take input word including hyphen.
 (setq yas/key-syntaxes '("w " "w ." "\^")) ; default is'("w" "w "
"w ." "\^") as of 2011-07-29
***** escape special characters
Arbitrary text can be included as the content of a template. They are usually interpreted as plain text, except

#+BEGIN_EXAMPLE
$ and ==. 

You need to use \` to escape them: \$ and \.  
#+END_EXAMPLE
The \` itself may also needed to be escaped as \\ sometimes.
***** Tab stop fields
for more info look here:
http://capitaomorte.github.io/yasnippet/snippet-development.html

Tab stops are fields that you can navigate back and forth by TAB and S-TAB. They are written by `$` followed with a number.
`$0` has the special meaning of the exit point of a snippet. That is the last place to go when youve traveled all the fields.
Here is a typical example:

#+BEGIN_SRC emacs-lisp :results none
<div$1>
    $0
</div>
#+END_SRC

***** using yasnippets with R

since R uses $ in syntax, You need to use backslash to escape the $:
₆In example₆ 

#+BEGIN_SRC R
$1\$$2
#+END_SRC

or

#+BEGIN_SRC sh
${1:DATA}\$${2:VAR}
#+END_SRC

**** evil
**** undotree
***** save undo history and persist between session
make sure you have latest emacs/undotree plugin and then add this to your rc

#+BEGIN_SRC emacs-lisp :results none
;automatically save and restore undo-tree history along with buffer (disabled by default)
(global-undo-tree-mode 1)

(setq undo-tree-auto-save-history t)
(setq undo-tree-history-directory-alist
      `(("." . ,(concat user-emacs-directory "undo"))))
#+END_SRC

**** bm.el

BM.EL
 bm.el provides a visible, buffer local bookmark, and the ability to
jump forward and backward between the bookmarks. The author's reason for
creating this package was:
 I missed the bookmarks from M$ Visual Studio in GNU Emacs. I think they
provide an easy way to navigate in a buffer.
 This package supports persistent bookmarks (both across buffer kills
and emacs sessions), annotations, and viewing a list of bookmarks for
the current buffer. A snippet from my .emacs file is below. My settings
are based on the description provided within the package.
 (setq bm-restore-repository-on-load t)
 (require 'bm)
 (global-set-key (kbd "<M-f2>") 'bm-toggle)
 (global-set-key (kbd "<f2>") 'bm-next)
 (global-set-key (kbd "<S-f2>") 'bm-previous)
 
 ;; make bookmarks persistent as default
 (setq-default bm-buffer-persistence t)
 
 ;; Loading the repository from file when on start up.
 (add-hook' after-init-hook 'bm-repository-load)
 
 ;; Restoring bookmarks when on file find.
 (add-hook 'find-file-hooks 'bm-buffer-restore)
 
 ;; Saving bookmark data on killing a buffer
 (add-hook 'kill-buffer-hook 'bm-buffer-save)
 
 ;; Saving the repository to file when on exit.
 ;; kill-buffer-hook is not called when emacs is killed, so we
 ;; must save all bookmarks first.
 (add-hook 'kill-emacs-hook'(lambda nil
 (bm-buffer-save-all)
 (bm-repository-save)))
 You can customise the colours by using M-x customize-group bm and
changeing the defaults.
 One other function that should be useful is M-x bm-show and M-x
bm-show-all; both show all the bookmarks set in the current buffer and
in all buffers respectively. If you read the commentary of the elisp
package, you'd see options to make the bookmarks persistent, annotate
them, controlling the size of the bookmarks file etc.

**** auto Complete
***** add dictnionary per mode/file type

You can use other dictionaries for every major-modes and extensions. A dictionary will be loaded from a directory specified with ac-dictionary-directories which is !where the dict folder of AC is installed!, IE

#+BEGIN_SRC emacs-lisp
(add-to-list 'ac-dictionary-directories "/home/zeltak/.emacs.d/elpa/auto-complete-20130330.1836/dict")
#+END_SRC

A dictionary named 'org-mode' for specific major-mode and a dictionary named 'txt' for specific extension will be stored in the directory.

For instance, you complete in a buffer named ~a.cpp~ with dictionary completion, following the setting above

~/.emacs.d/ac-dict/c++-mode

and

~/.emacs.d/ac-dict/cpp will be loaded as dictionary file.

You can edit the dictionary files and make a new one. In addition, you can add a new dictionary file to a directory that has same configuration.

As same as user defined dictionary, after editing and adding dictionary, you should do M-x ac-clear-dictionary-cache to apply changes.
***** add dictnionary for all modes
you can add words into a config file to appear in all buffer/files in the autocomplete suggestions with code like this in your .emacs file
#+BEGIN_SRC emacs-lisp
(setq ac-user-dictionary '(
"ITEM1"
"ITEM2"
))
#+END_SRC

where each word is in a seperate line within ""
**** ido
***** TIPS
to avoid deleting folders from the path one by one you can use C-e to edit the path ido-find-file is currently in.
***** use ido for own completions
you can use ido-completing-read for your own cmds. It's bundled with emacs 24 at least:

`(ido-completing-read "Replace this:" youList )`

In example 

#+BEGIN_SRC emacs-lisp
(defun z-open-file-fast (openCode)
  "Prompt to open a file from a pre-defined set."
  (interactive
   (list (ido-completing-read "Open:" (mapcar (lambda (x) (car x)) xah-filelist)))
   )
  (find-file (cdr (assoc openCode xah-filelist)) ) )

(global-set-key (kbd "M-[") 'z-open-file-fast)

#+END_SRC

**** multiple-cursors
When you have an active region that spans multiple lines, the following will add a cursor to each line:

(global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)

When you want to add multiple cursors not based on continuous lines, but based on keywords in the buffer, use:

(global-set-key (kbd "C->") 'mc/mark-next-like-this)
(global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
(global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this) 

**** Bookmark+
***** bookmark to a specifc position in a file
stand in the line/position in the file you want to bookmark and then issue 
?C-x p m? and enter the name desired 
***** important keys
mark file  ?m?
rename  ?r? (will prompt for name followd by location, press ENTER to ignore changed location)
sort by name ?s-n?
***** create a sequence bookmark (multiple bookmarks launched from 1)
mark current bookmarks in bk+ with 'm' then use the menu item 'new sequence bookmark from marked' to create a special bookmark that launches all marked bookmakred in succsion. give it a name and your finished
***** higlighting
to higlight a bookmark first bookmark the position you want (C-x pm)
then issue ( C-x p h ) to bring the higlight menu
 
***** bookmark a Region
You can bookmark a region of text, not just a position.When you jump to a bookmark that records a region, the region is
activated. to do this select a region and them add the bookmark as ususal.
***** bookmark multiple files at once (using dired)
start a dired+ session
mark the files you want with 'm'
add then as bookmarks with M-b
***** tags
****** ask for tag each time you save a bookmark
add this to your config
#+BEGIN_SRC emacs-lisp :results none
;ask for tags when saving a bookmark
(setq bmkp-prompt-for-tags-flag t)
#+END_SRC
****** tagging in list view
see the hotkeys in config for personal tagging keys
$Note-when tagging one needs to enter tag> ENTER then ENTER again with an empty prompt to save the tag$ 
****** use tags to execute a lisp code (for example narrow region when launched)
Tags that have the prefix "bmkp-" are reserved – do not name your own tags using this prefix. Currently, "bmkp-jump" is the only predefined bookmark tag. You can give this tag a value that is a function – it is called whenever the tagged bookmark is visited. Any Lisp-readable function value is allowed: a symbol or a lambda expression.

For example, to display Hello! when a bookmark is visited you can use this:

issue ~T v~
enter bmkp-jump
press  RET
enter code
₆In example₆  (lambda () (message "Hello!"))
this is an example code for narrow region
#+BEGIN_SRC emacs-lisp :results none
(lambda () (org-narrow-to-subtree))
#+END_SRC
The function that is the value of a "bmkp-jump" tag is called just after the the standard hook ‘bookmark-after-jump-hook’ is invoked. You can use this tag to invoke functions that are specific to individual bookmarks; bookmarks can thus have their own, extra jump functions.
**** Hippie
***** add own expansion
If hippie-expand fails to find any satisfactory expansion, you may want to add a new one by using function `inverse-add-global-abbrev. The following should probably be the last function in `hippie-expand-try-functions-list:
#+BEGIN_SRC sh

    (defun my-try-add-expansion (old)
      "Add a new global abbrev"
      (he-init-string (he-dabbrev-beg) (point))
      (or (inverse-add-global-abbrev 1)
	  (he-reset-string)))

#+END_SRC
**** Auctex
***** make auctex load on startup when installed through elmpa
Instead of loading nonexistent auctex.el do
#+BEGIN_SRC emacs-lisp :results none
(require 'tex)
#+END_SRC
**** Helm
***** intro 
****** $start here$ 
!IMPORTANT! Please remember that, when you use Helm, @you never TAB to complete prefixes@
like vanilla or other packages like Ido and its related packages. In Helm, when you type something, candidates get updated automatically. In vanilla Emacs, you have to TAB to get a list of candidate. This is a great feature from Helm, not a miss of feature. You have to forget the mentally of TABBING to get candidates. If you want quick completion of search patterns in Helm prompt, you always have hippie-expand to replace the TAB behaviour,

When you execute a Helm command, you enter a Helm session. A Helm session is a dedicated state to working with Helm features; while in a Helm session, a dedicated Helm buffer is always opened. When you quit a Helm session, a Helm buffer is closed. In Helm, you basically need to remember the 3 commands:

Access to action menu with TAB. An action is a command to run on marked candidates (one or more) and quit current Helm session; an action menu is a text-based menu that lists actions you can take. For example, Find File (open file), Find File in Dired, Grep File…
C-z executes helm-execute-persistent-action; a persistent action is an action that you use in a Helm session without quitting the session.
In some Helm session, such as helm-find-files or helm-mini, you can select more than one candidates and execute actions on them, such as grep or open.

****** base completion
Completion with Helm is very different with the usual Emacs completion:
You type something:

Instead of TAB to expand the common part until you find your candidates, in Helm, you type a parts of the candidate you want to search, separated by spaces. In Helm, these strings are called patterns. Patterns can also be regexps.
Helm will try to search and sort according to highest match, from top to bottom. The best match is at the top, so you can press RET and select it.
You can navigate the buffer with C-n and C-p or <up> and <down> to move up/down, C-v and M-v to move to next/previous pages, and M-< and M-> to move to top and bottom of the Helm buffer.
You can mark candidates with C-SPC; this is useful when you need to perform an action on many candidates of your choice. M-a to select all.
You can insert marked candidates into current buffer with C-c C-i. This is useful when you narrow to a list of candidates, i.e. files, then you want to save such candidates.
If you find the current horizontal Helm window is small, you can always switch it to vertical window with C-t. Running C-t again returns the Helm window back to horizontal and so on.
	   
****** base keys 	   
~TAB~ shows menu of launch options
select up/donn etc with common ~up/down/enter~ 
~C-z~ same as tab for select action (but this is persistant, that is helm wont close)
~C-SPACE~ mark canidadtes 
~Alt-a~ mark all
You can insert marked candidates into current buffer with ~C-c C-I~
~C-t~ cycle through helm view modes
~C-C ?~ get help on helm  	    
~left/righ~ move between helm groups in helm view 
***** find in files (C-x f)
use:
`helm-for-files`
***** helm org integration
****** searh only org headers (top level) with helm
use:

'Helm-org-headline'
***** helm colors
used to see colors and faces currently in system, use:

#+BEGIN_EXAMPLE
helm-colors
#+END_EXAMPLE

Key binding: n <prefix> c (prefix is C-x c by default, or C-c h if set).

If you want to quickly view and copy hexadecimal values of colors, helm-color provides such features. But, helm-color is beyond a mere color picker. The real usage for helm-color is for face customization: the command list ALL available faces, with a preview of each face in the same row. This makes theme customization really quick because you can quickly view a face with its color. Because the way Helm work, you can look at a group of faces together to have a global view if the colors work well with each other.

helm-color contains two groups, with actions in each:

Colors:
Key	Action
[f1] or C-c N	Copy Name
 	Copy color name into kill-ring
[f2] or C-c R	Copy RGB
 	Copy hex value into kill-ring
[f3] or C-c n	Insert Name
 	Insert color name into current buffer
[f4] or C-c r	Insert RGB
 	Insert hex value into current buffer

Customize Face:
Key	Action
[f1]	Customize
 	Open Customization window
[f2]	Copy Name
 	Copy face name

***** searching/mathcing
****** search with 2 search terms    
helm has out of order matching, with regular expression. That's right, you can enter every search pattern as regexp!
First, I enter main.c, and I got lots of candidates. Then, I only want the main.c inside x86 directory, so I type x86. The whole pattern is:
#+BEGIN_EXAMPLE
main.c x86 
#+END_EXAMPLE
and Helm returns the correct candidate: arch/x86/boot/main.c.
***** helm mini
****** helm-mini comprises of multiple sources:

`Current opened` buffers, under the header Buffers.
`Recently opened` files, under the header Recentf.
`create a new buffer` by pressing RET, under the header Create Buffer.

You can move back and forth between the groups by using ~<left> // <right>~ arrow keys. Or you can just scroll down/up with C-v and M-v.

****** filter out buffers by major mode using the pattern *<major-mode>.
For example,

#+BEGIN_EXAMPLE
*dired
#+END_EXAMPLE

****** narrows to only Dired buffers.

You can also `filter out` buffers that belong to a major mode by adding `!` to the pattern. For example,
#+BEGIN_EXAMPLE
*!dired
#+END_EXAMPLE
select all buffers that are not in Dired mode.

****** You can also select buffers in a specific directory by using the pattern `/directory`.
For example,
#+BEGIN_EXAMPLE
/.emacs.d/
#+END_EXAMPLE

narrows to buffers that are only inside .emacs.d. Add ! before the pattern for reverse version. For example, !/.emacs.d/ narrows to buffers not in .emacs.d.

****** narrow to buffers that contains a regexp in their contents
by appending `@` before the search pattern. For example, you can select buffers that only contain the string "test":

#+BEGIN_EXAMPLE
@test
#+END_EXAMPLE

****** meaning of colors and prefixes for buffers:
Remote buffers are prefixed with '@'.
Red => Buffer have its file modified on disk by an external process.
Indianred2 => Buffer exists but its file have been deleted.
Orange => Buffer is modified and its file not saved to disk.
Italic => A non-file buffer.
$Note$-Some Emacs themes change the colors. You should check the corresponding colour in your color themes.

****** Example mini helm narrow searches

If I enter in pattern prompt: *lisp ^helm @moc, Helm will narrow down the list by selecting only buffers that are in lisp mode, start by helm and match "moc" in their contents.
If I want to specify more than one major-mode, separate them with ,, e.g *!lisp,!sh,!fun will list all buffers but the ones in lisp-mode, sh-mode and fundamental-mode.
If I enter in pattern prompt: *lisp ^helm moc. Notice there is no @ this time helm will look for lisp mode buffers starting by "helm" and have "moc" in their name.
If I enter in pattern prompt: *!lisp !helm Helm will narrow down to buffers that are not in "lisp" mode and that do not match "helm".
If I enter in pattern prompt: /helm/ w3 Helm will narrow down buffers that are in any "helm" sub-directory and matching w3.
	    
***** helm find files 
****** base 
helm-find-files is file navigation on steroid:

helm-find-files can fuzzy match candidates in current directory. e.g "fob" or "fbr" will complete "foobar".

You can also execute persistent action, which is bound to C-z (by default) or TAB if you changed the default configuration (to have TAB be persistant) to narrow the current highlighting candidate

pressing  C-z or TAB again allows to  view content of the buffer (preview)

You can scroll the other buffer up/down by M-<next> and M-<prior>.

you can ~C-j~  to narrow to the highlighting candidate
and ~C-j~ again to view the content of other buffer. C-l to go back.

****** quick nav 
left take you back
right enters a folder 
Enter-opens the file or the folder in dired

Enter ~/ at end of pattern to quickly reach home directory.
Enter / at end of pattern to quickly reach root of your file system.
Enter ./ at end of pattern to quickly reach `default-directory' (initial start of session). If you are in `default-directory' move cursor on top.
****** go up one directory level with ~C-l~
You can also go up one directory level with ~C-l~

$Note$ if you use C-l, Helm goes up one level and the cursor is on the directory you've just got out. If you want to go up and have the cursors on the parent directory, in Helm prompt, enter ../.

****** File and directory histories
With prefix argument before running helm-find-files, Helm displays a list of visited directories. Select one at point transfer helm-find-files to that directory and you can start navigating there.

During a helm-find-files session, you can get a list of visited files and directories with

~C-c h~

From there, the default action is RET to open the file/directory at point, or continue with helm-find-files starting at that file/directory.

You can use M-p and M-n to move back and forth between previously visited directory.	    
****** create a directory/file
enter a new name that does not exist in the current directory and append / at the end. After you created a directory, Helm continues in that directory.

To create a new file, enter a name and select the top row that has the symbol [?] next to it. By default, Helm always selects the first match in the directory.

****** invoke grep on the current highlighting entry 
You can invoke grep on the current highlighting entry by C-s. C-u C-s to perform recursive grep.
****** find file on point
helm-find-files can be used to find file paths on point : all you need to do is moving your point on a proper filepath, and Helm will reach the correct path for you, similar to the screenshot. Now, you have no longer to use a separate command for open file at point, but using the same C-x C-f. It's really convenient.

***** helm-man-woman (read manuals with org)
Key binding:

<prefix> m (prefix is C-x c by default, or C-c h if set).

Description:

With helm-man-woman, you can quickly jump to any man entry using Helm interface, either by typing in Helm prompt or if point is on a symbol, get a man page at point. To enable man page at point, add the following code:

(add-to-list 'helm-sources-using-default-as-input 'helm-source-man-pages)
***** helm locate    
Key binding:

<prefix> l (prefix is C-x c by default, or C-c h if set).

Description:

Similar to helm-find, but use locate command and accepts search patterns according to locate input. Use helm-man-woman to read locate man page.

To use local database, execute helm-locate with prefix argument C-u. You can also customize Helm to use locate with arguments of your choice:

#+BEGIN_SRC emacs-lisp :results none
(setq helm-locate-command "locate %s -e -A --regex %s")
#+END_SRC

If you use helm-locate on a large directory and feel the update is too sluggish, you can always suspend the live updating with C-! and resume the live updating with C-! later.

To enable fuzzy matching in helm-locate, add this setting:

#+BEGIN_SRC emacs-lisp :results none
(setq helm-locate-fuzzy-match t)	    
#+END_SRC
***** helm-occur
Command: helm-occur

Key binding:

<prefix> M-s o (prefix is C-x c by default, or C-c h if set). Since this is a rather long binding, we should bind a more convenient key sequence:

(global-set-key (kbd "C-c h o") 'helm-occur)

Similar to occur, but using Helm interface. As you type, matching lines are updated immediately. This is convenient when you want to have a list of matches in the current buffer to jump back and forth. TAB to temporary move point to the location of current highlighting match. C-g cancels current Helm session and returns to the original location where helm-occur is invoked. RET on a match jumps to that match.

***** helm-apropos
<prefix> a (prefix is C-x c by default, or C-c h if set).

Pre-configured helm to describe commands, functions, variables and faces - all in one command!. It is similar to C-h a which runs apropos-command, but interactive includes more than just commands. helm-apropos comprises of 5 sources:

Commands: Lists all available commands.
Fucntion: Lists all available functions.
Classes: Lists all classes created by defclass. See Building Classes.
Generic Functions: Lists all functions created by defmethod. See Writing Methods
Variables: Lists all available variables.
Faces: Lists all available faces.
Helm attributes: Lists all attributes that you can use to build a Helm source. Useful if you want to write extension with Helm.
To enable fuzzy matching, add this setting:

(setq helm-apropos-function-list t)
***** helm-info-*

Key binding:

<prefix> h <key> (prefix is C-x c by default, or C-c h if set); <key>, by defaults, is one of g, i or r:

So, the prefix for info commands is <prefix> h. You can think of h as stands for help and <key> is one of the info topic to make it easier to remember and recall.

helm offers a wide ranges of info commands for various topics. M-x helm info to see these commands, i.e. helm-info-as, helm-info-gdb… You can search for info nodes easily with Helm interface and TAB on an entry to view. M-<next> moves to the next page, M-<prior> moves to the previous page in the other buffer.

You can have more helm-info- commands, such as:

helm-info-gdb.
helm-info-find.
helm-info-elisp.

Use M-x helm-info to see the list of helm-info- commands using the default info prefix: <prefix> h or key bindings of your choice.

***** helm-resume

Key binding:

<prefix> b (prefix is C-x c by default, or C-c h if set).

Description:

This command allows you to resume the previous Helm session, along with your previous patterns in the prompt. For example, if your last helm session was helm-ff-run-grep and you entered patterns in Helm prompt, helm-resume resumes that session along with your previous input.

With prefix argument, helm-resume allows you to choose among all existing Helm buffers. helm-mini or helm-buffer-list does not show existing Helm buffers; they ignore it by default; but if you run ibuffer, you will see a list of Helm buffers visible there. Don't kill them or you won't be able to resume.

This is really convenient when you have complex input ,and preparation steps. For example, if you have multiple regexp patterns in your previous Helm session, then you don't have to type it again. Or in your previous Helm session, you have to travel to a deep directory, and helm-resume helps you to reuse your previous session without going through all the troubles again.
***** TODO helm-all-mark-rings
Key binding:

<prefix> C-c SPC (prefix is C-x c by default, or C-c h if set). This is a rather long key sequence, this command deserves a better binding, for example:

(global-set-key (kbd "C-h SPC") 'helm-all-mark-rings)
Description:

One handy command. It allows you to view the content of the both the local and global mark rings in a friendly interface, so you can always jump back to where you were. Without this command, if you want to view the mark rings, you have to run M-: and enter mark-ring or global-mark-ring to view their contents. And even so, Emacs only displays the bare content of the mark-ring and global-mark-ring lists, which is the line number and its buffer like this:

***** helm-top

Key binding:

<prefix> t (prefix is C-x c by default, or C-c h if set).

Description:

This command provides Helm interface for top program. You can interact with each process with the following actions:

Key	Binding
[f1]	kill (SIGTERM)
[f2]	kill (SIGKILL)
[f3]	kill (SIGINT)
[f4]	kill (Choose signal)
helm-top specific commands:

Key	Binding
C-c C-u	Refresh helm-top
M-C	Sort by shell commands
M-P	Sort by CPU usage
M-U	Sort by user
M-M	Sort by memory
user and shell commands are sorted alphabetically.

***** helm-calcul-expression

Key binding:

<prefix> C-, (prefix is C-x c by default, or C-c h if set).

Description:

This commands provides a Helm interface for calc command

***** helm m-x
****** prefix key
n the original M-x, you pass prefix arguments before M-x.I
'In Helm', you pass prefix arugments after running helm-M-x.
In a helm-M-x session, if you type any prefix argument, it will be visible, i.e. if you type C-u 100, a message prefix argument: 100 appears. Then run your command as usual, the interactive command will receive the argument you passed in.
***** Integrating swish-e and Emacs
install swish-e from repo/AUR

To test things out, I will only index org-files. I have these all over the place, and they are not all in my org-mode agenda. So, finding them quickly would be awesome.

#+BEGIN_SRC text :tangle ~/.swish-e/swish.conf
# Example configuration file

# Tell Swish-e what to directories to index
IndexDir /Users/jkitchin/Dropbox
IndexDir "/Users/jkitchin/Box Sync"
IndexDir /Users/jkitchin/blogofile-jkitchin.github.com

# where to save the index
IndexFile /Users/jkitchin/.swish-e/index.swish-e

# What to index
IndexOnly .org

# Tell Swish-e that .txt files are to use the text parser.
IndexContents TXT* .org

# Otherwise, use the HTML parser
DefaultContents HTML*

# Ask libxml2 to report any parsing errors and warnings or
# any UTF-8 to 8859-1 conversion errors
ParserWarnLevel 9
#+END_SRC

Now, we create our index.

#+BEGIN_SRC sh
swish-e -c ~/.swish-e/swish.conf
#+END_SRC

Now an example search. I have been looking into the Energy frontier research centers, and I want to find my notes on it. Here is a little query. I use a special output format to keep things simple for the parsing later, just the rank and path, separated by a tab.

#+BEGIN_SRC sh
swish-e -f ~/.swish-e/index.swish-e -x '%r\t%p\n' -w efrc
#+END_SRC

Now, for the integration with Emacs. We just get that output in a string, split it, and get the parts we want.  I think I will use helm to provide a selection buffer to these results. We need a list of cons cells (string . candidate). Then we write an interactive helm function. We provide two sources. One for the initial query, and another to start a new search, in case you don't find what you want.

#+BEGIN_SRC emacs-lisp
(defun helm-swish-e-candidates (query)
  "Generate a list of cons cells (swish-e result . path)."
  (let* ((result (shell-command-to-string
		  (format "swish-e -f ~/.swish-e/index.swish-e -x \"%%r\t%%p\n\" -w %s"
			  (shell-quote-argument query))))
	 (lines (s-split "\n" result t))
	 (candidates '()))
    (loop for line in lines
	  unless (or  (s-starts-with? "#" line)
		      (s-starts-with? "." line))
	  collect (cons line (cdr (s-split "\t" line))))))


(defun helm-swish-e (query)
  "Run a swish-e query and provide helm selection buffer of the results."
  (interactive "sQuery: ")
  (helm :sources `(((name . ,(format "swish-e: %s" query))
		    (candidates . ,(helm-swish-e-candidates query))
		    (action . (("open" . (lambda (f)
					   (find-file (car f)))))))
		   ((name . "New search")
		    (dummy)
		    (action . (("search" . (lambda (f)
					     (helm-swish-e helm-pattern)))))))))
#+END_SRC

Now I can run M-x helm-swish-e and enter "efrc AND computing infrastructure" to find org files containing those words, then press enter to find the file. Nice and easy. I have not tested the query syntax very fully, but so far it is working fine!


**** helm-bibtex
https://github.com/tmalsburg/helm-bibtex

***** change color of modline matches
change this variable wither in theme or with M-x > customize faces 
#+BEGIN_EXAMPLE
;;modline color for helm inof there
`(helm-candidate-number ((,class (:foreground "green" :background "#073642")))) 
#+END_EXAMPLE
***** custom helm-bibtex search 
example :

#+BEGIN_SRC elisp
;; Define helm-search with predefined search expression:
(defun helm-bibtex-my-publications ()
  "Search BibTeX entries authored by Xebar Sara."
  (interactive)
  (helm :sources '(helm-source-bibtex)
        :full-frame t
        :input "xebar saram"
        :candidate-number-limit 500))

;; Bind this search function to Ctrl-x p:
;(global-set-key (kbd "C-x p") 'helm-bibtex-my-publications)
#+END_SRC
***** search on custom keywords
from dev email

I use two BibTeX fields to tag entries: “keywords” for keywords
describing the content of the paper (as usual) and “tags” for meta
data.  Values that I use in tags are “own”, “manuscript”, “poster”,
“talk”, … So if I want a list of all articles in progress, I search for
“own manuscript”.  Since the tags field is non-standard, it has to be
added to `helm-bibtex-additional-search-fields`.

Another solution would be to use the pubstate field and to search for
your name and “forthcoming” (add pubstate to
helm-bibtex-additional-search-fields for this to work).

in my example I add to my *.bib file a `tags` filed. then I add this to my helm-bibtex config

#+BEGIN_EXAMPLE
(setq helm-bibtex-additional-search-fields '(tags))
#+END_EXAMPLE

***** serach tips
the key to NOT select is
`!`

-Publications from 2010 and 2011:
#+BEGIN_EXAMPLE
\(2010\|2011\)
#+END_EXAMPLE

***** Search the word under the cursor
A common use case is where a search term is written in a document (say in your LaTeX manuscript) and you want to search for it in your bibliography. In this situation, just start helm-bibtex and enter M-n. This inserts the word under the cursor as the search term. (This is a helm feature and can be used in all helm sources not just helm-bibtex.) Note that it is also possible to use BibTeX keys for searching. So if your cursor is on a BibTeX key (e.g., in a LaTeX cite command) you can start helm-bibtex, hit M+n and see the entry associated with that BibTeX key. Special case: you want to open the PDF associated with the BibTeX key under the cursor: M-x helm-bibtex M-n Enter. This is of course shorter if you bind helm-bibtex to a convenient key (see Key-bindings).
***** Change order of entries
Yes.  Helm uses the first action as the default action.  To move an
action to the top of the list you can use the following code:
#+BEGIN_SRC emacs-lisp :results none
(helm-delete-action-from-source "Insert BibTeX key" helm-source-bibtex)
(helm-add-action-to-source "Insert BibTeX key" 'helm-bibtex-insert-key helm-source-bibtex 0)
#+END_SRC

The second argument in the second line is the function that executes the
action.  Here is a list of all actions and their functions:
#+BEGIN_EXAMPLE
  Open PDF file (if present): helm-bibtex-open-pdf
  Open URL or DOI in browser: helm-bibtex-open-url-or-doi
  Insert citation: helm-bibtex-insert-citation
  Insert reference: helm-bibtex-insert-reference
  Insert BibTeX key: helm-bibtex-insert-key
  Insert BibTeX entry: helm-bibtex-insert-bibtex
  Attach PDF to email: helm-bibtex-add-PDF-attachment
  Edit notes: helm-bibtex-edit-notes
  Show entry: helm-bibtex-show-entry
#+END_EXAMPLE

***** Send emails (mu4e) with references/pdfs 
Start an email to your colleague and M-x helm-bibtex. Select your new publications and select “Attach PDF to email.” Then M-x helm-resume (the publications are still marked) and select “Insert BibTeX entry.” Optionally insert more human readable references by M-x helm-resume and “Insert reference.” Send email. Done. This takes less than 10 seconds. Of course, this assumes that you’re sending email from Emacs, e.g. via Mu4e.
***** select all 
~M-a~ selects all candidates
***** use regular expressions to search for a range of
years: 201[2-5]
**** google-contacts

http://julien.danjou.info/projects/emacs-packages#google-contacts


Manual

The easiest way to use it is to load it from your .emacs:

#+BEGIN_SRC emacs-lisp :results none
(require 'google-contacts)
#+END_SRC


You can then use M-x google-contacts and type a query string.

Various key bindings are available. Here's a few:

#+BEGIN_EXAMPLE
    n or p to go the next or previous record;
    g to refresh the result, bypassing the cache;
    m to send an e-mail to a contact;
    s to make a new search;
    q to quit.
#+END_EXAMPLE

You can integrate directly Google Contacts into Gnus:

#+BEGIN_SRC emacs-lisp :results none
(require 'google-contacts-gnus)
#+END_SRC


Then you can use ; to go to a contact information while reading an e-mail.

You can integrate directly Google Contacts into message-mode;

#+BEGIN_SRC emacs-lisp :results none
(require 'google-contacts-message)
#+END_SRC
Then you can use TAB to go to complete e-mail addresses in the header fields.

**** edit sever 
in the config add config options
then in chrome in editable areas launch with edit with Emacs 
**** Hydra
***** The full defhydra syntax
****** base 
http://oremacs.com/2015/02/02/colorful-hydrae/

https://github.com/abo-abo/hydra

Note that `defhydra` looks intentionally like a defun, ₆In example₆ :

#+BEGIN_EXAMPLE
(defhydra hydra-toggle (global-map "C-c" :color red)
   "toggle"
   ("a" abbrev-mode "abbrev" :color blue)
   ("d" toggle-debug-on-error "debug" :color blue)
   ("f" auto-fill-mode "fill" :color blue)
   ("t" toggle-truncate-lines "truncate" :color blue)
   ("w" whitespace-mode "whitespace" :color blue)
   ("v" recenter-top-bottom "recenter" :color red)
   ("q" nil "cancel" :color blue))
(global-set-key (kbd "C-c C-v") 'hydra-toggle/body)
#+END_EXAMPLE

The code above:

binds C-c a, C-c d etc with the usual global-set-key approach.
binds C-c C-v a, C-c C-v d with the new approach, which shows you the hint right after C-c C-v and allows you to cancel easier.
binds C-c v to be repeatable, i.e. you can press C-c v v v. Same with C-c C-v v v v.

****** First argument: Hydra name

This argument decides the prefix to all the functions that will be generated. In this case the following functions will be generated:

#+BEGIN_EXAMPLE
hydra-toggle/abbrev-mode
hydra-toggle/toggle-debug-on-error
hydra-toggle/toggle-debug-on-error
hydra-toggle/auto-fill-mode
hydra-toggle/toggle-truncate-lines
hydra-toggle/whitespace-mode
hydra-toggle/recenter-top-bottom
hydra-toggle/nil
hydra-toggle/body
#+END_EXAMPLE

The final function calls the Hydras body, displaying the hint in the echo area and setting the transient map. It's the return result of defhydra, thats why it was possible to pass it to global-set-key in the first example.

****** Second argument: Hydra body

The Hydra body consists of:

a map used for binding, like global-map or c++-mode-map or projectile-mode-map

the body prefix: its a string passable to kbd that will be used in conjunction with heads' prefixes to bind the functions
an optional plist, which currently recognizes only the :color key, which in turn can be either red (the old behavior) or blue.

Its possible to omit the map and the body prefix simultaneously (it doesn't make sense to omit one but not the other), or just pass () if you want to get a red Hydra body that you can bind yourself.

****** Third argument: Hydra hint

This string will be used in the echo area to distinguish the current Hydra. This is optional, it case you don't provide it, it will default to "hydra".

****** Fourth argument: Hydra heads

Each Hydra head is a list of:
the key extension
the function
optional hint
optional plist.
Again, the plist recognizes only :color currently. The color is inherited from the body, if you don't specify it. In turn, the body color is red if you dont specify it.

****** launch a different hydra from a hydra
to do so you would want to issue the name/body command of the new hydra, ₆In example₆
#+BEGIN_SRC emacs-lisp :results none
(global-set-key
 (kbd "C-M-o")
 (defhydra hydra-org-edit ()
   "yas command "
   ("t" org-insert-todo-heading-respect-content "insert TODO" :color blue)
   ("d" org-cut-subtree  "org cut" :color blue)
   ("x" hydra-org2/body   "ins date" :color blue)
#+END_SRC
here we call on a different hydra `hydra-org/body` via keybind x
****** colors 
Since version 0.5.0, Hydra's heads all have a color associated with them:

`red` (default) means the calling this head will *not* vanquish the Hydra
`blue` means that the Hydra will be vanquished after calling this head
`amaranth` Hydras with amaranth body are impossible to quit with any binding except a blue head. A check for at least one blue head exists in defhydra, so that you don't get stuck by accident.

remembert that heads can inherit the color from the body, the following is equivalent:

#+BEGIN_SRC emacs-lisp :results none
(global-set-key
 (kbd "C-c C-v")
 (defhydra toggle (:color blue)
   "toggle"
   ("a" abbrev-mode "abbrev")
   ("d" toggle-debug-on-error "debug")
   ("f" auto-fill-mode "fill")
   ("t" toggle-truncate-lines "truncate")
   ("w" whitespace-mode "whitespace")
   ("q" nil "cancel")))
#+END_SRC

****** Can Hydras can be helpful?
They can, if


#+BEGIN_SRC emacs-lisp :results none
(setq hydra-is-helpful t)
#+END_SRC

This is the default setting. In this case, you'll get a hint in the echo area consisting of current Hydra's base comment and heads. You can even add comments to the heads like this:

#+BEGIN_SRC emacs-lisp :results none
(defhydra hydra-zoom (global-map "<f2>")
  "zoom"
  ("g" text-scale-increase "in")
  ("l" text-scale-decrease "out"))
#+END_SRC

With this, you'll see zoom: [g]: in, [l]: out. in your echo area, once the zoom Hydra becomes active.
****** awesome-docstring (help menus)

This can be a simple string used to build the final hydra hint. However, if you start it with a newline, the key-highlighting and Ruby-style string interpolation becomes enabled, as you can see in hydra-buffer-menu above.

To highlight a key, just wrap it in underscores.

$Note$ that the key must belong to one of the heads.

 The key will be highlighted with the color that is appropriate to the behavior of the key, i.e. if the key will make the hydra exit, the color will be blue.

To insert an empty character, use ^. The only use of this is to have your code aligned as nicely as the result.

To insert a dynamic Elisp variable, use %` followed by the variable. Each time the variable changes due to a head, the docstring will be updated. format-style width specifiers can be used.

To insert a dynamic Elisp expression, use e.g. %(length (dired-get-marked-files)). If a head will change the amount of marked files, for example, it will be appropriately updated.

If the result of the Elisp expression is a string and you don't want to quote it, use this form: %s(shell-command-to-string "du -hs").

***** Hydra example and recipes
****** helm-related functions
#+BEGIN_EXAMPLE
(global-set-key
 "κ"
 (defhydra hydra-helm (:color blue)
   "helm"
   ("f" projectile-find-file "file")
   ("w" helm-org-wiki "wiki")
   ("r" helm-recentf "recent")
   ("s" helm-swoop "swoop")
   ("q" nil "quit")))
#+END_EXAMPLE
****** use numric prefixes
Now it's possible to write this:

#+BEGIN_EXAMPLE
(global-set-key
 (kbd "C-z")
 (defhydra hydra-vi ()
   "vi"
   ("l" forward-char)
   ("h" backward-char)
   ("j" next-line)
   ("k" previous-line)))
#+END_EXAMPLE

And now ~C-z 5j7l~ will move 5 lines down and 7 characters left, still with the option to press h, j, k, l some more.

Additionally ~C-z C-u C-u C-u k~ will move 64 lines up, since C-u multiplies its argument by 4 each time.

other example 

#+BEGIN_EXAMPLE
(defhydra hydra-zoom (global-map "<f2>")
  "zoom"
  ("g" text-scale-increase "in")
  ("l" text-scale-decrease "out"))
#+END_EXAMPLE

Now, <f2> g 4g 2l will zoom in 5 times, and zoom out 2 times for a total of +3 zoom.
****** move-splitter

#+BEGIN_EXAMPLE
(defhydra hydra-splitter (global-map "C-M-s")
  "splitter"
  ("h" hydra-move-splitter-left)
  ("j" hydra-move-splitter-down)
  ("k" hydra-move-splitter-up)
  ("l" hydra-move-splitter-right))
#+END_EXAMPLE

This Hydra can benefit from numeric arguments as well: C-M-s l 40l will quickly make the right window a lot smaller.

If I wanted to type C-M-s 40 l, I would have to use this definition instead:

#+BEGIN_EXAMPLE
(global-set-key
 (kbd "C-M-s")
 (defhydra hydra-splitter ()
   "splitter"
   ("h" hydra-move-splitter-left)
   ("j" hydra-move-splitter-down)
   ("k" hydra-move-splitter-up)
   ("l" hydra-move-splitter-right)))
#+END_EXAMPLE

For that case, I would get the hint immediately after C-M-s and would be able to give the numeric argument immediately, but I wouldn't be able to bind anything else on C-M-s as a prefix, e.g.:

#+BEGIN_EXAMPLE
(global-set-key (kbd "C-M-s z") 'recenter-top-bottom)
#+END_EXAMPLE


The code above would give the error "Key sequence C-M-s z starts with non-prefix key C-M-s". So you can pick the method that you prefer, the choice is there.

****** rectangle selector 
#+BEGIN_SRC emacs-lisp :results none
(defun ora-ex-point-mark ()
  (interactive)
  (if rectangle-mark-mode
      (exchange-point-and-mark)
    (let ((mk (mark)))
      (rectangle-mark-mode 1)
      (goto-char mk))))

(defhydra hydra-rectangle (:body-pre (rectangle-mark-mode 1)
                           :color pink
                           :post (deactivate-mark))
  "
  ^_k_^     _d_elete    _s_tring     |\\     _,,,--,,_
_h_   _l_   _o_k        _y_ank       /,`.-'`'   ._  \-;;,_
  ^_j_^     _n_ew-copy  _r_eset     |,4-  ) )_   .;.(  `'-'
^^^^        _e_xchange  _u_ndo     '---''(_/._)-'(_\_)
^^^^        ^ ^         _p_aste
"
  ("h" backward-char nil)
  ("l" forward-char nil)
  ("k" previous-line nil)
  ("j" next-line nil)
  ("e" ora-ex-point-mark nil)
  ("n" copy-rectangle-as-kill nil)
  ("d" delete-rectangle nil)
  ("r" (if (region-active-p)
           (deactivate-mark)
         (rectangle-mark-mode 1)) nil)
  ("y" yank-rectangle nil)
  ("u" undo nil)
  ("s" string-rectangle nil)
  ("p" kill-rectangle nil)
  ("o" nil nil))
(global-set-key (kbd "C-x SPC") 'hydra-rectangle/body)
#+END_SRC
****** gnus

#+BEGIN_EXAMPLE
(defhydra hydra-gnus-reply (:color blue)
  "reply"
  ("o" gnus-summary-reply-with-original "one")
  ("O" gnus-summary-reply)
  ("a" gnus-summary-wide-reply-with-original "all")
  ("A" gnus-summary-wide-reply)
  ("u" gnus-summary-very-wide-reply-with-original "universe")
  ("U" gnus-summary-very-wide-reply)
  ("q" nil "quit"))
(define-key gnus-summary-mode-map "r" 'hydra-gnus-reply/body)
#+END_EXAMPLE
**** ace-isearch
***** install 
https://github.com/tam17aki/ace-isearch	  

You can install ace-isearch.el from MELPA with package.el

#+BEGIN_EXAMPLE
M-x package-install ace-isearch
#+END_EXAMPLE
***** config 
Enable ace-isearch minor mode:

#+BEGIN_SRC emacs-lisp :results none
(ace-isearch-mode +1)
;Enable global ace-isearch mode:
(global-ace-isearch-mode +1
#+END_SRC

ace-isearch.el provides a minor mode which combines isearch and ace-jump-mode.

The "default" behavior can be summrized as:

L = 1 : ace-jump-mode
1 < L < 6 : isearch
L >= 6 : helm-swoop-from-isearch
where L is the input string length during isearch. When L is 1, after a few seconds specified by ace-isearch-input-idle-delay, ace-jump-mode will be invoked. Of course you can customize the above behaviour.
***** Customization

ace-isearch-submode (Default:ace-jump-word-mode)

Specify the function name as ace-jump-word-mode or ace-jump-char-mode utilized in invoking ace-jump-mode. You can change this value by function ace-isearch-switch-submode interactively.

ace-isearch-use-ace-jump (Default:t)

If this variable is set to nil, ace-jump-mode is never invoked.

If set to t, it is always invoked if the length of isearch-string is equal to 1.

If set to printing-char, it is invoked only if you hit a printing character to search for as a first input. This prevents it from being invoked when repeating a one character search, yanking a character or calling isearch-delete-char leaving only one character.

ace-isearch-input-idle-delay (Default：0.5)

Delay seconds for invoking ace-jump-mode and ace-isearch-function-from-isearch described below during isearch.

ace-isearch-input-length (Default：6)

As default behaviour, when the input string length during isearch exceeds ace-isearch-input-length, the function specified by ace-isearch-funtion-from-isearch will be invoked.

ace-isearch-function-from-isearch (Default:helm-swoop-from-isearch)

Specify the function name invoked when the input string length during isearch exceeds ace-isearch-input-length. If swoop has been installed, swoop can be invoked:

(setq ace-isearch-funtion-from-isearch 'swoop-from-isearch)
In this case, the following setting would be better.

(define-key swoop-map (kbd "C-s") 'swoop-action-goto-line-next)
(define-key swoop-map (kbd "C-r") 'swoop-action-goto-line-prev)
Of course you can set this variable to helm-occur-from-isearch.

(setq ace-isearch-funtion-from-isearch 'helm-occur-from-isearch)
ace-isearch-use-function-from-isearch (Default:t)

If you don't want to invoke ace-isearch-funtion-from-isearch, set this variable to nil.

ace-isearch-set-ace-jump-after-isearch-exit

This functionality is optional. ace-jump-mode will be invoked further using the isearch query after exiting isearch. This helps to reduce many key repeats of C-s or C-r.

You can enable this as follows:

(ace-isearch-set-ace-jump-after-isearch-exit t)
Otherwise you can disable this as follows:

(ace-isearch-set-ace-jump-after-isearch-exit nil)
ace-isearch-toggle-ace-jump-after-isearch-exit

Toggle the functionality described above.

ace-isearch-fallback-function (Default:helm-swoop-from-isearch)

This functionality is optional. When isearch fails and ace-isearch-use-fallback-function is non-nil, ace-isearch-fallback-function will be invoked as a fallback function.

You shoud specify the symbol name of function which uses isearch-string, the query string during isearch. For a trivial example, you can specify it as follows:

(defun my-fallback-function ()
  (message "Your isearch string is %s", isearch-string))

(setq ace-isearch-use-function-from-isearch t)
(setq ace-isearch-fallback-function 'my-fallback-function)
ace-isearch-use-fallback-function (Default:nil)

If this variable is set to non-nil, ace-isearch-fallback-function will be invoked when isearch fails.

Sample Configuration
#+BEGIN_SRC emacs-lisp :results none
(require 'ace-isearch)
(global-ace-isearch-mode +1)

(custom-set-variables
 '(ace-isearch-input-length 7)
 '(ace-isearch-input-idle-delay 0.4)
 '(ace-isearch-submode 'ace-jump-char-mode)
 '(ace-isearch-use-ace-jump 'printing-char))

(ace-isearch-set-ace-jump-after-isearch-exit t)
#+END_SRC

**** ace-jump-zap
https://github.com/waymondo/ace-jump-zap
ace-jump-zap provides the functionality of zap-to-char and zap-up-to-char using ace-jump-mode. In a nutshell, you may trigger a key-binding to launch ace-jump-char-mode to vaporize all characters between the cursor and the selected character.

Bind (ace-jump-zap-to-char) or (ace-jump-zap-up-to-char) to the key-binding of your heart's desire and zap away.

Alternatively, you can bind the helper functions (ace-jump-zap-to-char-dwim) and (ace-jump-zap-up-to-char-dwim). Calling them interactively will trigger (zap-to-char) and (zap-up-to-char) respectively, but with a prefix it will call the ace-jump-zap version.

ajz/zap-function

This is the function used for zapping between point and char. The default is 'delete-region
but it could also be 'kill-region.

ajz/forward-only

Set to non-nil to choose to only zap forward from the point. Default will zap in both directions from the point in the current window.

**** key chord 
***** base
########   Quick start   ########################################
#+BEGIN_EXAMPLE
      (require 'key-chord)
      (key-chord-mode 1)
#+END_EXAMPLE

Add above to your ~/.emacs

 and some chords, for example

(key-chord-define-global "hj"     'undo)
(key-chord-define-global ",."     "<>\C-b")

########   Terminology   ########################################

 In this package, a "key chord" is two keys pressed simultaneously,
 or a single key quickly pressed twice.

 (Sometimes pressing SHIFT and/or META plus another key is call a chord,
 but not here. However SHIFT plus two normal keys can be a "key chord".)

 ########   Description   ########################################

 Key chord mode acts like a global minor mode controlled by the function
 `key-chord-mode'.

 Key chord definitions are stored in ordinary key-maps.
 The function `key-chord-define-global' defines a chord in the global
 key-map and `key-chord-define' defines a chord in a specified key-map,
 for example for a specific mode.

****** A TWO-key chord is two distinct keys pressed simultaneously (within one tenth of a second, or so).

 Examples:

#+BEGIN_SRC emacs-lisp :results none
      (key-chord-define-global ",."     "<>\C-b")
      (key-chord-define-global "hj"     'undo)
      (key-chord-define-global [?h ?j]  'undo)  ; the same
      (key-chord-define-global "jk"     'dabbrev-expand)
      (key-chord-define-global "cv"     'reindent-then-newline-and-indent)
      (key-chord-define-global "4r"     "$")
#+END_SRC

 Comma and dot pressed together insert a pair of angle brackets.
 `h' and `j' pressed together invoke the undo command.
 `j' and `k' pressed together invoke the dabbrev-expand command.
 'c' and 'v' pressed together insert a newline.
 `4' and `r' pressed together insert a dollar sign.

****** A ONE-key chord is a single key quickly pressed twice (within one thirdof a second or so). 
Examples:

#+BEGIN_SRC emacs-lisp :results none
      (key-chord-define-global "''"     "`'\C-b")
      (key-chord-define-global ",,"     'indent-for-comment)
      (key-chord-define-global "qq"     "the ")
      (key-chord-define-global "QQ"     "The ")
#+END_SRC

 Tick (') pressed twice inserts a back-tick and a tick (`').
 Comma (,) pressed twice indents for and/or inserts a comment.
 `q' pressed twice inserts the word "the ".

 Examples: Mode specific chords

      (key-chord-define c++-mode-map ""  "\C-e;")
      (key-chord-define c++-mode-map "{}"  "{\n\n}\C-p\t")

 The command `key-chord-describe' lists currently defined key chords.
 The standard command `describe-bindings' (C-h b) will also show key chords.

 The standard command `describe-key' (C-h k) will accept a key chord and
 show its definition. (Isn't that amazing. There is no explicit code to
 carry out this functionality.)

 ########   Tips   ########################################

 Don't chord key combinations that exists in the languages you typically
 write. Otherwise, if you are typing fast, two key intended to be separate
 letters might instead trig a chord.
 E.g. "uu" would be a good chord in spanish but not in finnish, and
 "hj" would be a good chord in english but not in swedish. 

 Don't rely solely on /usr/dict/words to find unusual combination.
 For example "cv" or "fg" can be quite common in certain kinds of
 programming. Grep your own texts to verify that a combination is unusual.
 And don't forget to check both permutations: "fg" and "gf".

 Choose two keys that are close to each other on the keyboard, so they
 can be quickly typed without effort. Chords involving two hands (as
 opposed to two fingers on one hand) are harder to type (quickly).
 The idea is that key chords are to replace function keys for functions
 that are frequently performed while the hands are in writing position.

 Key chords might not work well over a slow network.
**** org-dp
tips when buliding scripts with org-dp

:preserve-indent 1

mnake sure its '1' other wise you will get indents

**** org-ref
***** clean (org-ref-clean-bibtex-entry)
You can fix formatting problems by putting your cursor on the bibtex entry, and typing M-x org-ref-clean-bibtex-entry. This will fix the bibtex key to a standard form, align and indent the entry, escape the & so it is legal syntax, prompt you for a year, and show you the non-ascii characters so you can replace them

The key formatting comes from these definitions:

#+BEGIN_SRC latex :results none
;; variables that control bibtex key format for auto-generation
;; I want firstauthor-year-title-words
;; this usually makes a legitimate filename to store pdfs under.
(setq bibtex-autokey-year-length 4
      bibtex-autokey-name-year-separator "-"
      bibtex-autokey-year-title-separator "-"
      bibtex-autokey-titleword-separator "-"
      bibtex-autokey-titlewords 2
      bibtex-autokey-titlewords-stretch 1
      bibtex-autokey-titleword-length 5)
#+END_SRC

clean all file:

I suggest you run these first:
%% (bibtex-validate-globally)   ; checks for duplicate keys
%% (bibtex-validate)

I also recommend you run bibtex-sort (it is easier to spot duplicates in
a sorted list).

Then, put this next line at the top of your bibtex file. 
$Note- The `t` argument to org-ref-clean-bibtex-entry will preserve your existing keys$

#+BEGIN_SRC latex :results none
% (bibtex-map-entries (lambda (key start end) (org-ref-clean-bibtex-entry t)))
#+END_SRC

Put your cursor at the end of that line, and type C-x C-e to run the function, and
wait patiently. It took a few minutes on my 1300 entries, and I had to restart it once on some entry.
if you have bad Unicode, dup keys etc you will be prompted to input
remove bad Unicode keys and fix dup keys when prompted
Note if you want to change title cases in all entries you can use

% (bibtex-map-entries 'jmax-title-case-article)
% (bibtex-map-entries 'jmax-sentence-case-article)



***** Using org-ref to keep your bibtex files in order
Maintaining an accurate, useful bibliography of references is critical for scientific writing. It is also not trivial. While it is easy to download and copy bibliographic entries to your database, these entries are often incomplete, not consistently formatted, and can contain invalid characters. org-ref provides several utility functions to help with this.

****** "cleaning" a bibtex entry

Consider this bibtex entry from http://pubs.acs.org/action/showCitFormats?doi=10.1021%2Fie500588j.

#+BEGIN_SRC bibtex

@article{doi:10.1021/ie500588j,
author = {Okada, Tomohiko and Ozono, Shoya and Okamoto, Masami and Takeda, Yohei and Minamisawa, Hikari M. and Haeiwa, Tetsuji and Sakai, Toshio and Mishima, Shozi},
title = {Magnetic Rattle-Type Coreâ€“Shell Particles Containing Iron Compounds with Acid Tolerance by Dense Silica},
journal = {Industrial & Engineering Chemistry Research},
volume = {0},
number = {0},
pages = {null},
year = {0},
doi = {10.1021/ie500588j},

URL = {http://pubs.acs.org/doi/abs/10.1021/ie500588j},
eprint = {http://pubs.acs.org/doi/pdf/10.1021/ie500588j}
}

#+END_SRC

On the surface it looks fine, but there are the following issues with it:

1. The bibtex key is hard to remember. I like systematically named keys.
2. There is a bare & in the journal title, which is not legal in LaTeX.
3. There is no year entry, even though it is a 2014 entry. The pages, volume, and number are also problematic, but this is an ASAP article and the reference does not have those yet.
4. It is hard to see, but the dash between core and shell is a non-ascii character, which can cause problems in LaTeX.
5. The entry is not very nicely aligned or indented.

You can fix these problems by putting your cursor on the bibtex entry, and typing M-x org-ref-clean-bibtex-entry. This will fix the bibtex key to a standard form, align and indent the entry, escape the & so it is legal syntax, prompt you for a year, and show you the non-ascii characters so you can replace them. The resulting, nicely formatted entry is shown below.

#+BEGIN_SRC bibtex
@article{okada-2014-magnet-rattl,
  author =	 {Okada, Tomohiko and Ozono, Shoya and Okamoto, Masami
                  and Takeda, Yohei and Minamisawa, Hikari M. and
                  Haeiwa, Tetsuji and Sakai, Toshio and Mishima,
                  Shozi},
  title =	 {Magnetic Rattle-Type Core-Shell Particles Containing
                  Iron Compounds with Acid Tolerance by Dense Silica},
  journal =	 {Industrial \& Engineering Chemistry Research},
  volume =	 0,
  pages =	 {null},
  year =	 2014,
  doi =		 {10.1021/ie500588j},
  number =	 0,
  url =		 {http://pubs.acs.org/doi/abs/10.1021/ie500588j},
  eprint =	 {http://pubs.acs.org/doi/pdf/10.1021/ie500588j},
}


#+END_SRC

The key formatting comes from these definitions:

#+BEGIN_SRC emacs-lisp
;; variables that control bibtex key format for auto-generation
;; I want firstauthor-year-title-words
;; this usually makes a legitimate filename to store pdfs under.
(setq bibtex-autokey-year-length 4
      bibtex-autokey-name-year-separator "-"
      bibtex-autokey-year-title-separator "-"
      bibtex-autokey-titleword-separator "-"
      bibtex-autokey-titlewords 2
      bibtex-autokey-titlewords-stretch 1
      bibtex-autokey-titleword-length 5)
#+END_SRC

You should develop a discipline to clean each entry as you add them, and before you cite them. It is a pain to change the key, and then find and change all the places you used that key before. Now that you have a systematic key, go ahead and download the pdf for the article, and save it in your pdf directory by that key name. Set the variable org-ref-pdf-directory to this directory, and later when you click on citations you will be able to open the pdf easily.

****** Validating your bibliography
elisp:bibtex-validate will check your bibliography for valid syntax. This is a bibtex command.

file:org-bib.bib

****** Sorting your bibtex file
It is a good idea to keep your bibtex file sorted. This will facilitate finding duplicate entries, and will make it easier to find things. I usually add entries to the top of the file, and then clean them. Then run the command elisp:bibtex-sort-buffer. This will sort the entries for you. This is also a bibtex command.

file:org-bib.bib

****** Make a full bibliography pdf
A good way to check your bibliography for duplicates, spelling errors, and invalid formats is to make a pdf containing all the entries. Open your bibtex file, and run elisp:org-ref-build-full-bibliography. If all goes well, you will get a pdf of your bibliography that you can check for accuracy. If there are errors, you will have to fix them until the pdf is generated.

Try it out: file:org-bib.bib

****** Finding bad citation links
Sometimes you will get bad citation links in your document. Maybe there is no corresponding entry, maybe you typed in the wrong key, maybe you changed the key. Either way, you need to find them and fix them. Run the command elisp:org-ref-find-bad-citations to find them. cite:test

****** Extracting citations entries
You will often work from your default bibliography for your own work. Eventually you will need to extract the entries cited so you can send them to someone. The command  elisp:org-ref-extract-bibtex-entries will do that for you. If I have cited something cite:calle-vallejo-2010-trend-stabil.

**** mu4e
***** org mode integration
http://www.djcbsoftware.nl/code/mu/mu4e/Creating-org_002dmode-links.html

It can be useful to include links to e-mail messages or even search queries in your org-mode files. mu4e supports this with the org-mu4e module; you can set it up by adding it to your configuration:

#+BEGIN_SRC emacs-lisp :results none
(require 'org-mu4e)
#+END_SRC

this expects org-mode 8.x

After this, you can use the normal org-mode mechanisms to store links: M-x org-store-link stores a link to a particular message when you’re in Message view, and a link to a query when you are in Headers view.

You can insert this link later with M-x org-insert-link. From org-mode, you can go to the query or message the link points to with either M-x org-agenda-open-link in agenda buffers, or M-x org-open-at-point elsewhere - both typically bound to C-c C-o.
***** common keybinds
You can then retrieve your e-mail using M-x mu4e-update-mail-and-index, or C-S-u in all mu4e-views; alternatively, you can use C-c C-u, which may be more convenient if you use emacs in a terminal.

~s~ sart search

~C~ compose  

~O~ sort
***** install on ubuntu
install dependencies

#+BEGIN_SRC sh
sudo apt-get install libtool autotools autotools-dev autoconf 

$ sudo apt-get install libgmime-2.6-dev libxapian-dev
# if libgmime-2.6-dev is not available, try libgmime-2.4-dev

# optional
$ sudo apt-get install guile-2.0-dev html2text xdg-utils

#+END_SRC
then dl and install

#+BEGIN_SRC sh
# get from git (alternatively, use a github tarball)
$ git clone git://github.com/djcb/mu.git

$ cd mu
$ autoreconf -i && ./configure && make
# On the BSDs: use gmake instead of make
$ sudo make install
#+END_SRC

After this, mu and mu4e should be installed 18 on your system, and be available from the command line in emacs.

You may need to restart emacs, so it can find mu4e in its load-path. If, even after restarting, emacs cannot find mu4e, you may need to add it to your load-path explicitly; check where mu4e is installed, and add something like the following to your configuration before trying again:

#+BEGIN_SRC emacs-lisp :results none
;; the exact path may differ -- check it
(add-to-list 'load-path "/usr/local/share/emacs/site-lisp/mu4e")
#+END_SRC


**** pdf-tools
https://github.com/politza/pdf-tools
***** install 
he package may be installed via melpa and it will try to build the server part when it is actiated the first time, though next section is still relevant

in arch you will need all the dev packages as well as poppler and imagemagick

once you install from melpa, use M-x `pdf-tools-install` and hopefully it will start installing the server 


**** sunrise 
***** base 
****** launch sunrise
The command `sunrise' invokes sunrise
The command `sunrise-cd' invokes Sunrise and automatically selects the current file wherever it is in the  filesystem. Type h at any moment for information on available key bindings.
***** functions 
****** copy a directory structure without copying the files
select the directories you want to clone, press K (sr-do-clone) and select “(D)irectories only”.

Cloning was devised as a more general operation than recursive copying of files and directories[1]: all directories are created with the same name and structure at the destination, while what happens to all the other files depends on the option you choose:

“(D)irectories only” - ignores all files, copies only directories,
“(C)opies” - performs a traditional copy of all files,
“(H)ardlinks” - makes every new file a (hard) link to the original one (obviously the source and destination directories must be in the same partition for this to work),
“(S)ymlinks” - creates absolute symbolic links for all files in the tree,
“(R)elative symlinks” - creates relative symbolic links for all files.

***** sort dot files first
first make sure to have the locale.conf setup properly. set in file:/etc/locale.conf the following

#+BEGIN_EXAMPLE
LANG=en_US.UTF-8
LC_CTYPE=en_US.UTF-8
LC_COLLATE=C
#+END_EXAMPLE
where you have LC_COLLATE=C
This variable governs the collation rules used for sorting and regular expressions.
Setting the value to C can for example make the ls command sort dotfiles first, followed by uppercase and lowercase filename

then in your config add this line:
#+BEGIN_SRC emacs-lisp :results none
(setq sr-listing-switches "--time-style=locale --group-directories-first -AlDhgG")
#+END_SRC

***** terminal integration
Terminal integration and Command line expansion: integrates tightly with
 `eshell' and `term-mode' to allow interaction between terminal emulators in
 line mode (C-c C-j) and the panes: the most important navigation commands
 (up, down, mark, unmark, go to parent dir) can be executed on the active pane
 directly from the terminal by pressing the usual keys with Meta: <M-up>,
 <M-down>, etc. Additionally, the following substitutions are automagically
 performed in `eshell' and `term-line-mode':
     %f - expands to the currently selected file in the left pane
     %F - expands to the currently selected file in the right pane
     %m - expands to the list of paths of all marked files in the left pane
     %M - expands to the list of paths of all marked files in the right pane
     %n - expands to the list of names of all marked files in the left pane
     %N - expands to the list of names of all marked files in the right pane
     %d - expands to the current directory in the left pane
     %D - expands to the current directory in the right pane
     %a - expands to the list of paths of all marked files in the active pane
     %A - expands to the current directory in the active pane
     %p - expands to the list of paths of all marked files in the passive pane
     %P - expands to the current directory in the passive pane
***** AVFS
make sure AVFS is installed 

on arch to get it working issue this (at startup)

#+BEGIN_SRC sh
grep -q "^avfsd $HOME/.avfs " /proc/mounts || avfsd ~/.avfs -o auto_cache     
#+END_SRC
**** Yasnippet
***** choose pre defined values on expansion
use the yas-choose-value command
₆In example₆ 
#+BEGIN_SRC emacs-lisp :results none
  :PROPERTIES:
    :ID: 
    :Time:  ${1:$$(yas-choose-value '("10" "15" "30" "60"))}
    :Rating:  ${2:$$(yas-choose-value '("1" "2" "3" "4" "5"))} 
    :Source: $3
    :Cuisine:  ${4:$$(yas-choose-value '("Indian" "Thai" "Asian" "Vietnamese" "Chinese" "Israeli" "Italian" "American" "EastEuro" "Mexican" "French" "Persian" "Austria" ))}
    :Type:   ${5:$$(yas-choose-value '("main" "side" "starter" "sweets" "drinks" "sauce" "breakfast"))}   
    :Serves:  ${6:$$(yas-choose-value '("1" "2" "4" "6" "8"))} 
    :Fav: $7
    :END:

#+END_SRC
**** Transmission
install from melpa
to define and config it issue customize-group >> transmission

you can try and add the user pass to you config file
#+BEGIN_SRC emacs-lisp :results none
(setq transmission-rpc-auth '(:username "USER" :password "PASS" ) )
#+END_SRC
** registers
*** basics

In emacs, we have a special clipboard with multiple places to store
things, each named by a single number or letter. We call these places
registers. Thus, you can save some text to register A, some other text
to register B, and later paste the contents of register A or B. The key
bindings (shortcuts) for this are good to remember:
 C-x r s R save region (selection) into register R
 C-x r i R insert the contents of register R
 So, to save the current region/selection in register 2, you would type:
C-x r s 2, and to insert the contents of that register later, you'd do
C-x r i 2. It's a really useful thing to add to your emacs muscle
memory.

*** launch a file through registers (vim like marks)

use emacs registers to store files which I use often. I would store
'~/.emacs' in a register:
 (set-register ?e (cons 'file "~/.emacs"))
 and open it with C-x r j e

*** viewing register contents

viewing register contents
 One obvious problem with registers is that for most people it's very
hard to remember what went into which register, if you use more than two
or three registers. There is M-x view-register, but that's only
marginally useful. It would be much nicer if we could get a list of all
registers in use and a preview of their contents.
 To do that, we can use the list-register command
 I use a key binding C-x r v for that, which somewhat logically follows
the other ones:
 C-x r vview registers
 in config:
 (require 'list-register)
 (global-set-key (kbd "C-x r v") 'list-register)

*** set marks in registry

Save current mark to register "l":
 C-x r <space> l
 Move to mark saved in register "l":
 C-x r j l

** review/spelling
*** Spelling
**** How to have spell-checker turned on all the time (flyspell)
How to have spell-checker turned on?

Call flyspell-mode or flyspell-buffer. To have it always on, put the
following in your emacs init file:

(defun turn-spell-checking-on () "Turn flyspell-mode on."
(flyspell-mode 1) ) (add-hook 'text-mode-hook 'turn-spell-checking-on)

This is under the menu --Tools --Spell Checking---.

**** spell check word/buffer
To check a single work use M-$.

You can start checking the whole buffer with

'M-x ispell-buffer'
**** Spell check word/buffer/selection

to spell check a word use 'ispell-word' default is 'M-$' (> Meta-Shift-4)

to spell check a selection use a 

**** ispell keybinds when checking

'SPC'- Skip this word--continue to consider it incorrect, but don't change it here.

'i' - Insert this word in your private dictionary file so that Ispell will consider it correct from now on, even in future sessions.

'x'-Quit interactive spell checking and move point back to where it was when you started spell checking.
r new RET
    Replace the word (just this time) with new.

R new RET
    Replace the word with new, and do a query-replace so you can replace it elsewhere in the buffer if you wish.

digit- Replace the word (just this time) with one of the displayed near-misses. Each near-miss is listed with a digit; type that digit to select it.

a-Accept the incorrect word--treat it as correct, but only in this editing session.

A-Accept the incorrect word--treat it as correct, but only in this editing session and for this buffer.


u-Insert the lower-case version of this word in your private dictionary file.

m- Like i, but you can also specify dictionary completion information.

l word RET- Look in the dictionary for words that match word. These words become the new list of "near-misses"; you can select one of them as the replacement by typing a digit. You can use `' in word as a wildcard.

C-g
    Quit interactive spell checking. You can restart it again afterward with C-u M-$.

X
    Same as C-g.


q
    Quit interactive spell checking and kill the Ispell sub process.

C-l
    Refresh the screen.

C-z
    This key has its normal command meaning (suspend Emacs or iconify this frame).
    
*** convert html to org using pandoc

Org-mode:
 pandoc -s -S README -o example27.org
 pandoc -s -S FILE.html -o FILE.org

[[http://johnmacfarlane.net/pandoc/demo/example27.org][http://johnmacfarlane.net/pandoc/demo/example27.org]]
 Warning if you get an error open the html file in an editor and
save it with utf-8 encoding

** save
*** save as 
use:
| bind | Actiopn |
| C-x  | C-w     |
|      |         |

as the gui save may have issues
*** save marked region
'write-region' 
will save the current marked region start end filename &optional append visit lockname mustbenew
This function writes the region delimited by start and end in the current buffer into the file specified by filename.  
** sync
*** sync Emacs between laptop and work	
**** Main Emacs config is laptop.
 I sync between laptop and work this way:
I only pull (after first clone) Emacs config from github (using my work file:/~/bin/ugs.sh script)
in addition to that every big update I need to manually zip and upload the nested .git directories (₆In example₆ org,ESS etc) to the NAS (under software >> emacs_sync folder
**** tips
you may have to create a hist file if you get this warrning
#+BEGIN_SRC sh
mkdir -p  /home/zeltak/.cache/emacs/hist/
zeltak@zuni:~$ touch  /home/zeltak/.cache/emacs/hist/hist.txt
#+END_SRC
 	 
** Search Text, FindReplace Text
*** regex
**** escape characters

Escape Regex Chars
 All these commands uses regex to search. So, if you simply want to
search plain words or phrases, and if your phrase contains any of regex
characters, you need to escape them. Here some commonly used regex
characters that you'll need to replace:
 [[macsen_files/Image_uAzmRVDZTNs1blt9dZ9E2g_0001.png]]

*** search
%tip- jump back to where you started with ~C-u SPACE~ %

How to search text?

Press Ctrl+s (isearch-forward), then type your text. Emacs will
search as you type. To advance to the next occurrence, press Ctrl+s
again. To go to previous occurrence, type Ctrl+r. To stop, press
Enter or arrow key to leave the cursor there. Or type Ctrl+g to
return to the spot before search was started.

This command is also under the menu Edit  Search.

To search for the word that is under cursor, type Ctrl+sCtrl+w.
This can save you some typing. Also, Ctrl+s twice will search your
last searched word.

*** search for current word
typing C-s (for isearch) followed by C-w which searches for the current word

*** search and replace
How to findreplace?

Press Alt+% (`query-replace`). Then, emacs will prompt you for the find string and replace string. Once emacs found a match, you can press
y to replace, n to skip, or ! to do all replacement without asking. To cancel further finding, press Ctrl+g.

If you made a mistake, you can cancel by pressing Ctrl+g. If you
want to revert the findreplace you did, you can call undo by pressing
Ctrl+ .

%Tip% to search and replace in all doc either go to start of doc or press ?C-x h? (will select all doc) and the issue replace

For regex replace and detail on issues of letter cases, see:
[[http://ergoemacs.org/emacs/emacs_find_replace.html][FindReplace with
Emacs]].

 [[macsen_files/emacs_menu_replace.png]]
 Replace commands are under the menu Edit  Replace

*** append a character at end/start of each line			:Fav:
Use 'replace-regexp' for this purpose, with the '$' regexp metacharacter that matches end-of-line or '^' for start of line.

IE: Go to the start of the buffer, and then do M-x replace-regexp, and answer $ then ~yourtext~ to the two prompts.

Or, in emacs-speak:
M-x replace-regexp RET $ RET ~yourtext~ RET
 
*** insert text at specific column position
      you can write a macro that use M-g TAB 

M-g TAB allows you to go to a specific column. You could write a macro using C-x ( then type all the keysequence you want using a tool like M-g TAB, even a regexp search, then stop recording the macro by pressing C-x ) then execute your macro by C-x e repeat your macro by C-x z zzzzz
 
*** How to findreplace for all files in a dir

How to findreplace for all files in a dir?

 1.Type Ctrl+x
 and type
 dired
 2. type dir path (there is completion with tab)
 3. mark the files you want to work on (m to mark, u to unmark) in the
popup window
 4. then press Q or from the menu choose the "operate" menu and search
typeface
 5. it will ask the string to find and then ask for the string to
replace

For a detailed step-by-step tutorial,
see[[http://ergoemacs.org/emacs/find_replace_inter.html][Interactive
FindReplace String Patterns on Multiple Files]].

*** How to search the last searched string

How to search the last searched string?
 Type Ctrl+s Ctrl+s to search the same word searched last time.

*** How to search the string under cursor without typing it

How to search the string under cursor without typing it?
 Type Ctrl+s Ctrl+w to search the word under the cursor. You can
type Ctrl+w multiple times to expand the word selection.

*** How to highlight all occurrences of word in a files



How to highlight all occurrences of word in a file?

Call highlight-phrase, highlight-regexp,
highlight-lines-matching-regexp.

*** Interactively Find/Replace String Patterns on Multiple Files
http://ergoemacs.org/emacs/find_replace_inter.html

Call dired to list files in dir, or call `find-dired` if you need all subdirectories.
Mark the files you want (m) 
%Tip% You can mark by regex by typing 【% m】.
Type Q to call dired-do-query-replace-regexp.
Type your find regex and replace string. 〔➤ common elisp regex pattern〕
For each occurrence, type y to replace, n to skip. Type 【Ctrl+g】 to abort the whole operation.
Type ! to replace all occurrences in current file without asking, N to skip all possible replacement for rest of the current file. (N is emacs 23 only)
To do the replacement on all files without further asking, type Y. (Emacs 23 only)
Call ibuffer to list all opened files.
Type 【* u】 to mark all unsaved files, type S to save all marked files, type D to close them all.

`Step-by-Step Guide for Emacs Beginners`

Select Target Files
Start emacs by typing “emacs” in the command line interface prompt. (Or, double click the Emacs icon if you are in a Graphics User Interface environment)

Selecting Files in a Directory

First you need to select the files you want to do the replace. Use the graphical menu 〖File ▸ Open Directory〗. Emacs will ask you for a directory path. Type the directory path, then press Enter.

Now, you will be shown the list of files, and now you need to mark the files you want the regex find/replace to work on. You mark a file by moving the cursor to the file you want, then press m. Unmark it by pressing u. (To list subdirectories, move your cursor to the directory and press i. The sub-directory's content will be listed at the bottom.) To mark all files by a regex, type 【% m】, then type your regex pattern. For example, if you want to mark all HTML files, then type 【% m】 then \.html$. (You can find a list of the mark commands in the graphical menu “Mark” (this menu appears when you are in the dired mode).)

Selecting Files in a Directory and All Its Sub-Directories

If you want to do find/replace on files inside a directory, including hundreds of subdirectories, here's a method to select all these files.

Call find-dired. (you call a command by pressing 【Alt+x】) Then, type a directory name, ⁖ /Users/mary/myfiles

Note: if you are using emacs on a unix non-graphical text terminal, and if 【Alt+x】 does not work, the equivalent key stroke is 【Esc x】.

Emacs will ask you with the prompt “Run find (with args): ”. If you need to do the replacement on all HTML files, then type -name "*html". If you don't care about what kind of file but simply all files under that dir, then give “-type f”.

Now, mark the files as described above.

Interactive Find/Replace

Now, you are ready to do the interactive find replace. For simplicity, let's say you just want to replace the word “quick” by “super”. Now, call dired-do-query-replace-regexp. It will prompt you for the regex string and the replacement string. Type “quick”, enter, then “super”.

Now, emacs will use your pattern and check the files, and stop and show you whenever a match occurred. When this happens, emacs will prompt you, and you have a choice of making the change or skip the change. To make the change, type y. To skip, type n. If you simply want emacs to go ahead and make all such changes to the current file, type !.

If you want to cancel the whole operation without saving any changes you've made, type 【Ctrl+g】, then exit emacs using the menu 〖File ▸ Exit Emacs〗.

Saving the Changed Files

Now, after you went through the above ordeal, there is one more step you need to do, and that is saving the changed files.

If you are using emacs version 22 or later, then call ibuffer to go into a buffer listing mode, then type 【* u】 to mark all unsaved files, then type S to save them all. (that's shift-s)

If you are using a emacs version 21, then you can do this: call list-buffers, then move the cursor to the file you want to save and type s. It will mark the file for later save action. Type u to unmark. Once you are done, type x to execute the saving of all files marked for save. (in emacs, opened file is called “buffer”. Disregard other things there.)

Alternative to the above options, you can also call save-some-buffers 【Ctrl+x s】. Then emacs will display each unsaved file and ask if you want it saved.

Note: emacs's regex is not the same as Perl or Python's, but similar. For a summary and common patterns, see: Emacs Regex.

*** replace numeric with space/other
use regex search (M-C-%)
and enter this as a search pattern
[0-9]
*** flush lines (delete query regex based lines )
Emacs makes it easy to remove the answers using

M-x flush-lines  ^ANS

As it says in the documentation, flush-lines deletes lines containing matches for REGEXP (in this case all lines starting with ANS)

Use flush-lines to delete blank lines as follows:

M-x flush-lines ^$

M-x keep-lines is the inverse of flush-lines, handy if you want a sheet with the answers only

M-x how-many returns the number of occurrences of REGEXP following the point. Handy for counting how many ANS: there are.

M-x occur opens a buffer showing all lines in the current buffer containing a match for REGEXP.  See this post on stylesheets for more on this.

Lastly, map-query-replace-regexp will replace a matches for a regexp in rotation. As a simple example, suppose you want assign a group to a collection of students:

** setting (lisp)
*** setting common variables at once (setq)

setq can set multiple variables at once. For example, in my .emacs file
on OS X I have:
 (setq mac-command-modifier 'meta
 mac-option-modifier 'super)
 
** text tricks
*** How to add a prefix to every line? (such as # or //

How to add a prefix to every line? (such as # or //)
 Mark Ctrl+Space the beginning of first line and move cursor to the
beginning of the last line, then type Ctrl+x r t (string-rectangle),
then type what you want to insert. This command can be used to insert a
vertical column of string across mulitple lines at any column position,
not just at the beginning of lines.

*** How to delete the first few n chars of every line

Mark Ctrl+Space the beginning of first line and move cursor to the
last line, and move it to the right n chars. Then type Ctrl+x r k
(kill-rectangle). This command can be used to delete any rectangular
block of text, not just at the beginning of lines.

*** Working with Lines



Emacs has a very useful command list-matching-lines. Try it. Call it
Alt+x, then, give a word. Emacs will list all lines of current file
containing that word.

You can click on any matched line in the output, then emacs will put
cursor at the position of the occurrence in your file.

There are also several other line processing commands for the current
buffer that i use often:

-  list-matching-lines (this is a alias to occur)
-  delete-matching-lines (this is a alias to flush-lines)
-  delete-non-matching-lines (this is a alias to keep-lines)
-  sort-lines
-  sort-numeric-fields
-  reverse-region
-  highlight-lines-matching-regexp

If you use them often, you can give them a key such as F8, or alias such
as "sl" for sort-lines. See:
[[http://ergoemacs.org/emacs/keyboard_shortcuts.html][How to Define
Keyboard Shortcuts]] 
[[http://ergoemacs.org/emacs/emacs_alias.html][Defining Alias to
Increase Productivity]].

 Delete Starts at Cursor Position or Text Selection

delete-matching-lines and delete-non-matching-lines starts at the line
your cursor is on.

Also, if you have a text selection, the deletion happens in the text
selection only.

 
 Letter Case Sensitivity

In all these commands, if your search word contains upper case letters,
then the search is automatically case sensitive. Otherwise, it is not
case sensitive.

If you want the cases to be case sensitive (what you typed exactly),
call toggle-case-fold-search.



How to sort lines?
 Call sort-lines. Call reverse-region to reverse order in region by
lines.
 To sort lines by a specific column, use sort-fields or
sort-numeric-fields. (fields? are separated by space or tabs. First
field is 1, not 0.)
 For example: Type ?Ctrl+u, then 2, then ?Alt+x sort-field .
This will sort the line by the 2nd column, and the fields are compared
as strings.

*** sorting
**** sorting lines
How to sort lines?
mark (V in evil mode) the region you want and issue sort-lines

?C-x? `Sort-lines`
you can call reverse-region to reverse order in region by lines.
To sort lines by a specific column, use 'sort-fields' or sort-numeric-fields. ("fields" are separated by space or tabs. First
field is 1, not 0.)

*** How to delete trailing white spaces in source code?

How to delete trailing white spaces in source code?
Call delete-trailing-whitespace does it to the whole buffer.
*** year increment

1. Eval the snippet below or if you have it in your config file (like I do) just call on it 

2. it will ask you which buffer the code you want to copy and change is: name the buffer at this stage

3. it will ask for a year in 2 digits (yy) for the max year from 2000
%Tip-you can change 2000 in the snippet if needed)%

3.The resulting process will open a all-code buffer with the results

#+BEGIN_SRC emacs-lisp :results none 
(defun take-code-in-a-buffer-and-change-the-year-and-magic-happens (buffer max-year)
  (interactive "b\nsMax year (yy): ")
  (setq max-year (string-to-number max-year))
  (let ((year 2000)
        (newbuf (get-buffer-create "all code")))
    (let ((s (with-current-buffer buffer
               (buffer-substring (point-min) (point-max)))))
      (dotimes (n (1+ max-year))
        (with-current-buffer newbuf
          (goto-char (point-max))
          (insert "\n")
          (insert (replace-regexp-in-string (int-to-string year)
                                            (int-to-string (+ year n))
                                            s)))))
    (switch-to-buffer newbuf)))
#+END_SRC

also one can try sed:
 for i in $(seq 2000 2015); do sed 
 s/2000/$i/g myinput > userinput_$i ; done                                                    
*** create a horizonatl/vertical list
Press and hold Enter to create several empty lines.
Now, select those empty lines.
Call ~rectangle-number-line~
it'll insert verticak numbers.
Now to create horizontal numbers, just select the region, and call ~fill-region~, to compact them.
*** replace all signs with empty space but EXCLUDE org headlines
paste the elisp code on the first line and eval it.

#+BEGIN_SRC emacs-lisp :results none
(while (search-forward "*" nil t) (when (save-match-data (not(org-at-heading-p))) (replace-match "")))
#+END_SRC

#+END_EXAMPLE
** view
*** How to make spaces and tabs visible?

Call whitespace-mode, available in emacs 23.

*** colors

Colors
 To view the many colors and their hexadecimal values in RGB model, type
Alt+x list-colors-display. This is very useful when you work in
HTML.
 emacs showing colors
 [[macsen_files/Image_smb9wkhN26y70CiVCOfIXQ_0001.png]]

*** Displaying Line Numbers and Column Number

How to show line numbers?
 You can have line numbers displayed in the left vertical margin. To
turn it on, call linum-mode. To have it on by default, put the following
in your emacs init file:
 (global-linum-mode 1) ; display line numbers in margin. Emacs 23 only.
 How to show the cursor's column position?
 Call column-number-mode. After you turned it on, the cursor's line
position and column position will show in the status bar, like this:
(166,3). The first is line number, the second is position from the
beginning of line.
 To always have it on, put the following code in your emacs init file.
 (column-number-mode 1)

*** How to have lines soft wrapped at word boundary



How to have lines soft wrapped at word boundary?

Pull the menu Options  Line Wrapping in this Buffer, or call
visual-line-mode.

 [[macsen_files/emacs23_word_wrap.png]]

To toggle globally, call global-visual-line-mode. To set it on or off
permanently, use:

 (global-visual-line-mode 1) ; 1 for on, 0 for off.

*** How to set the spacing between lines

How to set the spacing between lines?
 Put the following elisp code in your emacs init file for easy toggle.
 (defun toggle-line-spacing ()
 "Toggle line spacing between no extra space to extra half line
height."
 (interactive)
 (if (eq line-spacing nil)
 (setq-default line-spacing 0.5) ; add 0.5 height between lines
 (setq-default line-spacing nil) ; no extra heigh between lines
 )
 (redraw-display))
 This is useful for switching between reading source code and reading
novels.
 Note that the spacing height between lines also depends on font

*** wrap
**** disable wrap

How to make lines NOT wrap?
 Use the menu Options  Truncate Long Lines in this Buffer.
 Or
 call toggle-truncate-lines.

**** How to have lines soft wrapped at word boundary



How to have lines soft wrapped at word boundary?

Pull the menu --Options -- Line Wrapping in this Buffer---, or
call visual-line-mode.

 [[./distros_files/img/emacs23_word_wrap.png]]

To toggle globally, call global-visual-line-mode. To set it on or off
permanently, use:

 (global-visual-line-mode 1) ; 1 for on, 0 for off.

** Read Only 
*** to make current file 'read only'
issue:
?C-x C-q?

M-x `read-only-mode`

or

M-x `toggle-read-only`
*** to mark a file permanently 'read only'
add this as the 'last' line of the file!

#+BEGIN_SRC emacs-lisp :results none
Local variables:
buffer-read-only: t
End:
#+END_SRC

*** read only by filename extension
another way is to set emacs to open some file read only by filename extension

₆In example₆:

#+BEGIN_SRC sh
add-to-list 'auto-mode-alist '("\\.txt\\'" . read-only-mode))﻿ 
#+END_SRC
*** Read only hook for orgmode (using viewer-mode)
add this to your config
#+BEGIN_SRC emacs-lisp :results none
(add-hook 'org-mode-hook (lambda () (view-mode 1)))
#+END_SRC
*** make portion of buffer readonly
you can make a portion of a buffer read-only using text properties. The code below defines two new commands make-region-read-only and make-region-read-write that affect the region between point and mark. Put the code in your .emacs file to make the commands available via Meta-x

#+BEGIN_SRC emacs-lisp :results none
(defun make-region-read-only (start end)
  (interactive "r")
  (let ((inhibit-read-only t))
    (put-text-property start end 'read-only t)))

(defun make-region-read-write (start end)
  (interactive "r")
  (let ((inhibit-read-only t))
    (put-text-property start end 'read-only nil)))
#+END_SRC 

*** `orgmode read only`
to make some org-sections read-only

$Note- you !MUST! tag the header :read_only: other wise it wont work$ 
use the following functions on the header (again after you tag it as read only)

#+BEGIN_SRC emacs-lisp :results none
(defun org-mark-readonly ()
(interactive)
(org-map-entries
(lambda ()
(let ((element (org-element-at-point))
(begin (org-element-property :begin element))
(end (org-element-property :end element)))
(add-text-properties begin (- end 1) '(read-only t
font-lock-face '(:background "#FFE3E3")))))
"read_only")
(message "Made readonly!"))
(defun org-remove-readonly ()
(interactive)
(org-map-entries
(lambda ()
(let ((element (org-element-at-point))
(begin (org-element-property :begin element))
(end (org-element-property :end element))
(inhibit-read-only t))
(remove-text-properties begin (- end 1) '(read-only t font-lock-face '(:background "yellow")))))
"read_only"))
(add-hook 'org-mode-hook 'org-mark-readonly)
#+END_SRC

** Emacs web browser
To start the web browser, call 'eww'

How to open a new url: Just call eww again.

How to open a local HTML file: Call eww-open-file.

How to switch to a real browser: Call eww-browse-with-external-browser.

** mu4e
*** keybinds
**** composing emails
key          description
---          -----------
C-c C-c      send message
C-c C-d      save to drafts and leave
C-c C-k      kill the message
C-c C-a      attach a file (pro-tip: drag & drop works as well)
R Reply
(mu4e-specific)
C-S-u        update mail & reindex
*** attachments
http://www.djcbsoftware.nl/code/mu/mu4e/Opening-and-saving-attachments.html

By default, mu4e uses the xdg-open-program for opening attachments. 

If you want to use another program, you do so by setting the MU_PLAY_PROGRAM environment variable to the program to be used.

The default directory for extracting (saving) attachments is your home directory (~/); you can change this using the variable mu4e-attachment-dir, for example:

#+BEGIN_SRC emacs-lisp
(setq mu4e-attachment-dir  "~/Downloads")
#+END_SRC

For more flexibility, mu4e-attachment-dir can also be a user-provided function. This function receives two parameters: the file-name and the mime-type as found in the e-mail message27 of the attachment, either or both of which can be nil. For example:

#+BEGIN_SRC emacs-lisp
(setq mu4e-attachment-dir
  (lambda (fname mtype)
    (cond
      ;; docfiles go to ~/Desktop
      ((and fname (string-match "\\.doc$" fname))  "~/Desktop")
      ;; ... other cases  ...
      (t "~/Downloads")))) ;; everything else
#+END_SRC

You can extract multiple attachments at once by prefixing the extracting command by C-u:
so 【C-u e】 asks you for a range of attachments to extract (for example, 1 3-6 8). 
The range "‘a’" is a shortcut for all attachments.
*** installing
****  install from git
Alternatively, if you build from the git repository or use a tarball like the ones that github produces, the instructions are slightly different, and require you to have autotools (Autoconf, Automake, Libtool, and friends) installed:
#+BEGIN_SRC sh

# get from git (alternatively, use a github tarball)
$ git clone git://github.com/djcb/mu.git

$ cd mu
$ autoreconf -i && ./configure && make
# On the BSDs: use gmake instead of make
$ sudo make install

#(Xapian, GMime and their dependencies must be installed)- see ubuntu example below

#+END_SRC
After this, mu and mu4e should be installed 18 on your system, and be available from the command line in emacs.

You may need to restart emacs, so it can find mu4e in its load-path. If, even after restarting, emacs cannot find mu4e, you may need to add it to your load-path explicitly; check where mu4e is installed, and add something like the following to your configuration before trying again:

#+BEGIN_EXAMPLE
;; the exact path may differ -- check it
(add-to-list 'load-path "/usr/local/share/emacs/site-lisp/mu4e")
#+END_EXAMPLE

**** debian dependencies
Dependencies for Debian/Ubuntu

#+BEGIN_SRC sh

$ sudo apt-get install libgmime-2.6-dev libxapian-dev
# if libgmime-2.6-dev is not available, try libgmime-2.4-dev

# get emacs 23 or 24 if you don't have it yet
$ sudo apt-get install emacs24

# optional
$ sudo apt-get install guile-2.0-dev html2text xdg-utils

# optional: only needed for msg2pdf and mug (toy gtk+ frontend)
$ sudo apt-get install libwebkit-dev
#+END_SRC
** wanderlust
*** setup
**** init.el
%this step is optional%
set should write to init.el is
#+BEGIN_SRC emacs-lisp :results none
(autoload 'wl "wl" "Wanderlust" t)
(autoload 'wl-draft "wl" "Write draft with Wanderlust." t)
#+END_SRC

**** .wl

$Note-you can skip the use of a .wl file and have all the wl config in the emacs.d etc files$ 

We want to create a .wl to HOME below. This file EmacsWiki quote from
#+BEGIN_SRC emacs-lisp :results none

;; IMAP, gmail:
(setq elmo-imap4-default-server "imap.gmail.com"
      elmo-imap4-default-user "username@gmail.com"
      elmo-imap4-default-authenticate-type 'clear
      elmo-imap4-default-port '993
      elmo-imap4-default-stream-type 'ssl

      ;;for non ascii-characters in folder-names
      elmo-imap4-use-modified-utf7 t)

;; SMTP
(setq wl-smtp-connection-type 'starttls
      wl-smtp-posting-port 587
      wl-smtp-authenticate-type "plain"
      wl-smtp-posting-user "username"
      wl-smtp-posting-server "smtp.gmail.com"
      wl-local-domain "gmail.com"
      wl-message-id-domain "smtp.gmail.com")

(setq wl-from "Firstname Lastname <username@gmail.com>"

      ;;all system folders (draft, trash, spam, etc) are placed in the
      ;;[Gmail]-folder, except inbox. "%" means it's an IMAP-folder
      wl-default-folder "%inbox"
      wl-draft-folder   "%[Gmail]/Drafts"
      wl-trash-folder   "%[Gmail]/Trash"
      wl-fcc            "%[Gmail]/Sent"

      ;; mark sent messages as read (sent messages get sent back to you and
      ;; placed in the folder specified by wl-fcc)
      wl-fcc-force-as-read    t

      ;;for when auto-compleating foldernames
      wl-default-spec "%")
#+END_SRC
**** .folders
***** basic syntax
So, that was the basic setup. Now we need to tell wanderlust about the folders we'd like to see in the user-interface: ~/.folders. Wanderlust does not automatically use all the folder in your ~/Maildir. The folder names in ~/.folders can refer to maildirs, newsgroups, POP-account, IMAP-folders and a couple of other ones. In particular, you can combine folders to show as aggregate folders in Wanderlust.

Wanderlust distinguishes the kind of folder something is by looking at a special prefix character. For maildirs, this is a dot ('.'), IMAP-folders get a '+', newsgroups get a '-' and so on. After the mailbox name, you can have a 'friendly name' in quotes, which is what will show up in the user-interface.

Wanderlust distinguishes the kind of folder something is by looking at a special prefix character. For maildirs, this is a dot ('.'), IMAP-folders get a '+', newsgroups get a '-' and so on. After the mailbox name, you can have a 'friendly name' in quotes, which is what will show up in the user-interface.


Something like this:

#+BEGIN_EXAMPLE
# WL folders (put the '#' always at the beginning of the line)
.inbox     "Inbox"
.bulk      "Mailinglists"
.drafts    "Drafts"
.sent      "Sent Mail"
.trash     "Junk
#+END_EXAMPLE


Note, the little format has some more tricks; e.g., if you had some folders, you cold have something like:
#+BEGIN_EXAMPLE
# WL folders (put the '#' always at the beginning of the line)
# 'Lists' will be a tree node with three elements
Lists {
        .mailinglist1 "A mailinglist"
        .mailinglist2 "Another Mailinglist" 
        .mailinglist3 "Yet one more mailinglist"
}

# you make virtual folders from combined lists with the '*'
AllMyMailingLists  *.mailinglist1,.mailinglist2,.mailinglist3
#+END_EXAMPLE
***** setup with gmail using straight IMAP 
example:
make a file:~/.folders and put the following

#+BEGIN_SRC emacs-lisp :results none
GMAIL{
   %INBOX:ikloog/clear@imap.gmail.com:993!         "Inbox"
   %[Gmail]/Sent:ikloog/clear@imap.gmail.com:993!  "Sent"
   %[Gmail]/Draft:ikloog/clear@imap.gmail.com:993! "Draft"
   %[Gmail]/Trash:ikloog/clear@imap.gmail.com:993! "Trash"
   }
#+END_SRC
***** setup using offlineimap

Wanderlust *does not* automatically use all the folder in your ~/Maildir. 
to use it with offlineimap and maildir you need to "map" the exact name (case sensitive) of the folder in your file:/home/zeltak/Maildir
also each folder for MAILDIR config in wl has to be preceded with a .

so a folder names INBOX will be .INBOX

#+BEGIN_SRC emacs-lisp :results none
.INBOX     "Inbox"
.Drafts    "Drafts"
.Starred   "Star"
.Sent      "Sent Mail"
#+END_SRC
**** How to use
First, you can start with the Mx wl.
**** cache  items
cached items go locally to ~/.elmo/cache.
**** attachment
M-x mime-edit-insert-file RET and answer some questions (file name, content type and subtype and transfer encoding). Encoding base64 seems to work. Then don’t touch the text that is added to your message. When you send the mail, the file will be included.
** Terminals
*** ansi term 
refixing actions that aren’t recognized by their standard key commands with ‘C-x’. For example, ‘M-x’ becomes ‘C-x M-x’.
* 'org-mode'
  :PROPERTIES:
  :ID:       be4759e1-2951-4c91-a155-056bc2a16d9f
  :END:
** `Mobile org`
*** Setup in emacs
**** Setting up the staging area on the PC (Server)
The easiest way to create that directory is to use a free Dropbox.com account. When MobileOrg first connects to your Dropbox, it will create a directory MobileOrg inside the Dropbox. After the directory has been created, tell Emacs about it:

#+BEGIN_SRC emacs-lisp 
(setq org-mobile-directory "~/Dropbox/MobileOrg")
#+END_SRC

the mobile-org android app will put all the captured syncs in that folder under this file:

file:/home/zeltak/Dropbox/MobileOrg/mobileorg.org
!Note! above file may be empty!
!Note2! the captures disappears from the mobile app after sync and are transferred to the above file

the second step involves telling org-mode where to transfer the 'pulled' files to (after issues a org-mobile-pull) ,that is from the mobileorg.org file to the file defined here:

#+BEGIN_SRC sh
;; Set to file where pulled files will be stored
(setq org-mobile-inbox-for-pull "~/org/files/from-mobile.org")
#+END_SRC

the third thing to check is that the file(s) are defined (and put in the dir) as agenda files which would also be synced
in your emacs config check the relevant agenda section, In Example

#+BEGIN_SRC emacs-lisp :results none
;;For agenda files locations, each location you add within " "
(setq org-agenda-files '("~/org/files/agenda/"))
#+END_SRC

**** Pushing to MobileOrg

This operation:

'org-mobile-push'

(can be launched through gui menu as well) copies all files currently listed in either/or `org-agenda-files`  and `org-mobile-files`
!thats is! you can use one of them or both in your org-mobile config. 

#+BEGIN_SRC emacs-lisp :results none
;;For agenda files locations, each location you add within " "
(setq org-agenda-files '("~/org/files/agenda/"))

;;For mobile org files locations, each location you add within " "
(setq org-mobile-files '("~/org/files/mobileorg/"))
#+END_SRC

to the directory

`org-mobile-directory`.

By default this list contains all agenda files (as listed in `org-agenda-files`), but additional files can be included by customizing `org-mobile-files`.

File names will be staged with paths relative to org-directory, so all files should be inside this directory.
The push operation also creates a special Org file file:agendas.org with all custom agenda view defined by the user.
Finally, Org writes the file file:index.org, containing links to all other files.
MobileOrg first reads this file from the server, and then downloads all agendas and Org files listed in it. To speed up the download, MobileOrg will only read files whose checksums have changed.

**** Pulling from MobileOrg

When MobileOrg synchronizes with the server, it not only pulls the Org files for viewing. It also appends captured entries and pointers to flagged and changed entries to the file mobileorg.org on the server. Org has a pull operation that integrates this information into an inbox file and operates on the pointers to flagged entries. Here is how it works:

1. Org moves all entries found in `mobileorg.org`

file:/home/zeltak/Dropbox/MobileOrg/mobileorg.org

and appends them to the file pointed to by the variable `org-mobile-inbox-for-pull` Each captured entry and each editing event will be a top-level entry in the inbox file.

2.After moving the entries, Org will attempt to implement the changes made in MobileOrg. Some changes are applied directly and without user interaction. Examples are all changes to tags, TODO state, headline and body text that can be cleanly applied. Entries that have been flagged for further action will receive a tag :FLAGGED:, so that they can be easily found again. When there is a problem finding an entry or applying the change, the pointer entry will remain in the inbox and will be marked with an error message. You need to later resolve these issues by hand.

3.Org will then generate an agenda view with all flagged entries. The user should then go through these entries and do whatever actions are necessary. If a note has been stored while flagging an entry in MobileOrg, that note will be displayed in the echo area when the cursor is on the corresponding agenda line.

Pressing ? in that special agenda will display the full flagging note in another window and also push it onto the kill ring. So you could use ? z C-y C-c C-c to store that flagging note as a normal note in the entry. Pressing ? twice in succession will offer to remove the :FLAGGED: tag along with the recorded flagging note (which is stored in a property). In this way you indicate that the intended processing for this flagged entry is finished. 

If you are not able to process all flagged entries directly, you can always return to this agenda view2 using C-c a ?.
**** Automated push/pull
use this in your init file:

The code below will check if an org file that was saved is in the mobile agenda list and if it is the case it will set an idle timer to schedule a sync 30 seconds in the future. This will make it possible to do a chain of edits in several file, resulting in Emacs running push only once after it has been idle for the specified number of seconds.

#+BEGIN_SRC emacs-lisp :results none
(defvar org-mobile-push-timer nil
  "Timer that `org-mobile-push-timer' used to reschedule itself, or nil.")

(defun org-mobile-push-with-delay (secs)
  (when org-mobile-push-timer
    (cancel-timer org-mobile-push-timer))
  (setq org-mobile-push-timer
        (run-with-idle-timer
         ( 1 secs) nil 'org-mobile-push)))

(add-hook 'after-save-hook 
 (lambda () 
   (when (eq major-mode 'org-mode)
     (dolist (file (org-mobile-files-alist))
      (if (string= (file-truename (expand-file-name (car file)))
		   (file-truename (buffer-file-name)))
           (org-mobile-push-with-delay 30)))
   )))

(run-at-time "00:05" 86400 '(lambda () (org-mobile-push-with-delay 1))) ;; refreshes agenda file each day

#+END_SRC

*** Setup android
**** Initial Setup
1.make sure you finished the previous emacs setup on the pc
!Important NOTE If you are a Windows user, you will need to have md5sum.exe or sha1sum.exe in your system path before org-mobile-push will succeed!
%TIP:you can use MobileOrg from Locale or Tasker by looking under their Plugins sections. These will be available immediately after MobileOrg is installed%
%If this file does not exist when you try to sync, MobileOrg will attempt to create it%

**** setup backend and initial sync
When you first start MobileOrg you will be presented with a setup Wizard. You can use this wizard to set up any of the basic Synchronizer, but dropbox works best and is easy to setup.
@WARNING:make sure you have the dropbox app installed on your android system before this@

after you setup the backend configure the folder (Mobileorg, may be created if missing by app) and then sync for first time:
the files that were pushed form emacs-orgmode should appear on the phone.

%Tip-Notes are appended to the end of the mobileorg.org file%

**** Setting up Android Calendar Integration
MobileOrg can synchronize your TODO items that have a DEADLINE or SCHEDULE element to your Android calendar. This also allows you to synchronize your org tasks into your Google Calendar.
Set up

First, create a calendar in Google calendar that will hold these entries. You can do this at: Google Calendar
Visit the calendar settings section of the MobileOrg preferences

Choose the calendar you want to sync with. It is recommended you clear your database after setting this to make sure all of your org files are pulled to the device. MobileOrg will examine org files as they are synced to the device and any new or updated items will be added to the Calendar
*** Org mode TODO from cellphone
Software needed:

-IFTTT
-Linux shell
-Dropbox

What to do:

3.1 Connect your Dropbox account to IFTTT
3.2 Use this recipe to register your notes in a .txt file

https://ifttt.com/recipe_embed_use/235317-add-todo-to-a-orgmode-file

3.3 Use a linux script to copy the notes to your org file

#+BEGIN_SRC sh
#!/bin/bash
cat ~/Dropbox/ifttt/Email/mobile_todo.txt >> ~/Dropbox/org/notes.org
cat /dev/null > ~/Dropbox/ifttt/Email/mobile_todo.txt
#+END_SRC

*** Using Mobileorg
**** Where do captures go after a sync?
Notes are appended to the end of the file:mobileorg.org file on your 'dropbox/WebDAV/etc' server. 

If this file does not exist when you try to sync, MobileOrg will attempt to create it.

It is generally NOT recommended to reference mobileorg.org as a link from your index.org file.

When you get back to your desktop computer, you can refile your captured notes into your primary Org-mode files by following these steps:

1.In Emacs, initiate a pull by typing 'M-x org-mobile-pull' RET

2.The notes you captured in the 'MobileOrg' app will be appended to a file:

[[file:~/org/files/from-mobile.org]]

in your default org directory (variable org-directory). You may specify a different file and location by explicitly setting the variable 

#+BEGIN_EXAMPLE
org-mobile-inbox-for-pull
#+END_EXAMPLE

3.Refile your notes by switching to the from-mobile.org buffer, and using C-c C-w

4.!Note! that the changes you made to existing outline nodes will simply be automatically applied by the org-mobile-pull function. Those changes will only appear in from-mobile.org if they could not be applied (e.g., if the target Org-file changed so much that the context can no longer be located)

**** 'sync notes'
just add the notes you want to be synced to your agenda folder (copy manually)
the agenda folder is defined in the org config:
#+BEGIN_SRC sh
;;For agenda files locations, each location you add within " "
(setq org-agenda-files '("~/org/files/agenda/"))
#+END_SRC

** startup
*** startup options
**** Initial visibility
Initial visibility

When Emacs first visits an Org file, the global state is set to OVERVIEW, i.e., only the top level headlines are visible1. This can be configured through the variable org-startup-folded, or on a per-file basis by adding one of the following lines anywhere in the buffer:

#+BEGIN_EXAMPLE
     #+STARTUP: overview
     #+STARTUP: content
     #+STARTUP: showall
     #+STARTUP: showeverything
#+END_EXAMPLE

The startup visibility options are ignored when the file is open for the first time during the agenda generation: if you want the agenda to honor the startup visibility, set org-agenda-inhibit-startup to nil.

Furthermore, any entries with a ‘VISIBILITY’ property (see Properties and Columns) will get their visibility adapted accordingly. Allowed values for this property are folded, children, content, and all.

C-u C-u <TAB>     (org-set-startup-visibility)
Switch back to the startup visibility of the buffer, i.e., whatever is requested by startup options and ‘VISIBILITY’ properties in individual entries.

** BASE
*** Manual
To read the on-line documentation try:
?M-x org-info ?
*** Install
**** Using Emacs packaging system from org repp (RECOMMENDED WAY)
orgmode.org hosts Org ELPA archives.

Add this to your Emacs init file to be able to list the Org mode archives:

#+begin_src emacs-lisp
(require 'package)
(add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
#+end_src

Then M-x list-packages RET will list both the latest` org` and `org-plus-contrib` packages.
!you need to install both!

org-contains the same set of files that are included in GNU Emacs.
org-plus-contrib- contains these files plus all contribs files, the ones you find in contrib/ from the git repo.       
**** install from Git
 You can clone Org's repository and install Org like this:

 #+BEGIN_EXAMPLE
 cd ~/.emacs.d/src/org-mode/
 git clone git://orgmode.org/org-mode.git
 make autoloads
 #+END_EXAMPLE

 Note that in this case, =make autoloads= is mandatory: it defines Org's
 version in org-version.el and Org's autoloads in org-loaddefs.el.

 Remember to add the correct load-path as described in the method above.

 You can also compile with =make=, generate the documentation with
 =make doc=, create a local configuration with =make config= and install
 Org with =make install=. Please run =make help= to get the list of
 compilation/installation options.

 For more detailed explanations on Org's build system, please check the
 Org Build System page on
 [[http://orgmode.org/worg/dev/org-build-system.html][Worg]].

to update :
 #+BEGIN_EXAMPLE 
 cd ~/.emacs.d/src/org-mode/
 git pull 
 make autoloads
 #+END_EXAMPLE
**** Downloading Org as an archive					:Fav:
You can download Org latest release from [[http://orgmode.org/][Org's website]] and simply extract them to where you want, in my case

file:/home/zeltak/.emacs.d/nonelpa/org

Also in first install make sure you set the load-path correctly in your .emacs:

#+BEGIN_SRC lisp
(add-to-list 'load-path "~/path/to/orgdir/lisp")
#+END_SRC

The downloaded archive contains contributed libraries that are not included in Emacs. If you want to use them, add the contrib directory to
your load-path:

#+BEGIN_SRC lisp
(add-to-list 'load-path "~/path/to/orgdir/contrib/lisp" t)
#+END_SRC
** table 
*** find which row/column your in
The easiest way to learn about references is to type C-c ? while you are in a field.

For example, if you are in the [Formula] field, C-c ? will tell you: line @2, col $4, ref @2$4 or D2, meaning that you are on the second row (or line) of the fourth column, and the reference for this field is either @2$4 or D2.

At any moment, if you are lost in rows and columns, you can always turn on the reference visualization grid with C-c }:
*** base formula creation 
Put the cursor in the (empty) [Formula] field. Now type :=vmean($2..$3) in this field. This formula means: calculate the mean for fields from the second ($2) to the third ($3) field in this row. If you prefer to use the other notation, type :=vmean(B&..C&) – where the & character stands for "in this row", which is implicit in the previous notation.

While still in the row, hit C-c C-c – you should observe two things: 1) the formula has been replaced by the result of the calculation and 2) a new line starting with #+TBLFM has been inserted at the bottom of the table.

The #+TBLFM line contains all the formulas for the table above, and you should be careful while editing it manually.

*** example for sum rows (lines)

#+BEGIN_EXAMPLE
| name   | expense |   total |
| Eshel  | 74*8    |     592 |
| Flight |         |  396.56 |
| Hotel  |         |  679.45 |
| travel |         |     180 |
| total  |         | 1848.01 |
|        |         |         |
#+TBLFM: @6$3=vsum(@2..@5)
#+END_EXAMPLE
here we sum all expenses in each name line

*** Column formulas and field formulas

Ok, so now we have this table:

| Student  | Maths | Physics | Mean |
|----------+-------+---------+------|
| Bertrand |    13 |      09 |   11 |
| Henri    |    15 |      14 |      |
| Arnold   |    17 |      13 |      |
#+TBLFM: @2$4=vmean($2..$3)
But what we really want is to compute the formulas for all fields in the column named "Mean". In other words, we really want a column formula, not a field formula.

To replace the formula with a column formula, go back to the field where it has been defined and type =vmean($2..$3). Note that the only difference with what you've inserted previously is that the formula is prefixed by = instead of :=. When you're done, do a C-c C-c in the field: you should be prompted whether you want to replace the formula with a column formula, which is precisely what we want.

Once you agree with this, the value in the field should be the same than before (namely 11) and you can now update all the fields in this column by reapplying all formulas with C-u C-c * (or C-c C-c if you're on the #+TBLFM line.)

So now we have this table:

| Student  | Maths | Physics | Mean |
|----------+-------+---------+------|
| Bertrand |    13 |      09 |   11 |
| Henri    |    15 |      14 | 14.5 |
| Arnold   |    17 |      13 |   15 |
#+TBLFM: $4=vmean($2..$3)
As our single formula in #+TBLFM now applies to the entire column, it doesn't contain any reference to a row. The formula was previously applied for the @2$4 field, and it is now applied for the $4 column.

Finally, we can add the row for the means per discipline. This row contains two field formulas, each one calculating the mean for the fields above in the same column:

| Student  | Maths | Physics | Mean |
|----------+-------+---------+------|
| Bertrand |    13 |      09 |   11 |
| Henri    |    15 |      14 | 14.5 |
| Arnold   |    17 |      13 |   15 |
|----------+-------+---------+------|
| Means    |    15 |      12 |      |
#+TBLFM: $4=vmean($2..$3)::@5$2=vmean(@2$2..@4$2)::@5$3=vmean(@2$3..@4$3)
Which brings up this table:

Student	Maths	Physics	Mean
Bertrand	13	09	11
Henri	15	14	14.5
Arnold	17	13	15
Means	15	12	 

** file wide definitions 
*** Categories
The category is a broad label assigned to each agenda item. By default, the category is simply derived from the file name, but you can also specify it with a special line in the buffer, like this1:

#+BEGIN_EXAMPLE
#+CATEGORY: Thesis
#+END_EXAMPLE
If you would like to have a special CATEGORY for a single entry or a (sub)tree, give the entry a :CATEGORY: property with the special category you want to apply as the value.

The display in the agenda buffer looks best if the category is not longer than 10 characters.

You can set up icons for category by customizing the org-agenda-category-icon-alist variable.
** archiving
*** base
use the following lines in your config to define where the archives go
#+BEGIN_SRC sh
(setq org-archive-location (concat org-directory "archive/%s_archive::"))
#+END_SRC

then to archive issue:
C-c C-x C-a     (org-archive-subtree-default)

Archive the current entry using the command specified in the variable org-archive-default-command
** agenda and TODO
*** Agenda
    :PROPERTIES:
    :ID:       cf2c69b4-3d4c-4f81-a01d-bbbe1d120e62
    :END:
http://orgmode.org/worg/org-tutorials/org-custom-agenda-commands.html

**** How can I limit the agenda view to a particular category?
Another way to filter agenda views by type of work is to use a "#+CATEGORY" declaration at the top of each file, such as:

#+BEGIN_EXAMPLE
#+CATEGORY: work
#+END_EXAMPLE

Categories can also be added to individual headings within a file:

#+BEGIN_EXAMPLE
Big project
  :PROPERTIES:
  :CATEGORY: work
  :END:
#+END_EXAMPLE

All todos belonging to the category "work" can be found a with a simple tags-todo search:

~C-c a M~

At the prompt, type:

#+BEGIN_EXAMPLE
CATEGORY="work"
#+END_EXAMPLE

The same results can be achieved with custom agenda commands, such as:

#+BEGIN_SRC emacs-lisp :results none
(setq org-agenda-custom-commands
      '(("h" tags-todo "CATEGORY=\"home\"")
        ("w" tags-todo "CATEGORY=\"work\"")
        ;; other custom agenda commands here
        ))
#+END_SRC

**** How can I limit the agenda view to my "work" tasks?

It is often convenient to group org files into separate categories, such as "home" and "work" (or "personal" and "professional"). One of the main reasons for such classification is to create agenda views that are limited by type of work or area of responsibility. For instance, while at work, one may want to see only professional tasks; while away from work, one may want to see only personal tasks.

One way to categorize files and tasks is to use a "#+FILETAGS" declaration at the top of each file, such as:

#+BEGIN_EXAMPLE
#+FILETAGS: work
#+END_EXAMPLE

As long as org-use-tag-inheritance is turned on, the filetags will be inherited by all tasks in the file. A file can have multiple filetags. And, of course, tags can be added to individual headings.

Tasks can be quickly filtered by tag from within the agenda by typing "/" and the name of the tag. The full key sequence to filter for work items in an agenda view would be:

~C-c a a / work~  
[or a tag shortcut]

**** sample custom agenda command
#+BEGIN_SRC emacs-lisp :results none
(setq org-agenda-custom-commands 
      '(("c" "Desk Work" tags-todo "computer" ;; (1) (2) (3) (4)
         ((org-agenda-files '("~/org/widgets.org" "~/org/clients.org")) ;; (5)
          (org-agenda-sorting-strategy '(priority-up effort-down))) ;; (6)
         ("~/computer.html")) ;; (7)
        ;; ...other commands here
        ))
#+END_SRC
where:

#+BEGIN_EXAMPLE
The first line in this custom command contains:
(1) the key to trigger the search ("c")
(2) a description of the search for the agenda dispatcher ("Desk Work")
(3) the type of search (todo items matching a tag)
(4) the tag to search for ("computer")
(5) set local options for this agenda command only. Any options you set here will not interfere with your global agenda settings. In this particular command, the files widgets.org and clients.org will be searched
(6) the agenda display will sort the todos first by priority (highest priority last), then by estimated effort (highest effort first)—regardless or your global org-agenda-sorting-strategy.
(7) specifies that this agenda view should be exported as HTML to "~/computer.html" when the agenda export function is called (C-c a e)        
#+END_EXAMPLE
**** comprehensive options
#+BEGIN_SRC emacs-lisp :results none
(setq org-agenda-custom-commands
           '(("x" agenda)
             ("y" agenda)
             ("w" todo "WAITING")
             ("W" todo-tree "WAITING")
             ("u" tags "+boss-urgent")
             ("v" tags-todo "+boss-urgent")
             ("U" tags-tree "+boss-urgent")
             ("f" occur-tree "\\<FIXME\\>")
             ("h" . "HOME+Name tags searches") ; description for "h" prefix
             ("hl" tags "+home+Lisa")
             ("hp" tags "+home+Peter")
             ("hk" tags "+home+Kim")))
#+END_SRC

The initial string in each entry defines the keys you have to press after the dispatcher command C-c a in order to access the command. Usually this will be just a single character, but if you have many similar commands, you can also define two-letter combinations where the first character is the same in several combinations and serves as a prefix key1. The second parameter is the search type, followed by the string or regular expression to be used for the matching. The example above will therefore define:

#+BEGIN_EXAMPLE
C-c a x
    as a global search for agenda entries planned2 this week/day.
C-c a y
    as a global search for agenda entries planned this week/day, but only those with an hour specification like [h]h:mm—think of them as appointments.
C-c a w
    as a global search for TODO entries with ‘WAITING’ as the TODO keyword
C-c a W
    as the same search, but only in the current buffer and displaying the results as a sparse tree
C-c a u
    as a global tags search for headlines marked ‘:boss:’ but not ‘:urgent:’
C-c a v
    as the same search as C-c a u, but limiting the search to headlines that are also TODO items
C-c a U
    as the same search as C-c a u, but only in the current buffer and displaying the result as a sparse tree
C-c a f
    to create a sparse tree (again: current buffer only) with all entries containing the word ‘FIXME’
C-c a h
    as a prefix command for a HOME tags search where you have to press an additional key (l, p or k) to select a name (Lisa, Peter, or Kim) as additional tag to match. 

Note that the -tree agenda views need to be called from an Org buffer as they operate on the current buffer only.

#+END_EXAMPLE

**** block
	  
Another possibility is the construction of agenda views that comprise the results of several commands, each of which creates a block in the agenda buffer. The available commands include agenda for the daily or weekly agenda (as created with C-c a a), alltodo for the global TODO list (as constructed with C-c a t), and the matching commands discussed above: todo, tags, and tags-todo. Here are two examples:

#+BEGIN_SRC emacs-lisp :results none
     (setq org-agenda-custom-commands
           '(("h" "Agenda and Home-related tasks"
              ((agenda "")
               (tags-todo "home")
               (tags "garden")))
             ("o" "Agenda and Office-related tasks"
              ((agenda "")
               (tags-todo "work")
               (tags "office")))))
#+END_SRC

This will define C-c a h to create a multi-block view for stuff you need to attend to at home. The resulting agenda buffer will contain your agenda for the current week, all TODO items that carry the tag ‘home’, and also all lines tagged with ‘garden’. Finally the command C-c a o provides a similar view for office tasks. 

another example

#+BEGIN_SRC emacs-lisp :results none
(setq org-agenda-custom-commands
      '(("O" "Office block agenda"
         ((agenda "" ((org-agenda-ndays 1))) 
                      ;; limits the agenda display to a single day
          (tags-todo "+PRIORITY=\"A\"")
          (tags-todo "computer|office|phone")
          (tags "project+CATEGORY=\"elephants\"")
          (tags "review" ((org-agenda-files '("~/org/circuspeanuts.org"))))
                          ;; limits the tag search to the file circuspeanuts.org
          (todo "WAITING"))
         ((org-agenda-compact-blocks t))) ;; options set here apply to the entire block
        ;; ...other commands here
        ))
#+END_SRC
**** define multiple criteria (₆In example₆ todos)
use a pipe between the items:
#+BEGIN_SRC emacs-lisp :results none
("r" "research" todo "TODO|NEXT" 
         (
         (org-agenda-files '("~/org/files/agenda/Research.org")) 
          (org-agenda-sorting-strategy 
          '(priority-down effort-down)
#+END_SRC
**** choose several todo categories
use the | operator:

#+BEGIN_SRC emacs-lisp :results none
("w" "work" todo "TODO|BGU" 
         (
          (org-agenda-sorting-strategy 
          '(priority-down effort-down)) ) )

#+END_SRC
**** sorting methods
#+BEGIN_SRC emacs-lisp :results none
(priority-down effort-down todo-state-down) 
#+END_SRC 
**** narrow search agenda on specific file only
#+BEGIN_SRC emacs-lisp :results none
;work related only tasks (from research|bgu files)
("w" "work" todo "TODO|BGU|EXP"
(
(org-agenda-files 
(list "~/org/files/agenda/Research.org"  "~/org/files/agenda/bgu.org"))
(org-agenda-sorting-strategy '(priority-down effort-down)
)))
     
#+END_SRC
**** match by properties in agenda view
use the tags key word and syntax like this
#+BEGIN_SRC emacs-lisp :results none
("F" "to cook"  tags "Cuisine=\"American\""
          (
         (org-agenda-files '("~/org/files/agenda/food.org")) 
    (org-agenda-sorting-strategy '(priority-down)) ;;  Sort by prioirty where prioirty goes first.

)
)
#+END_SRC
in above example we are looking at a property "cuisine" in the property drawer with entry "American".
**** add multi key agenda items (sub menus)
use this 

#+BEGIN_SRC emacs-lisp :results none
;;first define the key
("f" . "Food commands")

;;;;then add the following keys
("fb" "food" todo "COOK" 
         (
         (org-agenda-files '("~/org/files/agenda/food.org")) 
    (org-agenda-sorting-strategy '(priority-down)) ;;  Sort by prioirty where prioirty goes first.

)
)

;;;;;;;;;;;;;COOKING;;;;;;;;;;;
("fc" "to cook"  tags "Cuisine=\"American\""
          (
         (org-agenda-files '("~/org/files/agenda/food.org")) 
    (org-agenda-sorting-strategy '(priority-down)) ;;  Sort by prioirty where prioirty goes first.

)
)

#+END_SRC
**** bulk vs marking in agenda buffer
"m" adds a mark to the heading under point, "M-m" toggles the mark. So multiple "m"s will always leave the heading marked, while multiple

"M-m"s will toggle back and forth between marked and unmarked. Hit "U"to unmark all.

Then hit "B" to get a little dispatcher asking you what to do with the marked headings.

*** time
**** schedule vs appointment 
Scheduling an item in Org mode should not be understood in the same way that we understand scheduling a meeting. Setting a date for a meeting is just a simple appointment, you should mark this entry with a simple plain timestamp, to get this item shown on the date where it applies. This is a frequent misunderstanding by Org users. In Org mode, scheduling means setting a date when you want to start working on an action item.

A plain timestamp, C-c .: This is used for things like appointments where the entry occurs at a specific date/time. Such an entry will show up in the agenda on the specified day, and will not show up after that day has passed. Note that an appointment in the past won't keep showing up on your agenda regardless of whether you mark it DONE: if you didn't go to your doctor's appointment yesterday, that doesn't mean you still have one today!

C-u C-c !
Like C-c . and C-c !, but use the alternative format which contains date and time. The default time can be rounded to multiples of 5 minutes, see the option org-time-stamp-rounding-minutes. 

A SCHEDULED timestamp, C-c C-s: This is used to indicate when you intend to do the task. It will show up on the agenda on the scheduled day. If you don't complete the task at that time, it will continue to show up on the agenda on the following days to show you that you have not completed something that you planned to do.

A DEADLINE timestamp, C-c C-d: This is used to indicate when something must be completed. Typically you want to see deadlines ahead of time, so that you can do whatever it is that must be done to meet them. Like a scheduled entry, if you miss a deadline it will continue to appear on the agenda as past due.

(Strictly speaking there is a fourth option: an inactive timestamp, C-c !. This is when you want to attach a date to an entry but do not want it to show up in the agenda at all. Inactive timestamps have no special behavior.)

example for a meeting

http://orgmode.org/worg/org-faq.html#Appointments/Diary


#+BEGIN_EXAMPLE
/** meet tzur  
<2015-06-14 Sun 11:00-11:30 >
#+END_EXAMPLE

multi day schedule

#+BEGIN_EXAMPLE
/* Vacation
  <2009-03-20 Fri>--<2009-04-01 Wed>
#+END_EXAMPLE

**** Repeating events
Some tasks need to be repeated at regular intervals - daily, weekly, fortnightly, monthly, quarterly and annually. Items can be made to repeat in the agenda view by including a repeater directive at the end of the date. This has the format of a plus sign, a number and a letter indicating a unit of time: days (d), weeks (w), months (m) and years (y).

Therefore, the weekly meeting entries can look like:
#+BEGIN_EXAMPLE
/      *** Tuesday department meeting 
       <2007-10-23 Tue 10:00-11:00 +1w>
       *** Friday afternoon team meeting
       <2007-10-26 Fri 15:00-16:00 +1w>
#+END_EXAMPLE
Viewing the agenda and scrolling forward into future weeks will show the date entries.

*** Todo
**** PULL TODO from a set of files/ALL
you can define where to pull TODO to the agenda view

For agenda files locations, add each location within " " to the org-agenda-file config:

#+BEGIN_SRC emacs-lisp
(setq org-agenda-files '("~/Dropbox/Org/" "~/Dropbox/Org/agenda" "~/Dropbox/Org/Uni_agenda" ))
#+END_SRC

To do a recursive todo search in ALL org file you can use the following code
@NOTE@ this will also bring and load ALL .orh files in your org dir as a by-product!!!


#+BEGIN_SRC emacs-lisp
(load-library "find-lisp")
(add-hook 'org-agenda-mode-hook (lambda () 
(setq org-agenda-files 
      (find-lisp-find-files "~/Dropbox/Org/" "\.org$"))
))
#+END_SRC

**** adding custom TODO states in org per file/buffer
you can do this globally in your config:

#+BEGIN_SRC emacs-lisp :results none
   (setq org-todo-keywords
       '((sequence "TODO(t)" "WAIT(w@/!)" "|" "DONE(d!)" "CANCELED(c@)")))
#+END_SRC

To record a timestamp without a note for TODO keywords configured with `@', just type `C-c C-c' to enter a blank note when prompted.

and you can do this locally per file/buffer:

#+BEGIN_SRC emacs-lisp :results none
#+TODO: TODO(t) STARTED(s) WAITING(w) | DONE(d) CANCELED(c)
#+END_SRC

Define the TODO states you find useful and single letters for fast selection. Customize the variable org-todo-keywords or simply do this right in the file with putting this on the top part of the file

**** Repeated tasks

Some tasks need to be repeated again and again. Org mode helps to organize such tasks using a so-called repeater in a DEADLINE, SCHEDULED, or plain timestamp. In the following example

#+BEGIN_EXAMPLE
      TODO Pay the rent
        DEADLINE: <2005-10-01 Sat +1m>
#+END_EXAMPLE

the +1m is a repeater; the intended interpretation is that the task has a deadline on <2005-10-01> and repeats itself every (one) month starting from that time. You can use yearly, monthly, weekly, daily and hourly repeat cookies by using the y/w/m/d/h letters. If you need both a repeater and a special warning period in a deadline entry, the repeater should come first and the warning period last:i

#+BEGIN_EXAMPLE
DEADLINE: <2005-10-01 Sat +1m -3d>.  
#+END_EXAMPLE

** Babel (code blocks)
*** run ssh with command inside org
use something like this
#+begin_src sh :dir /ssh:zeltak@192.168.0.2:
ls -la
    #+end_src
*** "tangling"
'tangling' is the proccess of creating pure source code files by extracting code from source blocks in the current buffer. 
During “tangling” of code blocks their bodies are expanded using org-babel-expand-src-block which can expand both variable and “noweb” style references. In order to tangle a code block it must have a :tangle header argument (see [[header%20arguments][header arguments]] )
*** tangeling to a tex file (for config)
use this as an example

#+BEGIN_SRC sh :tangle  ~/ZH_tmp/test.conf
# Example configuration file
this is pretty sweet
#+END_SRC

this will export the file to a config file when tangled
to tangle only the code block and not the entire file use with prefix C-u

*** disable confirmation checks for certain languages
for example for lisp
#+BEGIN_SRC emacs-lisp :results none
(defun my-org-confirm-babel-evaluate (lang body)
    (not (string= lang "emacs-lisp")))  ; don't ask for lisp
(setq org-confirm-babel-evaluate 'my-org-confirm-babel-evaluate)
#+END_SRC
*** header arguments
**** intro
http://orgmode.org/manual/Specific-header-arguments.html#Specific-header-arguments

Many aspects of the evaluation and export of code blocks are controlled through header arguments. These can be specified globally, at the file level, at the outline subtree level, and at the individual code block level. The following describes some of the header arguments. 

`Structure of Code Blocks`

The structure of code blocks is as follows:

     #+NAME: <name>
     #+BEGIN_SRC <language> <switches> <header arguments>
       <body>
     #+END_SRC

Where <name> is a string used to name the code block, <language> specifies the language of the code block (e.g. emacs-lisp, shell, R, python, etc...), <switches> can be used to control export of the code block, <header arguments> can be used to control many aspects of code block behavior as demonstrated below, and <body> contains the actual source code. 

**** 'Common examples'

`silence results` (no output)
#+BEGIN_EXAMPLE
:results none
#+END_EXAMPLE

`overwrite results` 
#+BEGIN_EXAMPLE
:results output replace
#+END_EXAMPLE

`verbatim results` (not formatting)

#+BEGIN_EXAMPLE
:results verbatim 
#+END_EXAMPLE

**** :results 
***** info
There are four classes of `:results` header argument. Only one option per class may be supplied per code block.

v `collection` header arguments specify how the results should be collected from the code block

`type` header arguments specify what type of result the code block will return—which has implications for how they will be processed before insertion into the Org mode buffer

`format` header arguments specify what type of result the code block will return—which has implications for how they will be inserted into the Org mode buffer

`handling` header arguments specify how the results of evaluating the code block should be handled. 

***** Collection
The following options are mutually exclusive, and specify how the results should be collected from the code block.

`value` This is the default. The result is the value of the last statement in the code block. This header argument places the evaluation in functional mode. Note that in some languages, e.g., Python, use of this result type requires that a return statement be included in the body of the source code block. E.g., :results value.

`output` The result is the collection of everything printed to STDOUT during the execution of the code block. This header argument places the evaluation in scripting mode. E.g., :results output. 

***** Type

The following options are mutually exclusive and specify what type of results the code block will return. By default, results are inserted as either a table or scalar depending on their value.

`table, vector` The results should be interpreted as an Org mode table. If a single value is returned, it will be converted into a table with one row and one column. E.g., :results value table.

`list` The results should be interpreted as an Org mode list. If a single scalar value is returned it will be converted into a list with only one element.

`scalar, verbatim` The results should be interpreted literally—they will not be converted into a table. The results will be inserted into the Org mode buffer as quoted text. E.g., :results value verbatim.

`file` The results will be interpreted as the path to a file, and will be inserted into the Org mode buffer as a file link. E.g., :results value file. 

***** Format
The following options are mutually exclusive and specify what type of results the code block will return. By default, results are inserted according to the type as specified above.

`raw` The results are interpreted as raw Org mode code and are inserted directly into the buffer. If the results look like a table they will be aligned as such by Org mode. E.g., :results value raw.

`org` The results are will be enclosed in a BEGIN_SRC org block. They are not comma-escaped by default but they will be if you hit TAB in the block and/or if you export the file. E.g., :results value org.

`html` Results are assumed to be HTML and will be enclosed in a BEGIN_HTML block. E.g., :results value html.

`latex` Results assumed to be LaTeX and are enclosed in a BEGIN_LaTeX block. E.g., :results value latex.

`code` Result are assumed to be parsable code and are enclosed in a code block. E.g., :results value code.

`pp` The result is converted to pretty-printed code and is enclosed in a code block. This option currently supports Emacs Lisp, Python, and Ruby. E.g., :results value pp.

`drawer` The result is wrapped in a RESULTS drawer. This can be useful for inserting raw or org syntax results in such a way that their extent is known and they can be automatically removed or replaced. 

***** Handling

The following results options indicate what happens with the results once they are collected.

`silent` The results will be echoed in the minibuffer but will not be inserted into the Org mode buffer. E.g., :results output silent.

`replace` The default value. Any existing results will be removed, and the new results will be inserted into the Org mode buffer in their place. E.g., :results output replace.

`append` If there are pre-existing results of the code block then the new results will be appended to the existing results. Otherwise the 

`new` results will be inserted as with replace.

`prepend` If there are pre-existing results of the code block then the new results will be prepended to the existing results. Otherwise the new results will be inserted as with replace

**** :Session

#+BEGIN_EXAMPLE
:session
#+END_EXAMPLE

The `:session` header argument starts a session for an interpreted language where state is preserved.

By default, a session is not started.

A string passed to the :session header argument will give the 'session a name'.

This makes it possible to run concurrent sessions for each interpreted language.

**** :shebang
Setting the :shebang header argument to a string value (e.g., :shebang "#!/bin/bash") causes the string to be inserted as the first line of any tangled file holding the code block, and the file permissions of the tangled file are set to make it executable.
**** :eval
The :eval header argument can be used to limit the evaluation of specific code blocks. The :eval header argument can be useful for protecting against the evaluation of dangerous code blocks or to ensure that evaluation will require a query regardless of the value of the org-confirm-babel-evaluate variable. The possible values of :eval and their effects are shown below.

never or no
    The code block will not be evaluated under any circumstances.
query
    Evaluation of the code block will require a query.
never-export or no-export
    The code block will not be evaluated during export but may still be called interactively.
query-export
    Evaluation of the code block during export will require a query. 

If this header argument is not set then evaluation is determined by the value of the org-confirm-babel-evaluate variable see Code evaluation security.
**** :file
The header argument :file is used to specify an external file in which to save code block results. After code block evaluation an Org mode style [[file:]] link (see Link format) to the file will be inserted into the Org mode buffer. Some languages including R, gnuplot, dot, and ditaa provide special handling of the :file header argument automatically wrapping the code block body in the boilerplate code required to save output to the specified file. This is often useful for saving graphical output of a code block to the specified file.

The argument to :file should be either a string specifying the path to a file, or a list of two strings in which case the first element of the list should be the path to a file and the second a description for the link.
**** :dir and remote execution
While the :file header argument can be used to specify the path to the output file, :dir specifies the default directory during code block execution. If it is absent, then the directory associated with the current buffer is used. In other words, supplying :dir path temporarily has the same effect as changing the current directory with M-x cd path RET, and then not supplying :dir. Under the surface, :dir simply sets the value of the Emacs variable default-directory.

When using :dir, you should supply a relative path for file output (e.g., :file myfile.jpg or :file results/myfile.jpg) in which case that path will be interpreted relative to the default directory.
In other words, if you want your plot to go into a folder called Work in your home directory, you could use

     #+BEGIN_SRC R :file myplot.png :dir ~/Work
     matplot(matrix(rnorm(100), 10), type="l")
     #+END_SRC

`Remote execution`

A directory on a remote machine can be specified using tramp file syntax, in which case the code will be evaluated on the remote machine. An example is:

     #+BEGIN_SRC R :file plot.png :dir /dand@yakuba.princeton.edu:
     plot(1:10, main=system("hostname", intern=TRUE))
     #+END_SRC

Text results will be returned to the local Org mode buffer as usual, and file output will be created on the remote machine with relative paths interpreted relative to the remote directory. An Org mode link to the remote file will be created.

Most of this functionality follows immediately from the fact that :dir sets the value of the Emacs variable default-directory, thanks to tramp. Those using XEmacs, or GNU Emacs prior to version 23 may need to install tramp separately in order for these features to work correctly.

`Further points`
If :dir is used in conjunction with :session, although it will determine the starting directory for a new session as expected, no attempt is currently made to alter the directory associated with an existing session.
:dir should typically not be used to create files during export with :exports results or :exports both. The reason is that, in order to retain portability of exported material between machines, during export links inserted into the buffer will not be expanded against default directory. Therefore, if default-directory is altered using :dir, it is probable that the file will be created in a location to which the link does not point.
**** :exports
The :exports header argument specifies what should be included in HTML or LaTeX exports of the Org mode file.

    code The default. The body of code is included into the exported file. E.g., :exports code.
    results The result of evaluating the code is included in the exported file. E.g., :exports results.
    both Both the code and results are included in the exported file. E.g., :exports both.
    none Nothing is included in the exported file. E.g., :exports none.
**** :comments

By default code blocks are tangled to source-code files without any insertion of comments beyond those which may already exist in the body of the code block. The :comments header argument can be set as follows to control the insertion of extra comments into the tangled code file.

no The default. No extra comments are inserted during tangling.
link The code block is wrapped in comments which contain pointers back to the original Org file from which the code was tangled.
yes A synonym for “link” to maintain backwards compatibility.
org Include text from the Org mode file as a comment. The text is picked from the leading context of the tangled code and is limited by the nearest headline or source block as the case may be.
both Turns on both the “link” and “org” comment options.
noweb Turns on the “link” comment option, and additionally wraps expanded noweb references in the code block body in link comments.
**** :cache

The :cache header argument controls the use of in-buffer caching of the results of evaluating code blocks. It can be used to avoid re-evaluating unchanged code blocks. Note that the :cache header argument will not attempt to cache results when the :session header argument is used, because the results of the code block execution may be stored in the session outside of the Org mode buffer. The :cache header argument can have one of two values: yes or no.

    no The default. No caching takes place, and the code block will be evaluated every time it is called.
    yes Every time the code block is run a SHA1 hash of the code and arguments passed to the block will be generated. This hash is packed into the #+RESULTS: line and will be checked on subsequent executions of the code block. If the code block has not changed since the last time it was evaluated, it will not be re-evaluated. 

Code block caches notice if the value of a variable argument to the code block has changed. If this is the case, the cache is invalidated and the code block is re-run. In the following example, caller will not be re-run unless the results of random have changed since it was last run.
*** batch proccess code blokcs
for a subtree/buffer
#+BEGIN_SRC emacs-lisp :results none
org-babel-execute-buffer
;and for subtrees 
org-babel-execute-subtree
#+END_SRC
*** auto display images after eval
Try (org-redisplay-inline-images). Note "re".

#+BEGIN_SRC <lang> :post (org-redisplay-inline-images)

#+END_SRC
#+RESULTS:
 
** bugs
*** files opend are slow- disable line mode

line modes cause org mode to get really slow
 I disable linum for some or all .org files only
 ;;disable linemode on org
 (defun my-org-mode-hook ()
 (linum-mode 0))
 (add-hook 'org-mode-hook 'my-org-mode-hook)
** Bugs/fixes
*** error in mobile-org-push: org-id-add-location: Wrong type argument: hash-table-p
if you get this error:
org-id-add-location: Wrong type argument: hash-table-p

remove

file:~/.emacs.d/.org-id-locations

and restart emacs
*** !capture mode wipes target!
this was casued by aggresive saving behivour:
#+BEGIN_SRC emacs-lisp :results none
(setq auto-save-visited-file-name t)
(setq auto-save-interval 20) ; twenty keystrokes
(setq auto-save-timeout 10) ; ten idle seconds

#+END_SRC 
@ make sure that all above commands are commented@. you can leave autosave to something more sane like 120 seconds


#+BEGIN_SRC emacs-lisp :results none
(setq auto-save-timeout 120) ; ten idle seconds
#+END_SRC


*** org mode very slow on large file
if Org is very slow on big file (even 100k) the casue may linium-mode (show line modes)
to fix this disable linium mode in org with the following hook


#+BEGIN_SRC emacs-lisp  "disable linum mode only in Org"
;;disable linemode on org
(defun my-org-mode-hook () 
  (linum-mode 0)) 
(add-hook 'org-mode-hook 'my-org-mode-hook)


#+END_SRC
** capture
*** org setup
make sure you have 
#+BEGIN_SRC emacs-lisp :results none
(require 'org-protocol)
#+END_SRC
in your init file before you start capturing
*** setup capture from Chrome Browser (Registering Org-Protocol with XDG-open)

http://tech.memoryimprintstudio.com/?p=160

This method should work with other browsers (e.g. Chrome) and applications (e.g. Acrobat), and it is a clean way of getting xdg-open (a tool for configuring default applications in Linux) to open org-protocol links and pass them to emacs. adopted and modified from those two links link1 , link2 and Registering Custom URI Handler

1.Add .desktop file, Create and save a file `called org-protocol.desktop` to 
file:~/.local/share/applications/org-protocol.desktop containing:

#+BEGIN_EXAMPLE
[Desktop Entry]
Name=org-protocol
Exec=emacsclient %u
Type=Application
Terminal=false
Categories=System;
MimeType=x-scheme-handler/org-protocol;
#+END_EXAMPLE

2. Add org-protocol handler

#+BEGIN_SRC sh :results none
vim  ~/.local/share/applications/mimeapps.list 
#+END_SRC

then add to the  [Added Associations] section

#+BEGIN_SRC sh :results none
x-scheme-handler/org-protocol=org-protocol.desktop
#+END_SRC

3. run

#+BEGIN_SRC sh :results none
update-desktop-database ~/.local/share/applications/
#+END_SRC

This step makes Firefox/chrome  aware that “org-protocol” is a valid scheme-handler or protocol (by updating ~/.local/share/applications/mimeinfo.cache), and causes the borwser to prompt for a program to use when opening these kinds of links.
4. Add config settings to dot-emacs file
$Note-this may already be present in your config. also if you start Emacs as a server-client the first line is uneeded$ 
#+BEGIN_SRC emacs-lisp :results none
(server-start)
(require 'org-protocol)
#+END_SRC
5. create a capture template for this
#+BEGIN_SRC emacs-lisp :results none
("w" "web Capture Template" entry (file+headline "refile.org" "Web")  "* BOOKMARKS %T\n%c\%a\n%i\n Tan's Note:%?" :prepend t :jump-to-captured t :empty-lines-after 1 :unnarrowed t)
#+END_SRC

6. Right click the Bookmark Toolbar and click `Add a page` to add a Bookmarklet
give it a name and as a URL use this

#+BEGIN_EXAMPLE
javascript:location.href='org-protocol://capture://w/'+encodeURIComponent(location.href)+'/'+encodeURIComponent(document.title)+'/'+encodeURIComponent(window.getSelection())
#+END_EXAMPLE

7. Select some text in a website and click on the Boolmarklet you just created
$Note- add the “/usr/bin/emacsclient” program if prompted$
8. You should see the pop up capture pane in one of the emacsclients open
*** launch org capture from command line (for quick WM binds)
    :PROPERTIES:
    :END:
**** `CURRENT used method`
#+BEGIN_SRC sh
/usr/bin/emacsclient -nw -e '(org-capture)'   
##binding in wm example
terminator --geometry=1200x900 -c ocapture -e "emacsclient -nw -e '(org-capture)'"  
#+END_SRC
****  alternative method 1
issue this line:
#+BEGIN_SRC sh
emacsclient -nw org-protocol:/capture:/URL/TITLE/BODY
#+END_SRC

you can also execute a specific capture templeate by adding the shortcut after the capture:/ like this :

#+BEGIN_SRC sh
emacsclient -nw org-protocol:/capture:/x/URL/TITLE/BODY
#+END_SRC

**** alternative method 2 (still works but more cumbersome)

1.add this code in your .emacs

#+BEGIN_SRC emacs-lisp
(defadvice org-capture-finalize (after delete-capture-frame activate)
  "Advise capture-finalize to close the frame if it is the capture
frame"
  (if (equal "capture" (frame-parameter nil 'name))
      (delete-frame)))

(defadvice org-capture-destroy (after delete-capture-frame activate)
  "Advise capture-destroy to close the frame if it is the capture frame"
  (if (equal "capture" (frame-parameter nil 'name))
      (delete-frame)))

(defun make-capture-frame ()
  "Create a new frame and run org-capture."
  (interactive)
  (make-frame '((name . "capture")))
  (select-frame-by-name "capture")
  (delete-other-windows)
  (org-capture)
  )
#+END_SRC

2) then add a shortcut/hotkey with this command
/usr/bin/emacsclient -n -e '(make-capture-frame)'

#+begin_src sh
/usr/bin/emacsclient -n -e '(make-capture-frame)'
#+end_src
 
*** default keybinds
C-c c     (org-capture)
Call the command org-capture. Note that this keybinding is global and not active by default: you need to install it. If you have templates defined see Capture templates, it will offer these templates for selection or use a new Org outline node as the default template. It will insert the template into the target file and switch to an indirect buffer narrowed to this new node. You may then insert the information you want.

C-c C-c     (org-capture-finalize)
Once you have finished entering information into the capture buffer, C-c C-c will return you to the window configuration before the capture process, so that you can resume your work without further distraction. When called with a prefix arg, finalize and then jump to the captured item.

C-c C-w     (org-capture-refile)
Finalize the capture process by refiling (see Refile and copy) the note to a different place. Please realize that this is a normal refiling command that will be executedso the cursor position at the moment you run this command is important. If you have inserted a tree with a parent and children, first move the cursor back to the parent. Any prefix argument given to this command will be passed on to the org-refile command.

C-c C-k     (org-capture-kill)
Abort the capture process and return to the previous state.
You can also call org-capture in a special way from the agenda, using the k c key combination. With this access, any timestamps inserted by the selected capture template will default to the cursor date in the agenda, rather than to the current date.

To find the locations of the last stored capture, use org-capture with prefix commands:

C-u C-c c
Visit the target location of a capture template. You get to select the template in the usual way. 
C-u C-u C-c c
Visit the last stored capture item in its buffer.
You can also jump to the bookmark org-capture-last-stored, which will automatically be created unless you set org-capture-bookmark to nil.

To insert the capture at point in an Org buffer, call org-capture with a C-0 prefix argument.

use ~C-c C-s~ (org-schedule) to schedule it for a particular day
set the deadline with ~C-c C-d~ (org-deadline),
use ~C-c C-w~ to refile it

I added a following key
C-c x】 to capture in close elegantly in the command line
*** Templates
**** base
see the help file below for full details. in short:

#+BEGIN_SRC emacs-lisp
              ("SHORT KEY (keys)" "description" TYPE (LOCATION "PATH TO FILE" "PATH TO HEADER")
               "TEXT1 TEXT Template expansion" )
;IE:
              ("x" "todo_nix" entry (file+headline "~/Dropbox/Org/agenda/nixTODO.org" "Linux")
               " TODO %t" )

#+END_SRC

**** Detailed info on Capture templates
***** BASE example
#+BEGIN_EXAMPLE
("KEYS" "DISCRIPTION" TYPE (TARGET)
"  %^{Description} %^g Added: %U" )
#+END_EXAMPLE

example:

#+BEGIN_SRC emacs-lisp :results none
("x" "todo_nix" entry (file+headline "~/org/files/agenda/TODO.org" "Linux")
#+END_SRC

***** Keys 
that willselect the template, as a string, characters only, for example "a" for a template to be selected with a single key, or "bt" for selection with two keys. When using several keys, keys using the same prefix key must be sequential in the list and preceded by a 2-element entry explaining the prefix key, for example

#+BEGIN_EXAMPLE
("b" "Temlates for marking stuff to buy")
#+END_EXAMPLE

If you donot define a template for the C key, this key will be used to open the customize buffer for this complex variable.

***** Description
A short sring describing the template, which will be shown during selection.
***** Type
The type for entry, a symbol. Valid values are:

`entry`
An Org moe node, with a headline. Will be filed as the child of the target entry or as a top-level entry. The target file should be an Org mode file.

`item`
A plain lst item, placed in the first plain list at the target location. Again the target file should be an Org file.

`checkite`
A checkbo item. This only differs from the plain list item by the default template.

`table-line`
a new line in the first table at the target location. Where exactly the line will be inserted depends on the properties :prepend and :table-line-pos (see below).

`plain`
Text to be inserted as it is. 

***** Target

Specification of where the captured item should be placed. In Org mode files, targets usually define a node. $Entries will become children of this node$. Other types will be added to the table or list in the body of this node. Most target specifications contain a file name. If that file name is the empty string, it defaults to org-default-notes-file. A file can also be given as a variable, function, or Emacs Lisp form.

Valid values are:

(file "path/to/file")
    Text will be placed at the beginning or end of that file.

(id "id of existing org entry")
    Filing as child of this entry, or in the body of the entry.

(file+headline "path/to/file" "node headline")
    Fast configuration if the target heading is unique in the file.

(file+olp "path/to/file" "Level 1 heading" "Level 2" ...)
    For non-unique headings, the full path is safer.

(file+regexp "path/to/file" "regexp to find location")
    Use a regular expression to position the cursor.

(file+datetree "path/to/file")
    Will create a heading in a date tree for today's date1.

(file+datetree+prompt "path/to/file")
    Will create a heading in a date tree, but will prompt for the date.

(file+function "path/to/file" function-finding-location)
    A function to find the right location in the file.

(clock)
    File to the entry that is currently being clocked.

(function function-finding-location)
    Most general way, write your own function to find both file and location. 

***** Template
The template for creating the capture item. If you leave this empty, an appropriate default template will be used. Otherwise this is a string with escape codes, which will be replaced depending on time and context of the capture call. The string with escapes may be loaded from a template file, using the special syntax (file "path/to/template"). See below for more details. 

In the template itself, special '%-escapes'
allow dynamic insertion of content.If you need one of these sequences literally, escape the '%' with a backslash. The templates are expanded in the order given here:

another special property is

%^{Description}

this will give you a prompt to the header name

#+BEGIN_EXAMPLE
%[file]     Insert the contents of the file given by file.

%(sexp)     Evaluate Elisp sexp and replace with the result.
            For convenience, %:keyword (see below) placeholders
            within the expression will be expanded prior to this.
            The sexp must return a string.

%<...>      The result of format-time-string on the ... format specification.

%t          Timestamp, date only.

%T          Timestamp, with date and time.

%u, %U      Like the above, but inactive timestamps.

%i          Initial content, the region when capture is called while the
            region is active.
            The entire text will be indented like %i itself.

%a          Annotation, normally the link created with org-store-link.

%A          Like %a, but prompt for the description part.

%l          Like %a, but only insert the literal link.

%c          Current kill ring head.

%x          Content of the X clipboard.

%k          Title of the currently clocked task.

%K          Link to the currently clocked task.

%n          User name (taken from user-full-name).

%f          File visited by current buffer when org-capture was called.

%F          Full path of the file or directory visited by current buffer.

%:keyword   Specific information for certain link types, see below.

%^g         Prompt for tags, with completion on tags in target file.

%^G         Prompt for tags, with completion all tags in all agenda files.

%^t         Like %t, but prompt for date.  Similarly %^T, %^u, %^U.
            You may define a prompt like %^{Birthday}t.

%^C         Interactive selection of which kill or clip to use.

%^L         Like %^C, but insert as link.

%^{prop}p   Prompt the user for a value for property prop.

%^{prompt}  prompt the user for a string and replace this sequence with it.
            You may specify a default value and a completion table with
            %^{prompt|default|completion2|completion3...}.
            The arrow keys access a prompt-specific history.

%\n         Insert the text entered at the nth %^{prompt}, where n is
            a number, starting from 1.

%?          After completing the template, position cursor here.

#+END_EXAMPLE

For specific link types, the following keywords can be used

| Link type                       | Available keywords                                     |
| bbdb                            | %:name %:company                                       |
| irc                             | %:server %:port %:nick                                 |
| vm, vm-imap, wl, mh, mew, rmail | %:type %:subject %:message-id                          |
|                                 | %:from %:fromname %:fromaddress                        |
|                                 | %:to   %:toname   %:toaddress                          |
|                                 | %:date (message date header field)                     |
|                                 | %:date-timestamp (date as active timestamp)            |
|                                 | %:date-timestamp-inactive (date as inactive timestamp) |
|                                 | %:fromto (either "to NAME" or "from NAME")3            |
| gnus                            | %:group, for messages also all email fields            |
| w3, w3m                         | %:url                                                  |
| info                            | %:file %:node                                          |
| calendar                        | %:date                                                 |

***** properties 

The rest of the entry is a property list of additional options. Recognized properties are:

:prepend
Normally new captured information will be appended at the target location (last child, last table line, last list item...). Setting this property will change that.

:immediate-finish
When set, do not offer to edit the information, just file it away immediately. This makes sense if the template only needs information that can be added automatically.

₆In example₆ 

#+BEGIN_EXAMPLE
("O" "dl_movie_prerelease" entry (file+headline "~/org/files/agenda/dl.org" "Movies")
"  %x :Pre_Release: " :immediate-finish t)
#+END_EXAMPLE


:empty-lines
    Set this to the number of lines to insert before and after the new item. Default 0, only common other value is 1.

:clock-in
    Start the clock in this item.

:clock-keep
    Keep the clock running when filing the captured entry.

:clock-resume
    If starting the capture interrupted a clock, restart that clock when finished with the capture. Note that :clock-keep has precedence over :clock-resume. When setting both to t, the current clock will run and the previous one will not be resumed.

:unnarrowed
Do not narrow the target buffer, simply show the full buffer. Default is to narrow it so that you only see the new material.

:table-line-pos
Specification of the location in the table where the new line should be inserted. It should be a string like "II-3" meaning that the new line should become the third line before the second horizontal separator line.

:kill-buffer
If the target file was not yet visited when capture was invoked, kill the buffer again after capture is completed.
***** add tags
add as text between 2 :, ₆In example₆ 

#+BEGIN_EXAMPLE
("O" "dl_movie_prerelease" entry (file+headline "~/org/files/agenda/dl.org" "Movies")
 "  %x :Pre_Release: " )
#+END_EXAMPLE

***** add a elips function (Sexp) as part of capture
use %(sexp) ₆In example₆ 
#+BEGIN_SRC emacs-lisp :results none
("F" "food" entry (file+headline "/home/zeltak/org/files/agenda/food.org" "Inbox")
                 "* COOK %?  %^g %(z/recipe-template-cc)"
#+END_SRC

*** capture from gmail

    :PROPERTIES:
    :ID:       b3621ce9-0ea5-4d5b-8016-9fcf837b72f5
    :END:
http://comments.gmane.org/gmane.emacs.orgmode/48056

1. Open your gmail account (log-in)
2. Open the mail you like to refer too.
3. Copy the URL
4. Add the URL as a link (C-c C-l) to your org-file

After that, clicking on the link will open the mail directly in your 
standard webbrowser. If you logged out from google mail in between, you 
are ask to log-in first, after that select the link again.

But it is getting even better. You are not only able to link to 
particular mails within org-mode, but also to google mail labels 
(folders) or search results.

To make it even more org-mode friendly one can set-up org-capture in 
your webbrowser [1].

I added the following to the org-capture-templates list

#+BEGIN_SRC sh
("g" "Gmail-link" entry (file+headline "~/org/work.org" "Gmail-links") "%A")
#+END_SRC

------------------------------------------

Ok. This one seems to do the trick to show the original of a single
message:

https://mail.google.com/mail/h/?&v=om&th=MESSAGE-ID

And this one can be used for conversation view:

https://mail.google.com/mail/h/?&v=c&s=l&th=MESSAGE-ID

It seems v=c means view=conversation. But this is not enough by and of
itself, s=l is necessary too, whatever that means. Left out, your Inbox
will be presented.

Summing up, if you want to visit gmails articles without using
JavaScript, you may use this:

#+LINK: gmail https://mail.google.com/mail/h/?&v=c&s=l&th=
for HTML-only browsers/settings or
#+LINK: gmail https://mail.google.com/mail/?shva=1#all/
for JS-enabled browsers

or something like

#+begin_src emacs-lisp
  (org-add-link-type
   "gmail"
   (lambda (link)
     (browse-url
      (concat "https://mail.google.com/mail/?shva=1#all/" link))))
#+end_src




to have the link type globally.

Then use this in an Org file:

[[gmail:1331f3490dff1205][conversation about gmail links]]

This way, if Google decides to change it's url structure, all you have
to do is redefine your link type, instead of all email links.
*** use multi letter binds
You need to define the overarching capture section for multi-key usage..
so:

#+begin_src emacs-lisp
("x" "My Section") ;; this is the name of the section and will open the below submenu
("xd" "nix_TD" entry (file+headline "~/org/files/agenda/TODO.org" "TODO")
 "*  %^{Description}" ) 
#+end_src

** column view
*** Scope of column definitions
To define a column format for an entire file, use a line like
#+BEGIN_EXAMPLE
 #+COLUMNS: %25ITEM %TAGS %PRIORITY %TODO
#+END_EXAMPLE

To specify a format that only applies to a specific tree, add a :COLUMNS: property to the top node of that tree, for example:

#+BEGIN_EXAMPLE
     Top node for columns view
        :PROPERTIES:
        :COLUMNS: %25ITEM %TAGS %PRIORITY %TODO
        :END:

#+END_EXAMPLE
If a :COLUMNS: property is present in an entry, it defines columns for the entry itself, and for the entire subtree below it. Since the column definition is part of the hierarchical structure of the document, you can define columns on level 1 that are general enough for all sublevels, and more specific columns further down, when you edit a deeper part of the tree.
*** keys
Use 【v】 to display the field value in the minibuffer.

Use 【e】 to interactively select/edit the value.

Use 【S-left/right】 to cycle through the allowed values in a field.

Use 【a】 to edit the allowed values for this property.

*** Column attributes                  
    A column definition sets the attributes of a column. The general
    definition looks like this:

    #+BEGIN_EXAMPLE
      %[width]property[(title)][{summary-type}]
    #+END_EXAMPLE

    Except for the percent sign and the property name, all items are
    optional. The individual parts have the following meaning:

    |----------------+-----------------------------------------------------------------------------------------------------|
    | width          | An integer specifying the width of the column in characters.                                        |
    |                | If omitted, the width will be determined automatically.                                             |
    |----------------+-----------------------------------------------------------------------------------------------------|
    | property       | The property that should be edited in this column.                                                  |
    |                | Special properties representing meta data are allowed here as well (see [[@Special-properties][Special properties]])         |
    |----------------+-----------------------------------------------------------------------------------------------------|
    | title          | The header text for the column.  If omitted, the property name is used.                             |
    |----------------+-----------------------------------------------------------------------------------------------------|
    | {summary-type} | The summary type.  If specified, the column values for parent nodes are computed from the children. |
    |                | Supported summary types are:                                                                        |
    |                | {\+}       Sum numbers in this column.                                                              |
    |                | {\+;%.1f}  Like ‘+’, but format result with ‘%.1f’.                                                 |
    |                | {$}       Currency, short for ‘+;%.2f’.                                                             |
    |                | {:}       Sum times, HH:MM, plain numbers are hours.                                                |
    |                | {X}       Checkbox status, ‘[X]’ if all children are ‘[X]’.                                         |
    |                | {X/}      Checkbox status, ‘[n/m]’.                                                                 |
    |                | {X%}      Checkbox status, ‘[n%]’.                                                                  |
    |                | {min}     Smallest number in column.                                                                |
    |                | {max}     Largest number.                                                                           |
    |                | {mean}    Arithmetic mean of numbers.                                                               |
    |                | {:min}    Smallest time value in column.                                                            |
    |                | {:max}    Largest time value.                                                                       |
    |                | {:mean}   Arithmetic mean of time values.                                                           |
    |                | {@min}    Minimum age (in days/hours/mins/seconds).                                                 |
    |                | {@max}    Maximum age (in days/hours/mins/seconds).                                                 |
    |                | {@mean}   Arithmetic mean of ages (in days/hours/mins/seconds).                                     |
    |                | {est+}    Add ‘low-high’ estimates.                                                                 |
    |----------------+-----------------------------------------------------------------------------------------------------|

    Be aware that you can only have one summary type for any property
    you include. Subsequent columns referencing the same property
    will all display the same summary information.

    The =est+= summary type requires further explanation. It is used
    for combining estimates, expressed as ‘low-high' ranges or plain
    numbers.  For example, instead of estimating a particular task
    will take 5 days, you might estimate it as 5--6 days if you're
    fairly confident you know how much work is required, or 1--10
    days if you don't really know what needs to be done. Both ranges
    average at 5.5 days, but the first represents a more predictable
    delivery.

    When combining a set of such estimates, simply adding the lows
    and highs produces an unrealistically wide result. Instead,
    =est+= adds the statistical mean and variance of the sub-tasks,
    generating a final estimate from the sum. For example, suppose
    you had ten tasks, each of which was estimated at 0.5 to 2 days
    of work. Straight addition produces an estimate of 5 to 20 days,
    representing what to expect if everything goes either extremely
    well or extremely poorly. In contrast, =est+= estimates the full
    job more realistically, at 10--15 days.

    Numbers are right-aligned when a format specifier with an
    explicit width like =%5d= or =%5.1f= is used.

    Here is an example for a complete columns definition, along with
    allowed values.

    #+BEGIN_EXAMPLE
      :COLUMNS:  %25ITEM %9Approved(Approved?){X} %Owner %11Status \ [fn:FOOT64]
                         %10Time_Estimate{:} %CLOCKSUM %CLOCKSUM_T
      :Owner_ALL: Tammy Mark Karl Lisa Don
      :Status_ALL: "In progress" "Not started yet" "Finished" ""
      :Approved_ALL: "[ ]" "[X]"
    #+END_EXAMPLE

    The first column, ‘%25ITEM', means the first 25 characters of the
    item itself, i.e., of the headline. You probably always should
    start the column definition with the ‘ITEM' specifier. The other
    specifiers create columns ‘Owner' with a list of names as allowed
    values, for ‘Status' with four different possible values, and for
    a checkbox field ‘Approved'. When no width is given after the ‘%'
    character, the column will be exactly as wide as it needs to be
    in order to fully display all values. The ‘Approved' column does
    have a modified title (‘Approved?', with a question
    mark). Summaries will be created for the ‘Time_Estimate' column
    by adding time duration expressions like HH:MM, and for the
    ‘Approved' column, by providing an ‘[X]' status if all children
    have been checked. The ‘CLOCKSUM' and ‘CLOCKSUM_T' columns are
    special, they lists the sums of CLOCK intervals in the subtree,
    either for all clocks or just for today.
*** Create allowed values for a particular property 
You may define the allowed values for a particular property ‘:Xyz:’ by setting a property ‘:Xyz_ALL:’. This special property is inherited, so if you set it in a level 1 entry, it will apply to the entire tree. When allowed values are defined, setting the corresponding property becomes easier and is less prone to typing errors. For the example with the CD collection, we can predefine publishers and the number of disks in a box like this:
#+BEGIN_EXAMPLE
       CD collection
       :PROPERTIES:
       :NDisks_ALL:  1 2 3 4
       :Publisher_ALL: "Deutsche Grammophon" Philips EMI
       :END:
#+END_EXAMPLE

If you want to set properties that can be inherited by any entry in a file, use a line like
#+BEGIN_EXAMPLE
     #+PROPERTY: NDisks_ALL 1 2 3 4
#+END_EXAMPLE
Contrary to properties set from a special drawer, you have to refresh the buffer with C-

** export
*** export in file options
The table of contents is normally inserted directly before the first headline of the file. The depth of the table is by default the same as the number of headline levels, but you can choose a smaller number, or turn off the table of contents entirely, by configuring the variable org-export-with-toc, or on a per-file basis with a line like
#+BEGIN_EXAMPLE
#+OPTIONS: toc:2          (only to two levels in TOC)
#+OPTIONS: toc:nil        (no default TOC at all)
#+END_EXAMPLE
*** Publishing
**** publish to text 
choose:
#+BEGIN_EXAMPLE
org-ascii-publish-to-ascii
org-ascii-publish-to-utf8
#+END_EXAMPLE

**** example config file for 2 different publishing options:
#+BEGIN_SRC emacs-lisp :results none
     (setq org-publish-project-alist
           '(
              ("Help_files"
              :base-directory "~/org/files/help/"
              :publishing-directory "~/org/files/export/"
              :section-numbers nil
              :table-of-contents nil
              :publishing-function org-ascii-publish-to-ascii
                     )
              ("econf"
              :base-directory "~/org/files/help/"
              :publishing-directory "~/org/files/export/"
              :section-numbers nil
              :table-of-contents nil
              :publishing-function org-html-publish-to-html
                     )
))
#+END_SRC
*** HTML export options
A few other are used exclusively by the html exporter:

#+BEGIN_EXAMPLE
#+LANGUAGE:  en
#+INFOJS_OPT: view:showall toc:t ltoc:t mouse:underline path:http://orgmode.org/org-info.js
#+LINK_HOME: http://home.fnal.gov/~neilsen
#+LINK_UP: http://home.fnal.gov/~neilsen/notebook
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../css/notebook.css" />
#+END_EXAMPLE
*** add more exporter options
**** add ODT export 
There are generally two ways: 
use the customize interface to customize `org-export-backends' (I think you *need* to use customize for that? Orat least, you do if you want it to take immediate effect)
or just %better% add something like this
#+BEGIN_SRC emacs-lisp :results none
(require 'ox-odt)
#+END_SRC
its better to just have a bunch of (require 'ox-*) statements in your el files
*** export each line as a line and not stitched
solution: use a empty line
 
Essentially you want each line to be a separate "paragraph" so simply leave a blank line in between:

#+BEGIN_EXAMPLE
Decimals values like 4.5 are called numerics

Natural numbers like 4 are called integers. Integers are also numerics

#+END_EXAMPLE

for slides you can use lists if the text was intended for slides, as in:

#+BEGIN_EXAMPLE
  - Decimals values like 4.5 are called numerics
  - Natural numbers like 4 are called integers. Integers are also numerics
#+END_EXAMPLE


*** disable certain latex symbols (super/subscripting etc) during export
You can disable super/subscripting within an org file by adding the following line:

#+BEGIN_EXAMPLE
#+OPTIONS: ^:nil
#+END_EXAMPLE
Check the org manual for more options.
The following command inserts a template containing all the options:  C-c C-e #

you can also have
#+BEGIN_EXAMPLE
'^:{}'
#+END_EXAMPLE
this will still allow you to have subscript if you use curly braces, i.e. my_var won't give you subscript but F_{t} will. See also the org-mode manual: orgmode.org/manual/Export-options.html#Export-options 
*** export only specific header using tags
add this to the top of the file

#+BEGIN_EXAMPLE
#+EXCLUDE_TAGS: noexport
#+END_EXAMPLE
then for a section you want to export add the tag: noexport

the :ignoreheading: tag is useful. This tag will allow you to export the content of a section or subsection, but it will hide the header from view

*** export only specific header using drawers 
Now why wouldn’t you just use tags all of the time? Because tags apply to headers (sections, subsections, etc.) and sometimes we don’t want to use headers to exclude text. In those cases, drawers are useful.

To hide all drawers on export, you can add

#+BEGIN_EXAMPLE
#+OPTIONS: d:nil
#+END_EXAMPLE

to your org header.

But suppose that I want to exclude the :OUTLINE: drawer and I have other drawers that I would still like to include in the export. In that case, I can use the following line: 

#+BEGIN_EXAMPLE
#+OPTIONS: d:(not "OUTLINE")
#+END_EXAMPLE

That will allow me to export drawers aside from :OUTLINE:

Suppose that you wanted to exclude both :OUTLINE: and :SUMMARY: drawers, you would then just use this:
#+BEGIN_EXAMPLE
#+OPTIONS: d:(not "OUTLINE" not "SUMMARY")
#+END_EXAMPLE

*** export to latex error
look for a buffer named
#+BEGIN_EXAMPLE
     *org PDF latex output*
#+END_EXAMPLE
*** Export to odf
**** center text 
use the code block
#+begin_center
*_Recommendation letter on behalf of_*
#+end_center

** refile
**** base 
To refile tasks in org you need to tell it where you want to refile things.

you can define which files are used for refiling, IE any file in org-agenda-files,the current file etc that contribute to the list of valid refile targets.

I've recently moved to using IDO to complete targets directly. I find this to be faster than my previous complete in steps setup. At first I didn't like IDO but after reviewing the documentation again and learning about C-SPC to limit target searches I find it is much better than my previous complete-in-steps setup. Now when I want to refile something I do C-c C-w to start the refile process, then type something to get some matching targets, then C-SPC to restrict the matches to the current list, then continue searching with some other text to find the target I need. C-j also selects the current completion as the final target. I like this a lot. I show full outline paths in the targets so I can have the same heading in multiple subtrees or projects and still tell them apart while refiling.
**** Refile with iDO
When I want to refile something I do
?C-c C-w?
to start the refile process, then type something to get some matching targets, then
?C-SPC? 
to restrict the matches to the current list, then continue searching with some other text to find the target I need.
?C-j? also selects the current completion as the final target. I like this a lot. I show full outline paths in the targets so I can have the same heading in multiple subtrees or projects and still tell them apart while refiling.

**** org-refile can do different things depending on how you call it:

By default, it moves the current subtree to the specified location.
If you call it with the prefix argument C-u (like so: C-u C-c C-w), it jumps to the specified location instead of moving the current subtree.
If you call it as C-u C-u C-c C-w, it jumps to the previous refiling location.
** Code blocks 
*** higlighted code blocks inside org-mode
make sure you have this in your config:

(setq org-src-fontify-natively t)

also if you want the colors to transfer to html take a look at this:

http://fly.srk.fer.hr/~hniksic/emacs/htmlize.el.cgi

Then in your block specify the specific language to highlight , IE for emacs

#+BEGIN_SRC emacs-lisp

#+END_SRC

one can use any language such as R,sh (for bash) etc..

*** run code in org file

#+BEGIN_SRC sh

ls /home/zeltak/.ncmpcpp/

#+END_SRC

stand and the code an issue C-c C-c

#+RESULTS:
| alt_config  |
| bindings    |
| BK          |
| config      |
| config.save |
| error.log   |
*** run code with no results (silence code)
to eval code in org with no output (silent) use ':results none' in your code block In example 

#+BEGIN_SRC emacs-lisp :results none
(global-set-key (kbd "M-p M-y") 'helm-show-kill-ring)
#+END_SRC

*** ORG choose template

you can use 

| C-c C-v d |

'OR'

The following function prompts for a language (defaulting to the closest one it finds), also acts smartly about line breaks. 

#+BEGIN_SRC emacs-lisp
(defun org/source-insert ()
"Insert a header line."
(interactive)
(unless (looking-at "^ $")
(end-of-line)
(newline))
(let ((def (save-excursion
(if (search-backward-regexp "^#\\+BEGIN_SRC +\\([^ \n]+\\)" nil t)
(match-string-no-properties 1)
(if (search-forward "^#\\+BEGIN_SRC +\\([^ \n]+\\)" nil t)
(match-string-no-properties 1)
"xml"))))
(lang (completing-read (concat "Language [" def "]: ") org/headers nil nil nil nil def)))
(insert (concat "#+BEGIN_SRC " lang "\n\n#+END_SRC"))
(previous-line 1)))
#+END_SRC

** completions

Completion
Emacs would not be Emacs without completion, and Org mode uses it whenever it makes sense. If you prefer an iswitchb- or ido-like interface for some of the completion prompts, you can specify your preference by setting at most one of the variables org-completion-use-iswitchb org-completion-use-ido.

Org supports in-buffer completion. This type of completion does not make use of the minibuffer. You simply type a few letters into the buffer and use the key to complete text right there.

M-<TAB>

Complete word at point

At the beginning of a headline, complete TODO keywords.
After , complete TeX symbols supported by the exporter.
After , complete headlines in the current buffer so that they can be used in search links like [[find this headline]].
After : in a headline, complete tags. The list of tags is taken from the variable org-tag-alist (possibly set through the #+TAGS in-buffer option, see Setting tags), or it is created dynamically from all tags used in the current buffer.
After : and not in a headline, complete property keys. The list of keys is constructed dynamically from all keys used in the current buffer.
After [, complete link abbreviations (see Link abbreviations).
After #+, complete the special keywords like TYP_TODO or OPTIONS which set file-specific options for Org mode. When the option 
keyword is already complete, pressing M-<TAB> again will insert example settings for this keyword.
In the line after #+STARTUP: , complete startup keywords, i.e., valid keys for this line.
Elsewhere, complete dictionary words using Ispell.

** contrib/extensions
*** org-download
**** configuring
***** Installing
you can get org-download from:
https://github.com/abo-abo/org-download

and then add it  to your init file:

#+BEGIN_SRC emacs-lisp :results none
(load-file "~/.emacs.d/src/extra/org-download/org-download.el")
#+END_SRC
***** configure download directory 
the location of where org-download stores your files is set as a buffer-local variable that defaults to nil.

You can set it either with customize-group>org-download

or in the file header:

#+BEGIN_SRC emacs-lisp
# -- mode: Org; org-download-image-dir: "~/org/attach/2014/org/"; org-download-heading-lvl: nil; --
#+END_SRC

Or in the org-mode hook:

#+BEGIN_SRC emacs-lisp
(setq-default org-download-image-dir "/home/zeltak/org/attach/images_2014")
#+END_SRC


$Note dont have a trailing / at the end$ 

***** configure level of folders images are stored
the level of folders for saved images is set as a buffer-local variable that defaults to nil.

'org-download-heading-lvl'

nil means no subdirs
1 means create subdirs with name of level 1 heading
2 - level 2 heading etc.


You can set it either with customize-group>org-download
o
r can also set it on a per file basis:
#+BEGIN_SRC sh
# -- mode: Org; org-download-heading-lvl: nil; --
#+END_SRC
***** configure weather to add image size attributes alongside info
You can set it either with customize-group>org-download
and configure the
org-download-image-width
**** org-download commands
***** org-download-image
This will ask you for an URL and will downlaod the image into the current buffer-local
***** org-download-delete
***** org-download-yank (add images from dired)
org-download-yank is used to add images from local files.

Now you can just issue
?0 w? 
On an image in a dired buffer and issue 
'org-download-yank' 
in an Org buffer to paste that imagee
** conversions 
*** nc2org

1. export to html from NC using following options:

[[./linux_files/img/Image_0HYuA15AZn5hBUI3c25K9Q_0001.png]]


2)open a term in that folder where the exported html file is and issue
the following:

iconv -f utf-8//TRANSLIT -t utf-8 NCLINUX.html > nix.html

where :
 NCLINUX.html is the nc input html (-f is for that)
 nix.html is the output file (-t reffers to that)
 //TRANSLIT - tellsiconvtotransliterate characters, or convert
characters in the origin encoding to the closest possible matching
character in the target encoding. This may be necessary when converting
from something like UTF-8
 NOTE you may still get errors/crashes. look in the crash log, it will
tell you the text it crashed on and you can manually delete that.

3)then issue this with pandoc:
 pandoc -s -S nix.html -o nix.org
 to get a valid org file
 make sure the folder with images and attachments is located where the
org file will land. then issue a 'replace' in emacs while the org file
is open:
 FOLDERNAME/
 to:
 ./FOLDERNAME/
 this should enable image support

*** convert html to Org using pandoc
Org-mode:
 pandoc -s -S FILE.html -o FILE.org
 
*** convert formats to .org
**** convert using calibre to org

Basically, Calibre -> htmlz -> unzip -> pandoc:

#+BEGIN_EXAMPLE
$ cp ~/Calibre\ Library/Metz/Practi/.htmlz ./book.htmlz
$ unzip -q book.htmlz 
$ pandoc ./index.html -o book.org       
#+END_EXAMPLE

After that I usually have to global convert [[image/foo.png]] to
[[file:image/foo.png]] and add inlineimages to a start-up option on the
file.
 
*** convert html to Org using pandoc

Org-mode:
 pandoc -s -S README -o example27.org
 pandoc -s -S FILE.html -o FILE.org

[[http://johnmacfarlane.net/pandoc/demo/example27.org][http://johnmacfarlane.net/pandoc/demo/example27.org]]
 Warning if you get an error open the html file in an editor and
save it with utf-8 encoding

** dates
*** keybinds

C-c .
 org-time-stamp
 Prompt for a date and insert a corresponding timestamp. When the cursor
is
 at an existing timestamp in the buffer, the command is used to modify
this
 timestamp instead of inserting a new one. When this command is used
twice
 in succession, a time range is inserted.
 C-c !
 org-time-stamp-inactive
 Like C-c ., but insert an inactive timestamp that will not cause an
agenda
 entry.

** Functions
*** get rid of blank Lines

#+BEGIN_SRC emacs-lisp :results none
(defun flush-blank-lines ()
    "Removes all blank lines from buffer or region"
     (interactive)
     (save-excursion
       (let (min max)
         (if (equal (region-active-p) nil)
             (mark-whole-buffer))
         (setq min (region-beginning) max (region-end))
         (flush-lines "^ $" min max t))))
#+END_SRC 

*** Archived functions
**** Recursive find text
#+BEGIN_SRC emacs-lisp
;; recursively find txt in .org files in provided directory
;; to use press C-a s and type in search term (can use regex as well)
;; modified from an Emacs Lisp Intro example
(defun find-org-file-recursively (directory &optional filext)
  "Return .org and .org_archive files recursively from DIRECTORY.
If FILEXT is provided, return files with extension FILEXT instead."
  (interactive "DDirectory name: ")
  ;; Bind variables
  ;; (if (not (boundp 'directory))
  ;;     (setq directory (read-directory-name "Directory to search: ")))
  (let (org-file-list
	 (case-fold-search t)		; filesystems are case sensitive
	 (fileregex (if filext (format "^[^.#].\\.\\(%s$\\)" filext)
		      "^[^.#].\\.\\(org$\\|org_archive$\\)"))
	 (cur-dir-list (directory-files directory t "^[^.#]."))) ; exclude .
    ;; loop over directory listing
    (dolist (file-or-dir cur-dir-list org-file-list) ; returns org-file-list
      (cond
       ((file-regular-p file-or-dir) ; regular files
	(if (string-match fileregex file-or-dir) ; org files
	    (add-to-list 'org-file-list file-or-dir)))
       ((file-directory-p file-or-dir)
	(dolist (org-file (find-org-file-recursively file-or-dir filext)
			  org-file-list) ; add files found to result
	  (add-to-list 'org-file-list org-file)))))))

;;the above code snippet then is used in the native org mode org-agenda-text-search-extra-file setting set below
(setq org-agenda-text-search-extra-files
      (append (find-org-file-recursively "~/Dropbox/Org/" "org")
              (find-org-file-recursively "~/Dropbox/Org/" "tex")))


#+END_SRC
*** create a sparese tree function
You create an interactive function that simply calls
`org-match-sparse-tree' with the right match string:

#+begin_src emacs-lisp
  (defun my-cooking-sparse-tree-main ()
    (interactive)
    (org-match-sparse-tree t "+TODO=\"TODO\"+TYPE=\"main\""))
#+end_src

And now you can simply bind this command (thats what an interactive
function is called) to whatever you like:

#+begin_src emacs-lisp
  (define-key org-mode-map (kbd "<f1> c") 'my-cooking-sparse-tree-main)
#+end_src
** images
*** functions to insert images
***** Automatic screenshot insertion- Suggested by Russell Adams
Automatic screenshot insertion- Suggested by Russell Adams
#+BEGIN_SRC emacs-lisp
(defun my-org-screenshot ()
  "Take a screenshot into a time stamped unique-named file in the
same directory as the org-buffer and insert a link to this file."
  (interactive)
  (setq filename
        (concat
         (make-temp-name
          (concat (buffer-file-name)
                  "_"
                  (format-time-string "%Y%m%d_%H%M%S_")) ) ".png"))
  (call-process "import" nil nil nil filename)
  (insert (concat "[[" filename "]]"))
  (org-display-inline-images))
#+END_SRC

***** Automatic screen shot- BETTER method
#+BEGIN_SRC emacs-lisp 
   (defun paste-clipboard-to-file (&optional filename temp-dir)
     "Take a screenshot using the crosshairs and saveit to FILENAME,if it is given or to a temp file in the TEMP-DIR
     directory. Then add an orgmode style link at point."
     (interactive)
     (let ((temporary-file-directory (or temp-dir "images"))
            (fname (or filename (make-temp-file "img" nil ".jpg"))))
       (call-process-shell-command (concat 
                                     "/usr/bin/scrot -s -d 2 " fname))
       (insert "\n[[file:" fname "]]")
       (org-display-inline-images)))  
   ;;
   (global-set-key (kbd "C-c p") 'paste-clipboard-to-file)
#+END_SRC

*** get images to appear inline
make sure you have this in your config:

#+BEGIN_SRC emacs-lisp :results none
;;iimage in org (display images in org files)
(setq org-startup-with-inline-images t)
#+END_SRC

also you can manually toggle with:

?org-toggle-inline-images?

finally you can have this code:

#+BEGIN_SRC 
#+STARTUP: inlineimages
#+END_SRC

at the start of your org file

*** toggle inline inmage refresh 
use :

?M-x org-redisplay-inline-images?

to redisplay images
*** use attribut to specify size per image
use this on the line on top of your image

#+BEGIN_EXAMPLE
#+attr_org: :width 300
[IMAGE]
#+END_EXAMPLE

*** scale inline images in orgmode
You can use `org-image-actual-width' in your org config
choose one of the below 4 options:

`option 1`
#+BEGIN_SRC emacs-lisp
(setq org-image-actual-width 300)
#+END_SRC
always resize inline images to 300 pixels

`option 2`
#+BEGIN_SRC sh
setq org-image-actual-width '(400))
#+END_SRC
=> if there is a attribute associated with the image In example  
#+attr_html: :width 200px
Resize to 200,otherwise resize to 400

`option 3`
#+BEGIN_SRC sh
(setq org-image-actual-width nil)
#+END_SRC
=> if there is a attribute associated with the image In example  
#+attr_html: :width 200px
resize to 200, otherwise don't resize

`option 4`
#+BEGIN_SRC sh
(setq org-image-actual-width t)
#+END_SRC
=> Never resize and use original width ('the default')

$note: and example for an image inline with attributes$
#+attr_html: :width 500px
[[file:~/org/attach/images/gno_4_8722104799_04354338b1_z.jpg]]

*** define exported image size
add this in the line before the image link

#+ATTR_HTML: width="10px"
 
*** Replace previous PATHS to show as org

to replace exported html files with image linked to them do the following

using find and replace (C-S-5) add the ~file:~ prefix to the relative file path IE

#+BEGIN_SRC emacs-lisp
#From
[[/IMAGES/IMAGE.png]]
#to

[[file:/IMAGES/IMAGE.png]]
#+END_SRC

IE: from

1.images/

to 

file:1.images/gis10052003p2.png

** Latex
*** config
**** define export latex font 
#+LaTeX_CLASS_OPTIONS: [garamond]
*** writing
**** super/sub script
Just like in LaTeX, ‘^’ and ‘_’ are used to indicate super- and subscripts.
If you write a text where the underscore is often used in a different context, Org's convention to always interpret these as subscripts can get in your way.
Configure the variable 'org-use-sub-superscripts' to change this convention ₆In example₆ 
#+BEGIN_SRC emacs-lisp :results none
org-use-sub-superscripts nil        ;; don't use `_' for subscript
#+END_SRC 

When setting this variable to {}, ‘a_b’ will not be interpreted as a subscript, but ‘a_{b}’ will.
**** Special symbols
You can use LaTeX-like syntax to insert special symbols like ‘\alpha’ to indicate the Greek letter, or ‘\to’ to indicate an arrow. Completion for these symbols is available, just type ‘\’ and maybe a few letters, and press M-<TAB> to see possible completions. Unlike LaTeX code, Org mode allows these symbols to be present without surrounding math delimiters, for example:

'Angles are written as Greek letters \alpha, \beta and \gamma '
****  LaTeX fragments
LaTeX fragments don't need any special marking at all. The following snippets will be identified as LaTeX source code:

Environments of any kind. The only requirement is that the \begin and \end statements appear on a new line, at the beginning of the line or after whitespaces only.

Text within the usual LaTeX math delimiters. To avoid conflicts with currency specifications, single ‘$’ characters are only recognized as math delimiters if the enclosed text contains at most two line breaks, is directly attached to the ‘$’ characters with no whitespace in between, and if the closing ‘$’ is followed by whitespace, punctuation or a dash. For the other delimiters, there is no such restriction, so when in doubt, use ‘\(...\)’ as inline math delimiters.
For example:
#+BEGIN_EXAMPLE

     \begin{equation}
     x=\sqrt{b}
     \end{equation}
     
     If $a^2=b$ and \( b=2 \), then the solution must be
     either $$ a=+\sqrt{2} $$ or \[ a=-\sqrt{2} \].
#+END_EXAMPLE

*** bibtex
**** org bibtex commands
http://orgmode.org/worg/org-api/org-bibtex-api.html

'org-bibtex-export-to-kill-ring' Export current headline to kill ring as bibtex entry.

'org-bibtex-yank' If kill ring holds a bibtex entry yank it as an Org-mode headline.

'org-bibtex' (&optional filename) Export each headline in the current file to a bibtex entry. Headlines are exported using org-bibtex-export-headline.

'org-bibtex-create' (&optional arg nonew) Create a new entry at the given level. With a prefix arg, query for optional fields as well. If nonew is t, add data to the headline of the entry at point.

'org-bibtex-create-in-current-entry' (&optional arg) Add bibliographical data to the current entry. With a prefix arg, query for optional fields.
** links
*** Base
Org will recognize plain URL-like links and activate them as clickable links. The general link format, however, looks like this:
#+BEGIN_SRC 
[[link][description]]       or alternatively           [[link]]
#+END_SRC
If you place the cursor at the beginning or just behind the end of the displayed text and press <BACKSPACE>, you will remove the (invisible) bracket at that location. This makes the link incomplete and the internals are again displayed as plain text.
*** keybinds
http://orgmode.org/manual/Handling-links.html

| C-u C-c C-o | open link in EMACS         |
| C-c %       | mark position on org       |
| C-C &       | go back to marked position |
*** External Links
external linksstart with a short identifying string followed by a colon. There can be no space after the colon. The following list shows some examples for each link type.

#+BEGIN_EXAMPLE
     http://www.astro.uva.nl/~dominik          on the web
     doi:10.1000/182                           DOI for an electronic resource
     file:/home/dominik/images/jupiter.jpg     file, absolute path
     /home/dominik/images/jupiter.jpg          same as above
     file:papers/last.pdf                      file, relative path
     ./papers/last.pdf                         same as above
     file:/myself@some.where:papers/last.pdf   file, path on remote machine
     /myself@some.where:papers/last.pdf        same as above
     file:sometextfile::NNN                    file, jump to line number
     file:projects.org                         another Org file
     file:projects.org::some words             text search in Org file1
     file:projects.org::task title            heading search in Org file
     file+sys:/path/to/file                    open via OS, like double-click
     file+emacs:/path/to/file                  force opening by Emacs
     docview:papers/last.pdf::NNN              open in doc-view mode at page
     id:B7423F4D-2E8A-471B-8810-C40F074717E9   Link to heading by ID
     mailto:adent@galaxy.net                   Mail link
     gnus:group                                Gnus group link
     gnus:group#id                             Gnus article link
     bbdb:R.Stallman                          BBDB link (with regexp)
     irc:/irc.com/#emacs/bob                   IRC link
     info:org#External links                   Info node link
     shell:ls .org                            A shell command
     elisp:org-agenda                          Interactive Elisp command
     elisp:(find-file-other-frame "Elisp.org") Elisp form to evaluate
#+END_EXAMPLE

*** Links to org files (Internal) 
**** link to org mode Headline
-stand on the section you want to link to and press C-c l to store its location
then use C-c C-l to insert that save link (location when needed) 

-you can also specify it by file name::header name like this

[[file:/home/zeltak/Dropbox/Org/Tech/linux.org::Term color theme (.colors)]]

**** link to org mode Line Number
one can use line numbers in file using ::n where 'n' is the line number but thats not recommend
insert a link that looks like this:
[[file:/PATH/TO/ORGFILE::25]]
where the ::25 means line 25 in that file
[[black%20ice][black ice]]
*** Configure tab key or Enter key to follow links
;use RET or TAB to follow a link?
 (setq org-return-follows-link t)
 ;(setq org-tab-follows-link t)
*** Custom links
	 
**** Tag Searches
For another use case, the following code defines links which search your headlines for specific tags.
#+BEGIN_SRC emacs-lisp :results none
(org-add-link-type
 "tag"
 (defun endless/follow-tag-link (tag)
   "Display a list of TODO headlines with tag TAG.
With prefix argument, also display headlines without a TODO keyword."
   (org-tags-view (null current-prefix-arg) tag)))
#+END_SRC

Then, merely write your links as

#+BEGIN_EXAMPLE
[[tag:work+phonenumber-boss][NAMEOFLINK]]
#+END_EXAMPLE

The syntax allowed, described here:

http://orgmode.org/manual/Matching-tags-and-properties.html#Match-syntax

is the same used for the org-tags-view command.

**** Grep links
try this code

#+BEGIN_SRC emacs-lisp :results none
org-add-link-type
 "grep"
 (defun endless/follow-grep-link (regexp)
   "Run `rgrep' with REGEXP as argument."
   (grep-compute-defaults)
   (rgrep regexp "" (expand-file-name "./"))))
#+END_SRC

Then, when you click on something like the following link in an org-mode buffer, you'll be taken to a list of results.
#+BEGIN_EXAMPLE
TODO Refactor [[grep:OldClassName][OldClassName]] into NewClassName
#+END_EXAMPLE

[[Bittorrent-sync%20(btsync)][Bittorrent-sync (btsync)]] CLI Admin
*** org-id 
**** base commands

org-id-get-create
       Create an ID for the entry at point if it does not yet have one.
       Returns the ID (old or new).  This function can be used
       interactively, with prefix argument the creation of a new ID is
       forced, even if there was an old one.

org-id-get
       Get the ID property of an entry.  Using appropriate arguments
       to the function, it can also create the ID for this entry.

org-id-goto
       Command to go to a specific ID, this command can be used
       interactively.

org-id-get-with-outline-path-completion
       Retrieve the ID of an entry, using outline path completion.
       This function can work for multiple files.

org-id-get-with-outline-drilling
       Retrieve the ID of an entry, using outline path completion.
       This function only works for the current file.

org-id-find
       Find the location of an entry with specific id.

**** copy and id and linking to an id in orgmode
to copy an id `use org-id-copy` (also creates one if missing on header for you)

to link to it use in org the internal `id` command:
id:B7423F4D-2E8A-471B-8810-C40F074717E9  >>> Link to heading by ID

so you would go:
#+BEGIN_EXAMPLE
id: PASTE ID FROM KILL RING
#+END_EXAMPLE

$Note$ you can also use this in the config and then the copied id's will appear in the normal insert link menu (default bound to C-c C-l

#+BEGIN_SRC emacs-lisp :results none
(setq org-id-link-to-org-use-id t)
 #+END_SRC

*** force open links in Emacs 
**** for documents (docview)
docview:papers/last.pdf::NNN              open in doc-view mode at page 
**** general open by Emacs
file+emacs:/path/to/file                  force opening by Emacs
*** link to a gmail mail

http://permalink.gmane.org/gmane.emacs.orgmode/48056

1. Open your gmail account (log-in)
2. Open the mail you like to refer too.
3. Copy the URL
4. Add the URL as a link (C-c C-l) to your org-file


After that, clicking on the link will open the mail directly in your standard webbrowser. If you logged out from google mail in between, you are ask to log-in first, after that select the link again.

But it is getting even better. You are not only able to link to particular mails within org-mode, but also to google mail labels (folders) or search results.

To make it even more org-mode friendly one can set-up org-capture in your webbrowser:
I added the following to the org-capture-templates list

("g" "Gmail-link" entry (file+headline "~/org/work.org" "Gmail-links") "%A")

Thus, pressing the assigned button in your browser and emacs will ask you what kind of link you want to add to your file. Press g for gmail and enter the description for the link (this could be done automatically, but I find it to long and not helpful). You will find the link in your capture buffer in emacs for further processing

*** connect to ssh link in xterm in org file
One day after being particularly frustrated when I couldn’t get into a box, I was adding yet another entry to ~/.ssh/config only to realize it was in there twice already, I decided to turn this problem into a nail so I could use my universal hammer, emacs.

#+BEGIN_EXAMPLE
(defun jgk/xterm-ssh (host)
  "Spawn a xterm with a ssh to the host"
  (start-process-shell-command "*org-xterm-ssh*" "ssh-xterm" "xterm" "-e"
                               (concat "'ssh -AY "  host "'")))
#+END_EXAMPLE

I now have an org file for each project I work on and can create links that will let me ssh into a system with a ‘click’

#+BEGIN_EXAMPLE
[[elisp:(jgk/xterm-ssh "username@192.168.15.218")][Magical Mystery Machine]]
#+END_EXAMPLE

Since it is in org mode I can now categorize and tag these links. I can take notes and use tramp to open directories.

I am slowly adding systems in as I need them. I have found the ability to keep notes and a basic log of what and why I was there to be invaluable.

If you need to access a lot of random systems you should try this, it has made my life sane
*** add a link to a org todo view
use this format with the elisp function 
#+BEGIN_SRC emacs-lisp :results none
[[elisp:(org-agenda%20nil%20"w")][TO-COOK]]
#+END_SRC

** attach
*** set default dir
#+BEGIN_EXAMPLE
(setq org-attach-directory "/home/zeltak/org/attach/")
#+END_EXAMPLE

** look and feel
*** TODO make subfolders folded(hidden) by default
use this

#+BEGIN_EXAMPLE
:PROPERTIES:
:VISIBILITY: folded
:END:
#+END_EXAMPLE

*** Applying Markup to Strings in org-mode
Normally, org-mode ignores your attempts to markup text that starts with " or '. That’s probably a safe measure because "~/" is a very common string to write but ~ is one of Org’s markup elements.

Fixing that is a simple matter, but it takes a bit of digging around. We just need to remove those two characters from the 3rd element of org-emphasis-regexp-components.
#+begin_src emacs-lisp
;; This HAS to come before (require 'org)
(setq org-emphasis-regexp-components
      '("     ('\"{“”"
        "-   .,!?;''“”\")}/\\“”"
        "    \r\n,"
        "."
        1))
#+end_src
*** Changing the org-mode ellipsis
http://endlessparentheses.com/changing-the-org-mode-ellipsis.html?source=rss
The dot-dot-dot ellipsis that org-mode uses to indicate hidden content is usually just fine. It’s only when you’re staring at a document where every line is a folded headline, that you start to feel like they’re a little too much “in your face”. I have a few org files with thousands of lines and hundreds of headlines, and changing that ... to something shorter greatly reduces visual clutter.
The more straightforward option is to use a proper ellipsis character (the same effect with a third the length).

#+BEGIN_SRC emacs-lisp
(setq org-ellipsis "…")
;The one I’m currently using is a cornered arrow.
(setq org-ellipsis "⤵")
#+END_SRC

Other interesting characters are ▼, ↴, ⬎, ⤷, and ⋱.
** org-google sync 
*** org-gcal
    :PROPERTIES:
    :ID:       20c1b2ad-bd42-4c37-9354-5c54c5fa8382
    :END:
https://github.com/myuhe/org-gcal.el

org-gcal is now available in the famous emacs package repo MELPA, so the recommended way is to install it through Emacs package management system.

to configure: 

`Go to Google Developers Console`
Create a project (with any name)
Click on the project
Click on APIs & Auth then Credentials
Click on Create New Client ID with Application type Installed application, Installed application type Other
Click on Create Client ID
Record the Client ID and Client secret for setup.
Under the same APIs & Auth menu section, select APIs
Scroll down to Calendar API. Click the Status button to enable calendar API access to the app you created in steps 5 & 6.

`Go to Google setting page`
Go to Google setting page and click the gear-shaped settings icon in the upper right, then select “Settings” from the drop down list.
Select the “Calendars” tab, which will display a list of your calendars.
Select the calendar you would like to synchronize with. This will take you to the “Calendar Details” page for that calendar. Near the end is a section titled “Calendar Address”. Following the XML, ICAL, and HTML tags, you will see your Calendar ID.
Copy the Calendar ID for use in the settings below, where you will use it as the first element in the org-gcal-file-alist for associating calendars with specific org files. You can associate different calendars with different org files, so repeat this for each calendar you want to use.

`Setting example`
#+BEGIN_SRC emacs-lisp :results none
(require 'org-gcal)
(setq org-gcal-client-id "DEVELOPER ID"
      org-gcal-client-secret "DEVELOPER SECRET KEY"
      org-gcal-file-alist '(
("CALANDER-ADRESS-FROM-GOOCAL@GOOGS.COM" .  "~/org/files/agenda/gcal.org")

))
#+END_SRC

`Usage`

#+BEGIN_SRC emacs-lisp :results none
org-gcal-sync
#+END_SRC

Sync between Org and Gcal. before syncing, execute org-gcal-fetch .
** org-reveal
*** install
**** Obtain Reveal.js
Download Reveal.js packages from the website
Extract Reveal.js folders from the downloaded zip file or just clone the repo using git
move it to the desired location
₆In example₆ 
file://home/zeltak/apps/reveal.js
**** Obtain Org-reveal
Download the latest Org-reveal package from the Org-reveal GitHub page Or clone the GitHub repository:
#+BEGIN_SRC sh
$ git clone https://github.com/yjwen/org-reveal.git
#+END_SRC
then configure Emacs init to load at startup

$Note$ you will need to also set the root of reveal-js using URI format (see below)
The location of Reveal.js is the path to the top directory of the Reveal.js packages, the directory which contains file README.md, but not the one that contains the file reveal.js.

#+BEGIN_SRC emacs-lisp :results none
(add-to-list 'load-path "/home/zeltak/.emacs.g/org-reveal")
(require 'ox-reveal)
;;where the root reveal folder is
(setq org-reveal-root  "file:///home/zeltak/apps/reveal.js")
(load-library "ox-reveal")
#+END_SRC
**** Url form for file location

For example if you cloned this repository to your home directory, this file in Mac OS X would be referred to as “file:///Users/username/org-reveal/readme.org”. This file in Ubuntu would be “file:///home/username/org-reveal/readme.org” and in Windows this file would be “file:///c:/Users/username/org-reveal/readme.org”. For more detail on this standard please refer to http://en.wikipedia.org/wiki/File_URI_scheme
#+BEGIN_EXAMPLE
#+REVEAL_ROOT: file:///d:/reveal.js
;Set your REVEAL_ROOT to the following URL to download reveal.js from a CDN instead of downloading a local copy.
#+REVEAL_ROOT: http://cdn.jsdelivr.net/reveal.js/3.0.0/
#+END_EXAMPLE

*** Code highlights
make sure the highlight plug-in *isn't* marked/on
#+BEGIN_EXAMPLE
#$Note$ below is commented on
# REVEAL_PLUGINS: (highlight markdown notes)
#+END_EXAMPLE

also make sure the library htmlize.el is installed.

*** print to pdf 
This feature requires that you use Google Chrome or Chromium.

add a ?print-pdf to your URL
#+BEGIN_EXAMPLE
file:///home/zeltak/org/files/Uni/Courses/BGU.R/stat.l1.html?print-pdf
#+END_EXAMPLE
This triggers the default index HTML to load the PDF print stylesheet (css/print/pdf.css). You can test this with lab.hakim.se/reveal-js?print-pdf.
Open the in-browser print dialog 
Change the Destination setting to Save as PDF.
Change the Layout to Landscape (may not be present in all chrome versions)
Change the Margins to None.
make sure background graphics are checked
Click Save.
*** headings
If HLevel is 1, the default value, headings H2.1 and H2.1.1 will be mapped to vertical slides below the slides of heading H2.

#+DOWNLOADED: /tmp/screenshot.png @ 2015-10-20 12:32:54
#+attr_html: :width 300px
 [[~/Sync/attach/images_2015/screenshot_2015-10-20_12-32-54.png]]
If HLevel is changed to 2, slides of heading H2.1 will be changed to the main horizontal queue, and slides of heading H2.1.1 will be a vertical slide below it


#+DOWNLOADED: /tmp/screenshot.png @ 2015-10-20 12:33:06
#+attr_html: :width 300px
 [[~/Sync/attach/images_2015/screenshot_2015-10-20_12-33-06.png]]

Configure HLevel’s Value

Change variable org-reveal-hlevel’s value to set HLevel globally.
For example, add the following statement to your .emacs file.
#+BEGIN_EXAMPLE
(setq org-reveal-hlevel 2)
;Setting Org files local HLevel to option REVEAL_HLEVEL.
#+REVEAL_HLEVEL 2
#+END_EXAMPLE
*** split a large slide (force split)
Force Split

If one heading has too many things to fit into one slide, you can split the contents into multiple vertical slides manually, by inserting

#+BEGIN_EXAMPLE
#+REVEAL: split
#+END_EXAMPLE

example slide:
#+BEGIN_EXAMPLE
 code or source code: The sequence of instructions in a program.

 syntax: The set of legal structures and commands that can be used in a particular programming language.
#+REVEAL: split
 output: The messages printed to the user by a program.

 console: The text box onto which output is printed.
 Some source code editors pop up the console as an external window, and others contain their own console window.
#+END_EXAMPLE
*** Select Theme and Transition

Themes and transition styles are set globally throughout the whole file by setting options REVEAL_THEME, REVEAL_TRANS, and REVEAL_SPEED.

For an example, please check the heading part of this document.

Available themes can be found in “css/theme/” in the reveal.js directory.

Available transitions are: default|cube|page|concave|zoom|linear|fade|none.
*** slide options
//Push each slide change to the browser history  
history: false

// Transition style
    transition: default, // none/fade/slide/convex/concave/zoom
*** keyboard
【o】 overview mode
【s】 slide notes
【F】 full screen mode

*** Set Slide Background
Slide background can be set to a color, an image or a repeating image array by setting heading properties.
Single Colored Background
Set property reveal_background to either an RGB color value, or any supported CSS color format.
**** Single Colored Background
     :PROPERTIES:
     :reveal_background: #123456
     :END:
 Single Image Background

 Set property reveal_background to an URL of background image. Set property reveal_background_trans to slide to make background image sliding rather than fading.

**** Single Image Background
     :PROPERTIES:
     :reveal_background: /home/zeltak/org/attach/bgu/courses/BGU.R/images/hist_BD.jpg
     :END:	  
**** Title Slide Background Image
 To set the title slide’s background image, please specify the following options:

 REVEAL_TITLE_SLIDE_BACKGROUND: A URL to the background image.
 REVEAL_TITLE_SLIDE_BACKGROUND_SIZE: HTML size specification, e.g. 200px.
 REVEAL_TITLE_SLIDE_BACKGROUND_REPEAT: set to repeat to repeat the image.
*** Raw HTML in Slides (youtube)
Besides the Org contents, you can embed raw HTML contents into slides by placing a #+REVEAL_HTML keyword.
₆In example₆ 
#+BEGIN_EXAMPLE
#+REVEAL_HTML: <iframe width="560" height="315" src="https://www.youtube.com/embed/kL1QbQeB37k" frameborder="0" allowfullscreen></iframe>
#+END_EXAMPLE
*** images on the left and right using tables
Simply embed the image into your paragraph.

Slide 1

#+BEGIN_EXAMPLE
Some text [[./some_image.jpg]].
#+END_EXAMPLE

But for a better control on the layout, table is suggested.

#+BEGIN_EXAMPLE
| Some text | [[./some_image.jpg]] |
#+END_EXAMPLE
*** Speaker Notes

Reveal.js supports speaker notes, which are displayed in a separate browser window. Pressing ‘s’ on slide’s windows will pop up a window displaying the current slide, the next slide and the speaker notes on the current slide.

Org-reveal recognize texts between #+BEGIN_NOTES and #+END_NOTES as speaker notes. See the example below.

#+BEGIN_NOTES
  Enter speaker notes here.
#+END_NOTES

Speaker notes requires the notes plug-in. If you changed default plug-in setting by specifying #+REVEAL_PLUGINS or by setting variable org-reveal-plugins, please make sure notes is in the plug-in list to enable speaker notes.

Easy-Template for Speaker Notes

Org-reveal registers ‘n’ as the key for speaker notes easy-template. So you can press ‘<’ followed by ‘n’ and then press TAB, the #+BEGIN_NOTES and #+END_NOTES pair is inserted automatically.

Customize org-reveal-note-key-char to change the default key ‘n’. set it to nil will forbid the auto-completion for speaker notes.
*** change the fonts size per slide or even better per specific line/region?
You can use CSS to overwrite the style of any Reveal.js element.
Org-reveal exports each slide into sections with id tag like <section id="slide-orgheadline1">, the tailing number changes for each slide. So you can overwrite one slide's style in a CSS like:

#+BEGIN_EXAMPLE
slide-orgheadline1 {
 ...
}
#+END_EXAMPLE
*** change slides alignment
**** change for entire slide
create a custom css file: file:/home/zeltak/org/files/Uni/Courses/css/left.aligned.css

#+BEGIN_EXAMPLE
.reveal p {
    text-align: left;
}
#+END_EXAMPLE

then call for the file in your org buffer header
#+BEGIN_EXAMPLE
#+REVEAL_EXTRA_CSS: /home/zeltak/org/files/Uni/Courses/css/left.aligned.css
#+END_EXAMPLE
all your slide should be left aligned

* EOF settings
Local variables:
buffer-read-only: t
End:
#+END_SRC
 

