#+TAGS: Fav(f) Most_used(m) PreR(p)
#+TITLE: TODO
#+STARTUP: overview  inlineimages eval: (org-columns)
#+LaTeX_CLASS_OPTIONS: [garamond]


* @TODAY@							  :CANCELLED:
  :PROPERTIES:
  :ID:       70feaa43-c66b-4675-89f5-9ae26bddc03e
  :END:
** TODO tackle org capture DE/WM  popup
** macro for close window and focus previous one as full frame 
** sunrise
*** questions 
1) REQUEST: if there is only 1 match left in fuzzy match- can SR auto select it (that is enter dir)

3) how is checkpoint different from boomarks? the documentation is sparse on this point, when I issue sr-restore-checkpoint I still get my normal Emacs boomakrs there as well

5) for sr-show-files-info can the return info be in MB/GB (and not fubytes :))


Hi again zeltak :-)

In order:

1) M-x customize-variable [RET] sr-show-file-attributes [RET]
2) That's weird. Can you find a way to reproduce the problem reliably?
3) Just adding (define-key sr-mode-map (kbd "/") 'sr-fuzzy-narrow) to your .emacs file should do the trick
4) That's because you can create only one tab per directory. If you move to another directory you'll be able to create another tab.
5) I don't know what that configuration is for, but all you should need to care about is having avfsd correctly configured and running and having the `sr-avfs-root' variable pointing to the directory where avfs is mounted. Take a look at this tip: http://www.emacswiki.org/emacs/Sunrise_Commander_Tips#toc12
6) Press r -- it will reverse whatever order you have selected and it's sticky.
7) What kind of commands would you like to write? Shell commands? Actually the best way would be to know a little Emacs lisp, but without it there's still a few things one can do:
7.a) Learn how to create and save keyboard macros (http://www.gnu.org/software/emacs/manual/html_node/emacs/Keyboard-Macros.html#Keyboard-Macros) -- then you'll be able to record your command as a macro, bind it to a key and replay it anytime you want.
7.b) Write regular scripts (e.g. shell scripts), save them into a bookmarked directory so you can easily find them whenever you need and execute any of them by pressing the "X" key in SC (of course, the script must have the executable flag set for this to work.)
7.c) In any case, nothing gives you as much rope as learning some Emacs lisp. And it's not at all difficult. Here's some good reading that may convince you better than I could: https://www.gnu.org/software/emacs/manual/html_node/eintr/ -- if this succeeds at whetting your appetite, as I hope, why not start right away? https://www.gnu.org/software/emacs/manual/html_node/eintr/


*** Navigation
Advanced navigation and location tracking.
Sunrise offers a few advanced mechanisms for moving around and keeping track of locations besides the traditional point-and-click. You can:

Press Return (or click) on any point of the directory path at the top of any of the panes to jump directly to that location in the file system.
Install the sunrise-x-modeline extension to get a similar path in the mode line, where you can see it all the time, even when scrolling long dirs.
Install the sunrise-x-tree extension to rapidly move to any directory in the file system using a tree-like hierarchical view like the one offered by navigator-style file managers.
Install the sunrise-x-tabs extension to be able to put pane buffers in tabs and to keep them around with all their marks and state untouched (tabs can be persisted across sessions using the DeskTop feature.)
Use the listings of recent files (C-c C-r) and recent directories (C-c C-d) to reuse the paths to already visited files and directories. Recent files are managed by recentf and automatically persisted across emacs sessions. If you want the same for recent directories you can use the savehist persistence mechanism:
            1. M-x customize-group RET savehist RET
            2. Set savehist-mode to ON
            3. Add sr-history-registry to ``Savehist Additional Variables''
            4. Click on ``Save for future sessions''
Use Sunrise checkpoints. Checkpoints are special bookmarks you can create for both panes simultaneously by pressing C-> (or C-c > in the console) and giving a name for the checkpoint. To recall it, press C-. (or C-c . in the console). On Emacs 23 checkpoints can be listed along with all your other bookmarks using the bookmark-bmenu-list command (C-x r l). On Emacs 22 there is no other way to list the currently defined checkpoints than M-: sr-checkpoint-registry RET, but they may be saved across Emacs session too with savehist (the variable to persist is sr-checkpoint-registry). Since version 4 of the Sunrise Commander, checkpoints are provided as a separate extension: sunrise-x-checkpoints for Emacs 23 or upgraded versions of the bookmarks.el library, and sunrise-x-old-checkpoints for Emacs 22.
Make you own “favorites” virtual directories. Assign an extension to sunrise virtual buffers (there’s an explanation of how to do it in the comments to the Sunrise Commander) and press C-c C-v to create a pure virtual buffer. You can copy files and directories from the other pane to this one, and then save it as a file with your extension. Whenever you open the file later, Sunrise will see it as a directory like any other, where you can copy, rename, delete, etc. CAREFUL! what you delete in a virtual dir gets removed from the file system too! to remove a line only from your virtual dir just mark it (m), kill it (k) and save the file. You can create as many files like this for work, hobbies and whatnot and keep them at hand in you home directory.
Use path projection to quickly navigate within similar directory trees. If you have, say, the trunk version of a project from SVN in directory trunk/ and your latest and greatest branch in directory branch/, whenever your active pane is displaying branch/some/deeply/nested/dir and your passive pane is at trunk/ (or trunk/some, or trunk/some/deeply) you can jump directly to directory trunk/some/deeply/nested/dir in the passive pane by simply pressing C‐M‐o in the active one. It’s a bit similar to synchronizing the panes (M‐o), but constrained to the directory being currently displayed in the passive pane. If there is more than one possible target you can alternate through all of them by simply pressing C-M-o repeatedly.


*** TODO Org Links in Sunrise Commander
https://github.com/bnbeckwith/bnb-Emacs


Storing links from Sunrise-commander

(add-hook 'org-store-link-functions 'org-diredish-store-link)

(defun org-diredish-store-link ()
  "Store link to files/directories from dired."
  (when (derived-mode-p 'dired-mode)
    (let ((f (dired-filename-at-point)))
      (setq link (concat "file+system" ":" f)
            desc (concat f " (dired)"))
      (org-add-link-props :link link :description desc)
      link)))
*** AVFS
'(sr-virtual-listing-switches "-al --group-directories-first")




** bookmark+ link to orgid
I guess someone who uses OrgMode (I don’t) would need to code that up. But have you tried just bookmarking a header line location? When you bookmark a position, bookmarking keeps track of the immediately surrounding text, to use to relocate the position when the buffer gets modified. Or try bookmarking some text immediately preceding or following a header
** keys reahual
*** Emacs
make changing windows similar to i3 and tmux
change C-S up/down to move lines 
** org latex CV
Unlike the others who've commented, I moved my CV from LaTeX to org-mode and I'm happy with the results. Two things make it work well.

First, a "cv" class added to org-latex-classes:
#+BEGIN_SRC emacs-lisp :results none
(add-to-list '("cv" "\\documentclass[10pt]{article}\n\\usepackage[margin=.75in]{geometry}\n%\\usepackage{palatino}\n\\usepackage{sectsty}\n\\sectionfont{\\normalsize\\selectfont\\itshape}\n\\usepackage[T1]{fontenc}\n\\usepackage{libertine}\n\\renewcommand*\\oldstylenums[1]{{\\fontfamily{fxlj}\\selectfont #1}}"
  ("\\section{%s}" . "\\section*{%s}")))
#+END_SRC

Second, something like the following at the top of the org file (replace with your particulars):

#+OPTIONS: author:nil timestamp:nil
#+TITLE:
#+DATE:
#+LaTeX_CLASS: cv

#+BEGIN_LATEX
\begin{flushleft}
  \bfseries\Large Curriculum Vitae\hfill Daniel M. Griswold\normalfont
\end{flushleft}

\vspace{-12pt}%
\begin{flushright}
  69 Stratton Road\\
  Rochester, NY 14610\\
  (585) xxx-xxxx\\
  dgriswol@xxxxx.com\\
  \hrulefill
\end{flushright}
#+END_LATEX

Main headings are things like:

*** Education
*** Specialization
*** Employment
*** Publications
*** Awards and Honors
and the details below each of these headings are simply unordered lists
** org revison
*** TODO todo
create todos based on tags and TODO
for example todo with allan (tag)

**** TODO Tasks in multiple projects?
Tasks can live in multiple projects, so there’s no need to duplicate work. This is especially useful for cross-functional Teams.
**** Merge Duplicate Tasks?
*** calander
*** email
*** refrence library
**** change and clean lib
change key to exclude ()
clean umicode
**** helm-bibtex
***** exclude search items
 ₆In example₆ 
 xebar - in progress 
 (I want to exclude in progress articles not published yet)

***** define default enter command
***** open in Emacs PDF viwer

***** TODO create filed for projects? maybe use the tag field?
**** org-ref- to insert citations
https://github.com/jkitchin/org-ref/blob/master/org-ref.org
check out:
***** jmax-bibtex-hydra/body
***** TODO org-ref-clean-bibtex-entry

figure this out 
***** COMMENT workflow
C-] 
org-ref-helm-insert-cite-link
to insert ref into orgmode buffer 

clicking/C-c o on a link will give you a helm buffer with options 

for multiple cites just use C-space in the helm buffer to choose

shift-arrows move around

org-ref-sort-citation-link will sort by year

org-ref-extract-bibtex-entries to create a list of all cites used in document

org-ref
to check buffer for ref issues and a menu of org-ref options 

**** reftex?
http://tex.stackexchange.com/questions/18848/workflow-for-managing-references/18855#18855
**** biber?
look into how to convert to biber
**** biblatex 							  :CANCELLED:
**** bib2bib
http://www.cse.msu.edu/~cse914/F02/Public/Papers/Bibtex/bibtex2html-doc.htm
**** cb2Bib
**** bibtool
http://www.gerd-neugebauer.de/software/TeX/BibTool/index.en.html
generate keys?
*** revise leuven for better agenda/TODO color scheme
*** R
**** update template to use codeblock name
also see:
On top of the line starting with #+RESULTS:, we shall add two more lines, to give the table a title and a name. Note that both the code block and the result of the code block have separate names.
#+NAME: bmi-table-output
#+CAPTION: Average BMI, by country
#+RESULTS: bmi-table-code
**** Code blocks that produce a graph to be included in the document

These code blocks can have a series of commands. The last command produces a graph that we would like to be included in the document.

The following code shows an example of a code block that produces a graph.

#+NAME: mygraph-code
#+BEGIN_SRC R :results output graphics :file bmi2.png :width 825 :height 1050 :fonts serif

#+END_SRC
As before, for creating your graph, you first write the #+NAME, BEGIN_SRC and the END_SRC lines, and then go into a temporary ESS buffer by using C-c ‘.

Once in this temporary ESS buffer, you can write the R commands for making your graph.
As you write, you can evaluate the commands using C-j, C-r and C-b and see what your output looks like.
The output is displayed on your screen using the default graphic device used by R (X11, quartz or windows graphic device depending upon your operating system).
Once you have finalised your graph, you press C-c ’ and come back to the Org buffer.
Note that creation of the image file is left to appropriate switches in the #+BEGIN_SRC line. Org automatically chooses appropriate graphic device to produce the file. When you evaluate this code using C-c C-c, the results are displayed below the code block as follows.

#+RESULTS: mygraph-code
[[bmi2.png]]
Note that, taking the file name from our #+BEGIN_SRC line, a file called bmi2.png was automatically created and linked, so that the graph would be inserted in the document when you produce the formatted output.[fn:5] Every time you evaluate the code using C-c C-c, the underlying image file containing the graph is overwritten by a new file.

As with the tables, we shall add a caption and a name to it as follows

#+NAME: my-bmi-graph
#+CAPTION: Average BMI, by Country
#+RESULTS: mygraph-code
[[gini.png]]
You can now refer to this graph in the text using [[my-bmi-graph]].

*** org capture
** helm bibtex notes
I worked on the note-files branch and as far as I’m concerned it
is ready to be merged into master.  There are several changes:

When one big notes file is used:

- The new default template for notes is simpler than what org-ref uses
  but it should be compatible because it uses the Custom_ID property to
  store the key.
- Note templates can be defined in `helm-bibtex-notes-template`.
- The list of publications now shows a mark if notes are available for a
  publication.
- Finding the correct entry is now robust because the code looks for
  `Custom_ID: key` not just for the key.

Multiple note files (one for each publication):

- The template for notes is used to populate new note
  files.  (Previously it was only used in the case with one big notes
  file.)

** explore worf-mode
;;; Commentary:
;;
;; This extension works similar to http://orgmode.org/manual/Speed-keys.html,
;; while adding in a bit of vi flavor.
;;
;; Representing the point with "|", pressing a-z, A-Z, or 0-9 while
;; the text is as below will call a command instead of inserting these
;; characters:
;;
;;   |* foo
;;   *|* bar
;;   |#+ baz
;;
;; As you see, the general theme is beginning of line + org markup.
;; Below, "#+..." will be referred to as markup.
;; Similar to vi, "hjkl" represent the arrow keys:
;;
;; - "j" moves down across headings and markup, but does not switch
;;   between either: use "h"/"l" for that. The exception is the first
;;   markup in the file that does not belong to any heading.
;;
;; - "k" moves up across headings and markup, with same rules as "j".
;;
;; - "h" moves left, i.e. to the parent heading of current thing.
;;   You can use it e.g. to go from fifth level 3 heading to the
;;   parent level 2 heading, or from the second source block to the
;;   parent heading.
;;
;; - "l" moves right (i.e. to the first child of current heading).
;;   You can use it to get to the first markup of current heading.
;;
;; Worf borrows the idea of verbs and nouns from vi: the commands are
;; sentences, combinations of a verb and a noun used together.
;; Verb #1 is "goto", which is implicit and active by default.
;;
;; 5 nouns are available currently:
;; "h" - left
;; "j" - down
;; "k" - up
;; "l" - right
;; "a" - add heading
;; "p" - property
;;
;; Verb #2 is `worf-change-mode', bound to "c". Verbs in worf are
;; sticky: once you press "c", change verb will be active until you
;; switch to a different verb. This is different from vi, where the
;; verb will deactivate itself after the first command.
;;
;; Use the same letter to deactivate a verb as to activate it,
;; i.e. "c" will deactivate `worf-change-mode'.  "q" will universally
;; deactivate any verb and return you to "goto" implicit verb.
;;
;; While `worf-change-mode' is active, "hjkl" move the current heading
;; in appropriate directions: it's the same as holding "M-" and using
;; arrow keys in the default org.
;; "p" will change the selected property.
;;
;; Verb #3 is `worf-change-tree-mode', bound to "cf".  While
;; `worf-change-tree-mode' is active, "hjkl" move the current heading
;; tree in appropriate directions: it's the same as holding "S-M-" and
;; using arrow keys in the default org.
;;
;; Verb #4 is `worf-change-shift-mode', bound to "cs".
;; It make "hjkl" act as "S-" and arrows in default org.
;;
;; Verb #5 is `worf-keyword-mode', bound to "w". You select a keyword
;; e.g. TODO or NEXT and "j"/"k" move just by the selected keyword,
;; skipping all other headings. Additionally "a" will add a new
;; heading with the appropriate keyword, e.g. "wta" will add a new
;; TODO, and "wna" will add a new "NEXT".
;;
;; Verb #6 is `worf-clock-mode', bound to "C". This one isn't sticky
;; and has only two nouns that work with it "i" (in) and "o" (out).
;;
;; Verb #7 is `worf-delete-mode', bound to "d". This one isn't sticky
;; and changes the behavior of "j" to delete down, and "k" to delete
;; up. You can mix in numbers to delete many times, i.e. d3j will
;; delete 3 headings at once.
;; "p" will delete the selected property.
;;
;; Verb #8 is `worf-yank-mode', bound to "y". It's similar to
;; `worf-delete-mode', but will copy the headings into the kill ring
;; instead of deleting.
;;
;; Verb #9 is `worf-mark-mode', bound to "m". It's similar to
;; `worf-delete-mode', but will mark the headings instead.
;;
;; Some other things included in worf, that don't fit into the
;; verb-noun structure, are:
;;
;;  - "o" (`worf-ace-link'): open a link within current heading that's
;;    visible on screen. See https://github.com/abo-abo/ace-link for a
;;    package that uses this method in other modes.
;;
;;  - "g" (`worf-goto'): open a `helm' outline of the current buffer.
;;    It's very good when you want to search/navigate to a heading by
;;    word or level. See https://github.com/abo-abo/lispy for a
;;    package that uses this method to navigate Lisp code.
;;
;;  - "L" (`worf-copy-heading-id'): copy the link to current heading
;;    to the kill ring. This may be useful when you want to create a
;;    lot of links.
;;

;;; Code:
** look at  org sh links
[[shell:sudo%20pacman%20-Syu][http://orgmode.org/manual/External-links.html#External-links

shell:sudo pacman]] 
** screen blanking 
loQok at 
xset dpms 600

** screen saver time length by location (IP)
** i3 revise
*** TODO have win+grave cycle through clients of same type

** rofi tmux switch to pane
** list of known laptop issues
*** network drops
happnes both with LAN and wifi
happens with dock connected and with local laptop adaptor
could be just internet and not network related? maybe the internet drops and not network..
** bind keys at debian PC to ssh and control MPD
** create a daily agenda in orgmode somwhow
will show me things to do today ranked 
** TODO ask rasi for clerk 2 listen menu entry where it would go over a 2play playlist
implemented check it

** create org task to go over org refile every week 
** paste as a code block
ask about pasting clipbored text as a codeblock

** ask qball:
crazy idea: foucs Emacs client and switch to a specific buffers
** help file revison
try to find a way to do a refile/archive/function like thing that will copy a line/header to a defined file
idealy: a function to copy current line, ask which file to copy to (like refile) and open file in next buffer. bonus check if that line start already exist and if so warn and paste below  that line.
** source in R with output
 zeltak: source("blah.r",verbose=TRUE) ?                                                      
 yeah happy holidays etc etc                                                                  
 bosie: thx ill try that :)                                                                   
 zeltak: source("blah.r",verbose=TRUE, print.eval=TRUE) maybe

** unicode 
༜ ⌘ ⎈ ▣ ◨ ★ ☎ ☘  ⚉  ◈
◈ ⚫ ⚑ ⚒ ✔✓ ✜ ✙ ✠ ✥ ✤ ✪
✬✱✹ ✾ ✽ ❤ ➠ ⭤⮀☍⛢
** a new Emacs pop up window for helm chrome bookmarks
** custom agenda example 
I use a "@Q2" tag for things that are
important and not urgent, and I reserve some time to work on them. The
ones I'm currently working on are scheduled, and they are shown in my
custom agenda view using this:

#+begin_src emacs-lisp
("q" "Q2 tasks"
 ((agenda
   ""
   ((org-agenda-overriding-header "Q2 Scheduled")
    (org-agenda-skip-function '(org-agenda-skip-entry-if 'notregexp ":@Q2:"))))
  (tags-todo
   "@Q2/!-HOLD-WAITING"
   ((org-agenda-overriding-header "Q2")
    (org-agenda-todo-ignore-deadlines t)
    (org-agenda-todo-ignore-scheduled t)))))
#+end_src


** change stow so no more common configs
check patst.sh in ZH_tmp
check tarman
org habit s
** tmux
*** why isn't TAB working in Emacs (org mode)
** set all mime related to web to chromium
#+BEGIN_SRC sh
for mime in $(awk -F'=' '/Mime/ {print $2}' /usr/share/applications/chromium.desktop |  
tr ';' ' '); do xdg-mime default chromium.desktop $mime; gvfs-mime --set $mime          
chromium.desktop; done                                                                  
#sets chromium as default handler for all protocols it supports                          


#+END_SRC

** org sparese
punchagan | zeltak: it looks like properties need to be all upper case. 
 punchagan | zeltak: for instance I changed Ammount to AMMOUNT
 punchagan | and it workd.. 
    zeltak | wow ok let me try
    zeltak | holy crap
    zeltak | it worked
    zeltak | so what was it..wow i guess i missed it in the manual
 punchagan | zeltak: and it's a bug.. :)
    zeltak | hehe :)
 punchagan | zeltak: I don't think there is a hard and fast rule specified anywhere in the manual
 punchagan | in face the properties section in the manual has an example .. that doesn't do this
 punchagan | Imagine maintaining a file where you document bugs and plan releases for a piece of software. Instead of using
           | tags like ‘:release_1:’, ‘:release_2:’, you can use a property, say ‘:Release:’, that in different subtrees has |
           | different values, such as ‘1.0’ or ‘2.0’                                                                        |
    zeltak | punchagan: i see
    zeltak | ok good to know its a bug :)
    zeltak | appriciate the help!
    zeltak | can one sparese tree match on 2 properties?
 punchagan | zeltak: no problem! and thanks for the recipes.. I see you have an Indian tag. me checks out.. 
    zeltak | punchagan: your welcome! :)
 punchagan | zeltak: you can do all kinds of stuff with `C-c / m' or `C-c \'. 
 punchagan | zeltak: FAV="y"+Indian+TODO="SHOP"
 punchagan | would work.. 
 punchagan | (modulo the bug..)
    zeltak | punchagan: cool thx!
-mode

** @sync//backup project@
*** Relevant IP's

| Machine          |             IP | Ports open                                                                       | Comments |
|------------------+----------------+----------------------------------------------------------------------------------+----------|
| Linux PC         | 132.72.155.204 | github,                                                                          |          |
| Synology NAS     | 132.72.152.204 | FTP into machine,github, ssh (22), btsync (UDP/TCP 9999 ,UDP/TCP 8888, UDP 3000) |          |
| Linux Laptop     | 132.72.154.204 | github                                                                           |          |
| home qnap        |       10.0.0.2 |                                                                                  |          |
| hope laptop wifi |      10.0.0.12 |                                                                                  |          |

*** Sync methods     
**** for all textfile-git
***** create a central bare repo (or use github)
****** using github as a central repo
-create a repo (named zorg) on github
-cuurently this repo is private
****** daily workflow for work/lapop
******* for work
every morning when i get to work:
run the ugs.sh script

file:/home/zeltak/bin/ugs.sh

@do not use laptop during the day to edit@
all editing should be done on work PC

before leaving work run the same script

file:/home/zeltak/bin/ugs.sh

******* for laptop
once i get home run this script

file:/home/zeltak/bin/lgs.sh

then before i leave home in the morning run the same script again

file:/home/zeltak/bin/lgs.sh

also at work i connect it to the LAN:
ip: 132.72.153.174

******* mobile (android phone/tablet)
******** use pocket git
https://play.google.com/store/apps/details?id=com.aor.pocketgit&hl=en

********* Pull data 
I use this for android to pull my whole git repo (org) and have a copy of it on my mobile device

********* TODO you can also git push back changes
******** Mobile org 
i used that for agenda notes to have a more accesable way to quick read notes from there
**** Binary files (images,pdfs etc)-Unison
I use unison to sync the following folders
I create a profile called sync under file:/home/zeltak/.unison/sync.prf

this syncs the following folders between workPC (zuni) and laptop (zlap):

file:/~/Sync/
file:/~/Uni/
file:/~/org/attach/
***** Unison sync folder structure
 I used the following organizing structure:
****** Scans 
 This has all my scanned documents organized as follows: 
  -year
   -- BGU
   -- docs
   -- receipts
   -- family 
****** Uni
   -- CV
   -- PDF library
   -- signatures
****** VT - Personal sensetive docs
****** attach
 org mode attached files and pictures 

 $Note$ this needs to be changed yearly in the Emacs config (under org-downlaod section): 

 #+BEGIN_SRC emacs-lisp :results none
 (setq-default org-download-image-dir "/home/zeltak/org/attach/images_2015")
 #+END_SRC
**** browser related
user chrome/firefox built in sync mechanisms
**** passwords
using password-store. more info [[id:d57aa1cc-33ce-4081-9811-c6f2782b8eee][password-store]]
*** Backup 
**** family photos 
**** daily backups
     :PROPERTIES:
     :ID:       7b98d815-4327-4f65-8c60-dfd9711859bd
     :END:
***** rsync 
****** TODO rsync to push data from laptop to synology nas (use urs.sh)
       :PROPERTIES:
       :ID:       b35e3749-464e-4465-b927-3b1cf5f1385f
       :END:

       #+BEGIN_SRC sh
rsync -aRPz --delete -e ssh /home/zeltak/dotfiles/  root@132.72.152.204:/volume1/rsync/    
       #+END_SRC

****** TODO rsync to push data from laptop to QNAP nas
       :PROPERTIES:
       :ID:       d4f672c5-6ced-4670-ae67-4e785f17ea79
       :END:
use this script created in ~bin:
file:/home/zeltak/bin/lrs

** explore memacs
*** http://shelve.sourceforge.net/
** fix wraps
https://github.com/tj64/org-dp
** find out how to create org table with manual breaks
** TODO a way to auto exce a command on specific file save emacs
   :PROPERTIES:
   :ID:       bd2d30ef-83b2-4c10-b2c2-d04b4d02b04e
   :END:
#+BEGIN_EXAMPLE
well, it wouldn't be trivial. you'd need to add an after-save-hook that looks for the specific file and then do     │
what you want then.                                                                                                 │
but my tip jar is looking a bit sad right now                                                                       │
hehe OK thx nicferrier                                                                                              │
but that's what you'd do.                                                                                           │
nicferrier: perhaps than a simple function to save and exe command that i can run manually?                         │
no.                                                                                                                 │
so id dosent need to be file aware                                                                                  │
but you could make one of those easily                                                                              │
save-buffer and shell-command-to-string look good.                                                                  │
nicferrier: ok ill look them up thx!                                                                                │
np!                                                                                                                 │
zeltak_:  (add-hook 'after-save-hook (lambda () (when (string= "/tmp/your-file" (buffer-file-name                   │
(current-buffer))) (shell-command "ls"))))                                                                          │
pjb: cool ill try it now :)                                                                                         │
zeltak_: but you should rather do what you want to do in emacs lisp.  This will have the advantage of working even  │
on MS-Windows and in different unix environments.                                                                   │
Instead of (shell-command "whatever") write (whatever) and (defun whatever () …) in elisp.                          │
I'm with Bastien and see no need for namespaces in Emacs Lisp.                                                      │
https://lists.gnu.org/archive/html/emacs-devel/2013-07/msg00801.html                                                │
[http://is.gd/GEilTO]                                                                                               │
pjb: perhaps a simpler method then. as save buffer, exit buffer (but not emacs) and run bash command. would you     │
mind shwoing me the elisp code for that                                                                             │
zeltak_: what does your bash command do?                                                                            │
pjb: pkill -USR1 -x sxhkd                                                                                           │
pjb: that was silly. I told zeltak_ most of what was needed. it was a learning opportunity.                         │
instead of that you gave a lecture.                                                                                 │
nicferrier: hehe i am learning this way                                                                             │
:)                                                                                                                  │
i learn best via examples                                                                                           │
kensanata: The only reason I'd like to see namespaces is better compositability. I don't think that's in any of the │
Lisp-based namespace thingies, so not really relevant. Having a de-facto standard for namespace separation vs. word │
divider would be great, though.                                                                                     │
Working in MS-Windows encourages users to use proprietary software.                                                 │
i will read about the commands as well                                                                              │
/mode -rms                                                                                                          │
Ok, emacs cannot easily send a unix signal to another random process.  So shell-command will do in this case.       │
lol.                                                                                                                │
forcer: What do you mean by compositability?                                                                        │
zeltak_: you should also consider that you often save files that are half edited.  So you may not really want to    │
systematically have it processed after C-x C-s.                                                                     │
It may be dangerous.                                                                                                │
pjb: true. thats why maybe the 2nd option of manually executing the save&pkill would be safer                       │
its an app that you need to send a user sig1 to refreash it every time toy edit a config which i find annoying :)   │
If you don't want to get out of emacs to kill, you can write a emacs command to do it: (defun update-sxhkd ()       │
(interactive) (shell-command "pkill …"))  So you can C-x C-s and when you want M-x update-sxhkd RET                 │
pjb: thx that could work well, appriciate the help!                                                                 │

#+END_EXAMPLE

** ,----[ C-h f helm-do-grep RET ]
| helm-do-grep is an interactive autoloaded Lisp function in                      |
| `helm-grep.el'.                                                                 |
|                                                                                 |
| It is bound to C-x c M-g s, <menu-bar> <tools> <Helm> <Tools> <Grep>.           |
|                                                                                 |
| (helm-do-grep)                                                                  |
|                                                                                 |
| Preconfigured helm for grep.                                                    |
| Contrarily to Emacs `grep', no default directory is given, but                  |
| the full path of candidates in ONLY.                                            |
| That allow to grep different files not only in `default-directory' but anywhere |
| by marking them (C-<SPACE>). If one or more directory is selected               |
| grep will search in all files of these directories.                             |
| You can also use wildcard in the base name of candidate.                        |
| If a prefix arg is given use the -r option of grep (recurse).                   |
| The prefix arg can be passed before or after start file selection.              |
| See also `helm-do-grep-1'.                                                      |
** Emacs
jabref-ebib etc
bbdb
gnus
Emacs org term blocks
Bookmark the shit and backup
*** dp wrap blocks 
Hi List,

I've written the "eierlegende Wollmilchsau" of wrap-in-block functions
(i.e. the 'all-inclusive mother of all wrap-in-block functions').

To check it out, you need to
jjk 1. Clone or fork the git repo (https://github.com/tj64/org-dp)
 2. (add-to-list 'load-path "/path/to/org-dp/") and
 3. (require 'org-dp-lib') in your init file

`org-dp-wrap-in-block' works on/with all kinds of Org blocks, and can be
called interactively or non-interactively.

It

 - inserts a new block when called on an empty line without arguments

 - wraps sexp or region or '+/- X lines from point' into a newly created
   block

 - when called with point inside a block, it either

   + unwraps the blocks content, i.e. deletes the surrounding block or

   + replaces the surrounding block with a different block

It takes full account of affiliated keywords. In case of src-blocks,
it puts src-block parameters on the block's headline, but with
`org-dp-toggle-headers' its easy to toggle between parameters

,----
| #+begin_src R :noweb yes |
`----

and headers

,----
| #+header: :noweb yes |
| #+begin_src R        |
`----

This function takes into account so many options that combinatorics hits
you badly when trying to test all of them. Everything I tried works now
with the current version, but its not unlikely that daily usage will
discover some bugs or untreated corner cases. Please report them with
backtrace.

The good news is that besides its complexity, its not one
mega-convoluted monolithic function for a single task only. Instead I
outfactored the core functionality into the 'org-dp.el' library
("Declarative Programming with Org Elements") which offers potentially
massive time (and headache) savings when programming with Org Elements
on the local level.

'org-dp' acts on the internal representation of Org elements, and due to
the total uniformity of this representation it is possible to do diverse
actions on diverse elements in a very uniform way, thus the 3 functions

 - `org-dp-create'

 - `org-dp-rewire'

 - `org-dp-prompt'

should be all you need for all kinds of programming
tasks. `org-dp-wrap-in-block' is one example of how to program with
org-dp, `org-dp-toggle-headers' is another one.

Hope that this is useful.

PS

For the sake of completeness, here the docstring of
`org-dp-wrap-in-block':

,----[ C-h f org-dp-wrap-in-block RET ]
| org-dp-wrap-in-block is an interactive Lisp function in              |
| `org-dp-lib.el'.                                                     |
|                                                                      |
| It is bound to C-c w w.                                              |
|                                                                      |
| (org-dp-wrap-in-block &optional LINES USER-INFO)                     |
|                                                                      |
| Wrap sexp-at-point or region in Org block.                           |
|                                                                      |
| A region instead of the sexp-at-point is wrapped if either           |
|                                                                      |
| - optional arg LINES is an (positive or negative) integer or         |
|                                                                      |
| - the region is active                                               |
|                                                                      |
| In the first case the region is determined by moving +/- LINES       |
| forward/backward from point using `forward-line', in the second      |
| case the active region is used.                                      |
|                                                                      |
| If point is already inside of a block, modify it or unwrap its       |
| content/value instead of wrapping it in another block, except if     |
| explicitly asked for by user.                                        |
|                                                                      |
| If USER-INFO is given, it should be a list in the format returned by |
| `org-dp-prompt', i.e.                                                |
|                                                                      |
| (elem-type contents replace affiliated args)                         |
|                                                                      |
| Look up that function's docstring for more information about the     |
| list's elements. A non-nil USER-INFO suppresses calls to             |
| `org-dp-prompt' and is used instead of its return value.             |
|                                                                      |


** fix HD res issues
SOLVED (Solution can be found on the bottom)
Hi there I really hope someone can help me...

If got my new XPS13 (2015) yesterday and even though it's a really nice pice of hardware there are some problems (obviously ^^)

So I've got the QHD display (3200x1800) which doesn't quite work with all applications (like google chrome is awfull and isn't affected by the window scaling)

So I thought...
Well lets simpley change the resolution to 1920x1080 for now so I can at least work. Sadly apart from the original 3200x1800 there are only 4:3 ratio resolution (non of them is usable) so I added the 1920x1080 myself using xrandr.
But everytime I set the resolution to use my new one, it sets it, display flickers for a moment and than falls back to the original 3200x1080 (all via command-line). Same happen if I use the UI though.
Next I tried using a custom X11 conf which (it looks like) does set the 1920x1080 while beeing on the lockscreen (I'm using gdm btw) but once I log in, it falls back to the 3200x1800.

Solution
Problem: Changing to the new, manually added, resolution did not work because it immediately switched back to the original one
Solution: (For me at least) removing ~/.config/monitors.xml did the trick. You might have to restart GDM after removing/renaming the file﻿
** clerk
select rating has to have a album/track indicator in rofi..confusing
the rating mpd/beets issue, is it solvable?
the recent albums also needs header as in 'recent albums'
track replace like album replace
   
** org
** TODO create same level header
how does one map universal header (c-u) before a command
** search text in all orgfiles    
** i3 REVAMP
*** fix grid
*** cretae a nag menu of move to workspace    
** Emacs TRAMP
  
** sdf
Login      : zeltak
Name       : itai
YoB        : 1975
Origin     : 01800
E-mail     : zeltak@sdfeu.org
IRC        : irc.sdf.org
Jabber     : jabber.sdfeu.org                      (after validation)
WWW URL    : http://zeltak.sdfeu.org            (after 'mkhomepg')
WWW Gopher : gopher://sdfeu.org/users/zeltak       (after 'mkgopher')
Webmail    : https://sdfeu.org/webmail             (after validation)
Twitter    : http://twitter.com/sdf_pubnix

** filbot qnap
http://www.filebot.net/forums/viewtopic.php?f=8&t=2335&p=13416&hiilt=qnap#p13416
** flexget  
** 16.5 weight  
   :PROPERTIES:
   :ID:       08864a30-4105-4ea2-b5cb-554610b07304
   :END:
83.3
**  [[https://github.com/djcb/sauron][djcb/sauron - https://github.com/]][[https://github.com/djcb/sauron][djcb/sauron - https://github.com/]]
* Linux
** Org
*** TODO org babel terminal
    :PROPERTIES:
    :ID:       938c0de7-3df3-49e1-9e7b-3932a978d410
    :END:

#+begin_src emacs-lisp
(defadvice org-babel-execute:sh (around sacha activate)
  (if (assoc-default :term (ad-get-arg 1) nil)
    (let ((buffer (make-term "babel" "/bin/zsh")))
      (with-current-buffer buffer
        (insert (org-babel-expand-body:generic
             body params (org-babel-variable-assignments:sh params)))
        (term-send-input)))
    ad-do-it))
#+end_src

#+RESULTS:
: org-babel-execute:sh


#+begin_src sh :term t
sudo pacman -Syu
#+end_src

#+RESULTS:

*** TODO C-u C-c C-l solves all problems. Now I can link any file (PDF etc.) from anywhere within org and with tab completion. Thanks.
    :PROPERTIES:
    :ID:       6810f526-f19c-400a-923f-44951a00d963
    :END:
*** jump to parent
 how can you jump to the parent node of whatever area │ elik         
               │                         | you're in?                                           │ farn         
               │12:48:23         nslater | so if you have:                                      │ framling     
               │12:48:24         nslater | * A                                                  │ frumious-    
               │12:48:27         nslater | ** 1                                                 │ fsbot        
               │12:48:43         nslater | and you're on ** 1, then this function would take    │ Fuco         
               │                         | you to * A                                           │ funnel       
               │12:50:27       YoungFrog | perhaps C-c C-p                                      │ garrison     
               │12:50:53       YoungFrog | oh, parent.                                          │ gds          
               │12:51:01       YoungFrog | then C-c C-u                                         │ gko          
               │13:22:26         nslater | found it. thanks!                                    │ iderrick
*** capture via gmail
You could also use a %x in a capture template to assist in capturing a   
selection made on your gmail message.  Eg, select Subject: line, then    
capture that to a TODO.                                                  
The other thing that might help would be custom links. Is there a way to form a URL to a gmail message on the web?  If so, you  
could make a "gmail:XXXXX" link that org would expand to a full URL

*** look at hippie expand and add A-/ shortcut
*** change date in header
    :PROPERTIES:
    :ID:       a13f3051-ec0b-4b6e-bd55-65a5c4526d38
    :END:
Try setting before-save-hook.  See "(elisp) Saving Buffers".
catz and baicye 
-Dave

http://lists.gnu.org/archive/html/emacs-orgmode/2013-07/msg01015.html
*** send to "kitchen tablet" recipe
*** make a disable/enable org-inline function (refresh images)
*** check org sync with goog using webdav
    :PRO:PROPERTIES:

           eb0b0883-9d41-4e9d-8d10-7a86532ef458
    :
httpww.osomac.com/2013/09/23/org-mode-moving-forward/
*** export to odf dosent work 
*** make a code block read only
    :PROPERTIES:
    :ID:       5e59de3b-e7ec-4a8d-b1a1-b2d6dbf8cd01
    :END: 
*** correct commenting out in bable org mode
*** google calander sync
    :PROPERTIES:
           dd512bb5-813c-4311-a8a4-1f6b651b6e9a
    :
httpgithub.com/dengste/org-caldav
*** Habits mod
    :PROPERTIES:
           b1454b3b-887a-4c7c-8be9-2ab7135ed2d9
    :
httprgmode.org/manual/Tracking-your-habits.html

*** Remember last posiiton of file when reopen/jump to last position
    :PROPERTIES:
           206142d8-4b8c-46e1-aa7c-dad5091871d8
    :
*** C-x 5 0 > other key
    :PROPERTIES:
           2b274086-00f1-4ec7-90c7-dfaf7c92f876
    :
*** org_build a menu of faces to choose from, or snippets for it (maybe Mymenu)?
*** auto close capture windows
*** style the tags with colors in theme
*** org scrape capture/scrape text areas and text+images (In Example a recipe)
*** org scraper project
    :PRO:PROPERTIES:

           4f2569ae-ffb3-4936-b08d-06a614d52b1e
    :
!ide
saveebpage (inluding images)
delell non png and jpeg files
convthat html to org using pandoc
rech the image pathes from XXX to a subfolder with same name as org doc ~/orgfile.org/scrape1

for ', open in emacs to manually scrape with pandoc:
#+besrc js
//!jcript

var ctClone = function()
{
    type = arguments[0];
    root;
    image_count = 0;
    imageMapping = null;

    type == "selection")
    
    var fragment = window.getSelection().getRangeAt(0).cloneContents();
    if (fragment)
    {
        root = document.createElement("span");
        root.appendChild(fragment);
    }
    
    
    
    doc = document.implementation.createDocument(document.namespaceURI, null, null);
    root = doc.importNode(document.documentElement, true);
    
    !root)
    
    return null;
    

    y.prototype.forEach.call(root.querySelectorAll("img"), function(img) {
    imageMapping = imageMapping || {};
    var image = "image_" + image_count++;
    if (/^\/\//.test(img.src))
        imageMapping["http:" + img.src] = image;
    else if (/https?:\/\//.test(img.src))
    {
        imageMapping[img.src] = image;
    }
    else
    {
        imageMapping[location.protocol + "//" + location.hostname + img.src] = image;
    }
    img.setAttribute("src",  image);
    

    rn {
    html : root.innerHTML,
    images : imageMapping
    
};

func spawn(directory, selection)
{
    tmpfile = "/tmp/" + script.generateId() + ".html";
    output = directory + "/tmp.org";
    rite(tmpfile, "w", selection);
    em.spawn("sh -c 'pandoc -s -S " + tmpfile + " -o " + output + "; emacs " + output + "'");
    em.spawn("rm " + tmpfile);
}

func clone(type)
{
    selection = JSON.parse(tabs.current.focusedFrame.inject(injectClone, type));
    !selection)
    return;

    directory = "/tmp/emacs_org_" + tabs.current.mainFrame.domain;
    em.mkdir(directory, 0700);

    pending = 0;
    selection.images)
    
    for (var link in selection.images) {
        var d = new WebKitDownload(link);
        d.destinationUri = "file:///" + directory + "/" + selection.images[link];
        pending++;
        d.start(function(download) {
            switch (download.status)
            {
            case DownloadStatus.finished:
            case DownloadStatus.error:
            case DownloadStatus.cancelled:
                pending--;
                break;
                default : return;
            }
            if (pending == 0)
            {
                spawn(directory, selection.html);
            }
        });
    }
    
    
    
    spawn(directory, selection.html);
    
}
binds", clone.bind(null, "selection").debug(script), "clone_selection");
bindf", clone.bind(null, "full").debug(script), "clone_full");
#+enc

#+BESRC js
//!jcript

func org_protocol_store_link () {
    cmd = 'emacsclient';
    title = tabs.current.title || "" ;
    uri = tabs.current.uri || "";
    args = "'2f6d720053b5240c19cc9c7b35feef5d846ba3a6quot;org-protocol://store-link://" +
    encodeURIComponent(uri) +
    "/" +
    encodeURIComponent(title) +
    "2f6d720053b5240c19cc9c7b35feef5d846ba3a6quot;'";
    em.spawn(cmd + " " + args);
}

func org_protocol_capture (w) {
    cmd = 'emacsclient';
    sel = clipboard.get(Selection.primary) || "";
    title = tabs.current.title || "";
    uri = tabs.current.uri || "";
    args = "-n '" +
    "2f6d720053b5240c19cc9c7b35feef5d846ba3a6quot;org-protocol://capture://" +
    encodeURIComponent(uri) +
    "/" +
    encodeURIComponent(title) +
    "/" +
    encodeURIComponent(sel) +
    "2f6d720053b5240c19cc9c7b35feef5d846ba3a6quot;'";
    em.spawn(cmd + " " + args);

}

bind", org_protocol_store_link, "orgstring");
bind", org_protocol_capture, "orgcapture");
#+ENC

*** org sync files
**** sol1
With Dropbox I've had a some "conflicted copy" issues; this is annoying (and is
the sort of thing that would have been solved much more easily with version
control) but happens very rarely. What I like about this is that my frequent
changes in org files get propagated without the need for an explicit version
control command.


However, for safety and for tracking, I run a nightly job with bazaar where I
commit all changes (this is done in only one of the machines, of course). This
has actually proven extremely useful when, by mistake, I have deleted a complete
subtree and only realized maybe a month later.
**** sol 2
https://github.com/simonthum/git-sync
**** s3
     http://translate.google.com/translate?hl=en&sl=auto&tl=en&u=http://www.mkblog.org/2011/12/zwei-rechner-daten-verloren-dokumente-fehlen/
** Emacs
*** keys for kill buffer C-x k
*** emacs mode on a specific frame   
*** auto complete load dictnionary and load specific dictnionary per mode/file
*** explore terminal integration 
*** TODO Emacs 24.4 has the new command isearch-forward-symbol-at-point
    :PROPERTIES:
    :ID:       06883f77-7f39-4327-8ef3-ae5fb7355f23
    :END:
this is like vimes C-*
*** emacs add dunst support/notify
*** customize menus/toolbar (color,bold other)
*** ess-sas an r
    :PRO:PROPERTIES:

           7cf88c53-5680-4944-b8b4-5e6a68590d8a
    :
*** crash recvocery
** org-download
** Misc
*** revise password global system
passes> keepss
docs-org
internt pass -last pass

2 pass system

weak-salt21salar
strong-

*** A fantastic font
I've tried several fonts, and all of them were nice, but came up short on some way. Some didn't have italic variants, some had dotted zeroes instead of dashed zeroes, some even had entirely clear zeroes which make them look like O's, others had boring-looking parentheses4. Not Fantasque Sans Mono5, 6, it is awesome. If your web browser supports web fonts you should also see it used in the code blocks here.

For normal Emacs setups you might use the set-frame-font function like so:

(set-frame-font "Fantasque Sans Mono 13" nil t)
*** Look at synergy for sharing betwee office pc and laptopz 
*** automate git commit with script_cron daily 
*** Dunst color per application
   :PRO:PROPERTIES:

          6948b8bf-bf06-4491-8b91-415161f29cf3
   :
*** clipboad sense
   :PRO:PROPERTIES:

          f5dd9e7d-f91a-4515-b72e-7925fe0d9ae5
   :
   oclip currently shows primary- IE classic copy commad
*** gmvalut laptop work>transfer to Server
   :PRO:PROPERTIES:

          097eb08f-ef41-43d1-b3fa-08b774b2205c
   :

*** look at lan wakeup for laptop for backup/rsync?
   :PRO:PROPERTIES:

          45239772-46d4-4acc-a505-57c52816f0db
   :
*** Flexget
   :PRO:PROPERTIES:

          21e79f5e-7652-42de-b0e7-5022c6098124
   :
*** Xdotool-gui
   :PRO:PROPERTIES:

          d3c75d51-8439-4f8b-bbbc-a2a7172db86d
   :
** Cantata
*** requests
**** file type on player upper bar
**** crashes in cantata when issuin mpc commands
**** keyboard only interface
**** dynamic mode -> add critereas not played in last 2 weeks, from specific playlist etc
** beets
  - cant get original_year: yes to work , ₆In Example₆ aqualung jethro tull always defaults to 1984
  -create a rating field
  -copy comments to that field
  -create a demnu entry to my mpd script to rate the current playing song
  - get switches for beet import for multiple scenarios (₆In example₆ single:)
** worker
*** filter by date
  i tried looking for documentation on the set filter command but only found general filtering commands. is there a way to filter views by date (modified time etc) that could be very useful. 
*** DONE colored tabs
  option to color tab by name/location/other
*** DONE copy to clip/paste from clip?
*** NEXT Filter indicator
      :PROPERTIES:
      :ID:       0c51d716-e089-4b64-bda8-d0ee9c9bd81c
      :END:
  i know there is a star but can i request an option make the listview or modtime/name bar different colored when filtered
  perhaps clearer syntax ₆In example₆ (N)
*** DONE Toggle sort mode
  is there a way toggle a sort mode, so that the same button pressed once would sort asecding and then second press descinding? if not is there a way to maybe script this
*** tmep pnames



** devils pie
*** set a window to open on a specific screen
I believe you are forced to use a method where you place the
windows non-dynamically on the required screen - if you have two
screens both with 1280 width, placing a window at 1280 should put it on
the right screen. (That's not very dynamic, but it could be a start to
work on something at least).

You should be able to get the total screen area (All screens added),
and via that calculate if you have one or two screens attached. Not
much for this kind of thing is implemented in devilspie2 though.

** cvim
  visual mode, act start visual block/line option
  VIUSAL clues to some command like : copied link to clip (yy) etc
  `extensiuon to mark in numbers tabs?`
  :bookmarks /<folder> (autocomplete) , how does that work, can we browse bookmark with levels so you can manually enter folders?
  add retsart chrome
  add reload all tabs
  keybind to quickly enable/disable cvim

