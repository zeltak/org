Archived entries from file /home/zeltak/.emacs.d/settings.org


* Abbrev for Shell Commands
  :PROPERTIES:
  :ARCHIVE_TIME: 2014-12-15 Mon 13:03
  :ARCHIVE_FILE: ~/.emacs.d/settings.org
  :ARCHIVE_OLPATH: test
  :ARCHIVE_CATEGORY: settings
  :END:

#+BEGIN_SRC emacs-lisp :results none
(defcustom xah-shell-abbrev-alist nil "alist of xah's shell abbrevs")

(setq xah-shell-abbrev-alist
          '(
            ("rsync1" . "rsync -z -r -v -t --chmod=Dugo+x --chmod=ugo+r --delete --exclude='*~' --exclude='.bash_history' --exclude='logs/'  --rsh='ssh -l u80781' ~/web/ u80781@s30097.example.com:~/")

            ("ssh" . "ssh -l u80781 xahlee.org ")
            ("img1" . "convert -quality 85% ")
            ("imgScale" . "convert -scale 50% -quality 85% ")
            ("img256" . "convert +dither -colors 256 ")
            ("imgBatch" . "find . -name \"*png\" | xargs -l -i basename \"{}\" \".png\" | xargs -l -i  convert -quality 85% \"{}.png\" \"{}.jpg\"")
            ("img-bmp2png" . "find . -name \"*bmp\" | xargs -l -i basename \"{}\" \".bmp\" | xargs -l -i  convert \"{}.bmp\" \"{}.png\"")

            ("grep" . "grep -r -F 'xxx' --include='*html' ~/web")

            ("rm_empty" . "find . -type f -empty")
            ("chmod_file" . "find . -type f -exec chmod 644 {} ';'")
            ("rm~" . "find . -name \"*~\" -exec rm {} ';'")
            ("findEmptyDir" . "find . -depth -empty -type d")
            ("rmEmptyDir" . "find . -depth -empty -type d -exec rmdir {} ';'")
            ("chmod2" . "find . -type d -exec chmod 755 {} ';'")
            ("arch-upgrade" . "sudo pacman -Syu ")
            ("lynx" . "lynx -dump -assume_local_charset=utf-8 -display_charset=utf-8 -width=100")
            ("vp" . "feh --randomize --recursive --auto-zoom --action \"gvfs-trash '%f'\" --geometry 1600x1000 ~/Pictures/ &")
            )

          )

(defun xah-shell-commands (cmdAbbrev)
  "insert shell command from a selection prompt."
  (interactive
   (list
      (ido-completing-read "shell abbrevs:" (mapcar (lambda (x) (car x)) xah-shell-abbrev-alist) "PREDICATE" "REQUIRE-MATCH") ) )
  (progn
    (insert (cdr (assoc cmdAbbrev xah-shell-abbrev-alist)))
    ))
#+END_SRC 



* modline
  :PROPERTIES:
  :ARCHIVE_TIME: 2014-12-20 Sat 08:32
  :ARCHIVE_FILE: ~/.emacs.d/settings.org
  :ARCHIVE_OLPATH: test
  :ARCHIVE_CATEGORY: settings
  :END:
#+BEGIN_SRC emacs-lisp 
;; use setq-default to set it for /all/ modes
(setq mode-line-format
  (list
    ;; the buffer name; the file name as a tool tip
    '(:eval (propertize "%b " 'face 'font-lock-keyword-face
        'help-echo (buffer-file-name)))
    ;; line and column
    "(" ;; '%02' to set to 2 chars at least; prevents flickering
      (propertize "%02l" 'face 'font-lock-type-face) ","
      (propertize "%02c" 'face 'font-lock-type-face) 
    ") "
    ;; relative position, size of file
    "["
    (propertize "%p" 'face 'font-lock-constant-face) ;; % above top
    "/"
    (propertize "%I" 'face 'font-lock-constant-face) ;; size
    "] "
    ;; the current major mode for the buffer.
    "["

    '(:eval (propertize "%m" 'face 'font-lock-string-face
              'help-echo buffer-file-coding-system))
    "] "


    "[" ;; insert vs overwrite mode, input-method in a tooltip
    '(:eval (propertize (if overwrite-mode "Ovr" "Ins")
              'face 'font-lock-preprocessor-face
              'help-echo (concat "Buffer is in "
                           (if overwrite-mode "overwrite" "insert") " mode")))

    ;; was this buffer modified since the last save?
    '(:eval (when (buffer-modified-p)
              (concat ","  (propertize "Mod"
                             'face 'font-lock-warning-face
                             'help-echo "Buffer has been modified"))))

    ;; is this buffer read-only?
    '(:eval (when buffer-read-only
              (concat ","  (propertize "RO"
                             'face 'font-lock-type-face
                             'help-echo "Buffer is read-only"))))  
    "] "

    " --"
    ;; i don't want to see minor-modes; but if you want, uncomment this:
    ;; minor-mode-alist  ;; list of minor modes
    "%-" ;; fill with '-'
    ))
#+END_SRC



* Changing the mode-line color by state
  :PROPERTIES:
  :ARCHIVE_TIME: 2014-12-20 Sat 08:33
  :ARCHIVE_FILE: ~/.emacs.d/settings.org
  :ARCHIVE_OLPATH: look and feel/Evil mode look and feel
  :ARCHIVE_CATEGORY: settings
  :END:

#+BEGIN_SRC emacs-lisp :results none
  ;; (defun my-evil-modeline-change (default-color)
  ;;   "changes the modeline color when the evil mode changes"
  ;;   (let ((color (cond ((evil-emacs-state-p) '("#440000" . "#ffffff"))
  ;;                      ((evil-insert-state-p) '("#002233" . "#ffffff"))
  ;;                      ((evil-visual-state-p) '("#330022" . "#ffffff"))
  ;;                      (t default-color))))
  ;;     (set-face-background 'mode-line (car color))
  ;;     (set-face-foreground 'mode-line (cdr color))))
  
  ;; (lexical-let ((default-color (cons (face-background 'mode-line)
  ;;                                    (face-foreground 'mode-line))))
  ;;   (add-hook 'post-command-hook (lambda () (my-evil-modeline-change default-color))))
#+END_SRC

#+BEGIN_SRC emacs-lisp :resulits none
  ;; ;; change mode-line color by evil state
  ;;  (lexical-let ((default-color (cons (face-background 'mode-line)
  ;;                                     (face-foreground 'mode-line))))
  ;;    (add-hook 'post-command-hook
  ;;      (lambda ()
  ;;        (let ((color (cond ((minibufferp) default-color)
  ;;                           ((evil-insert-state-p) '("#F90E41" . "#ffffff"))
  ;;                           ((evil-emacs-state-p)  '("#777877" . "#ffffff"))
  ;;                           ((buffer-modified-p)   '("#000000" . "#ffffff"))
  ;;                           (t default-color))))
  ;;          (set-face-background 'mode-line (car color))
  ;;          (set-face-foreground 'mode-line (cdr color))))))
#+END_SRC

* repeatable command
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-01-30 Fri 09:14
  :ARCHIVE_FILE: ~/.emacs.d/settings.org
  :ARCHIVE_OLPATH: Packages/key-chord
  :ARCHIVE_CATEGORY: settings
  :END:
#+BEGIN_SRC emacs-lisp :results none
  (defun zeltak/def-rep-command (alist)
      "Return a lambda that calls the first function of ALIST.
  It sets the transient map to all functions of ALIST,
  allowing you to repeat those functions as needed."
      (lexical-let ((keymap (make-sparse-keymap))
                    (func (cdar alist)))
        (mapc (lambda (x)
                (when x
                  (define-key keymap (kbd (car x)) (cdr x))))
              alist)
        (lambda (arg)
          (interactive "p")
          (when func
            (funcall func arg))
          (set-transient-map keymap t))))
#+END_SRC

* orgmode
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-01-30 Fri 09:14
  :ARCHIVE_FILE: ~/.emacs.d/settings.org
  :ARCHIVE_OLPATH: Packages/key-chord
  :ARCHIVE_CATEGORY: settings
  :END:
#+BEGIN_SRC emacs-lisp :results none
(key-chord-define-global "oo"   
      (zeltak/def-rep-command
       '(nil
         ("d" . org-download-screenshot)
         ("<right>" . org-download-screenshot)
         ("<down>" . windmove-down)
         ("<up>" . windmove-up)
         ("y" . other-window)
         ("h" . ace-window)
         ("s" . (lambda () (interactive) (ace-window 4)))
         ("d" . (lambda () (interactive) (ace-window 16)))
         )))
#+END_SRC


* !icicles!
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-01-30 Fri 10:47
  :ARCHIVE_FILE: ~/.emacs.d/settings.org
  :ARCHIVE_OLPATH: Packages
  :ARCHIVE_CATEGORY: settings
  :END:

#+BEGIN_SRC emacs-lisp :results none
  ;; (require 'icicles)
  ;; ;turn on by default
  ;; (icy-mode 1)
#+END_SRC

* !Inactive!
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-01-30 Fri 10:47
  :ARCHIVE_FILE: ~/.emacs.d/settings.org
  :ARCHIVE_OLPATH: Packages
  :ARCHIVE_CATEGORY: settings
  :END:
** org-screenshot

https://github.com/dfeich/org-screenshot

#+BEGIN_SRC emacs-lisp :results none
;(load-file "/home/zeltak/.emacs.g/extra/org-screenshot/org-screenshot.el")
;(require 'org-screenshot)
#+END_SRC

** fill column indicator

#+BEGIN_SRC emacs-lisp :results none
  ;; (require 'fill-column-indicator)
  ;;  (setq fci-rule-width 1)
  ;;   (setq fci-rule-color "darkblue")
  
  ;; ;to turn it on automatically when visiting a file with C code, put the following line in your init file:
  ;; (add-hook 'org-mode-hook 'fci-mode)
  
  ;; ;To turn on fci-mode automatically for all files, put the following line in your init file:
  ;; ;add-hook 'after-change-major-mode-hook 'fci-mode)
  
  ;; ;To enable fci-mode as a global minor mode, put the following code to your init file:
  ;; ;(define-globalized-minor-mode global-fci-mode fci-mode (lambda () (fci-mode 1)))
  ;; ;(global-fci-mode 1)
  
#+END_SRC 




* SML (smartmodeline) @broken currently@
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-01-30 Fri 11:07
  :ARCHIVE_FILE: ~/.emacs.d/settings.org
  :ARCHIVE_OLPATH: Packages
  :ARCHIVE_CATEGORY: settings
  :END:
#+BEGIN_SRC emacs-lisp :results none
#+END_SRC


* switch window
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-01-30 Fri 11:08
  :ARCHIVE_FILE: ~/.emacs.d/settings.org
  :ARCHIVE_OLPATH: Packages
  :ARCHIVE_CATEGORY: settings
  :END:
https://github.com/dimitri/switch-window/blob/master/switch-window.el

when !3 or more! windows are present the command numbers the windows for easy switching
if only 2 windows are avilabe it will switch between

#+BEGIN_SRC emacs-lisp :results none
(global-set-key (kbd "C-x o") 'switch-window)
(require 'switch-window)
#+END_SRC

* el-get
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-02-04 Wed 20:32
  :ARCHIVE_FILE: ~/.emacs.d/settings.org
  :ARCHIVE_OLPATH: Emacs startup/startup packages
  :ARCHIVE_CATEGORY: settings
  :END:
** load on Emacs start 
#+BEGIN_SRC emacs-lisp :results none
(add-to-list 'load-path "~/.emacs.d/el-get/el-get")

(unless (require 'el-get nil 'noerror)
  (with-current-buffer
      (url-retrieve-synchronously
       "https://raw.githubusercontent.com/dimitri/el-get/master/el-get-install.el")
    (goto-char (point-max))
    (eval-print-last-sexp)))

(add-to-list 'el-get-recipe-path "~/.emacs.d/el-get-user/recipes")
(el-get 'sync)
#+END_SRC
** my packages to install/load on startup 
#+BEGIN_SRC emacs-lisp :results none
(setq el-get-sources  
      '((:name async :type elpa)  
         ( :name bookmark+ :type elpa)
))

(setq my:el-get-packages
      '(yasnippet
        helm
        dired-sort
        dired+
        rainbow-mode
        hydra
        ace-isearch 
        helm-swoop
        ace-jump-mode 
        ace-window 
        ace-jump-mode 
        auctex 
        auto-complete 
        bbdb 
        browse-kill-ring
        dired-details+ 
        evil 
        undo-tree 
        evil-nerd-commenter 
        expand-region 
        flx 
        google-contacts 
        helm-cmd-t 
        key-chord 
        magit 
        openwith 
        smex 
        async 
        bookmark+
        ))


(el-get 'sync my:el-get-packages)
#+END_SRC
lentic 
async
company dired-rainbow
dired-hacks-utils 
flx-ido 
helm-bibtex 
helm-chrome 



* perspective
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-07-03 Fri 13:05
  :ARCHIVE_FILE: ~/.emacs.d/settings.org
  :ARCHIVE_OLPATH: Packages
  :ARCHIVE_CATEGORY: settings
  :END:
https://github.com/nex3/perspective-el

#+BEGIN_SRC emacs-lisp :results none
(use-package perspective
 :ensure t
 :config
  )
#+END_SRC 


* Ace jump
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-07-20 Mon 18:34
  :ARCHIVE_FILE: ~/.emacs.d/settings.org
  :ARCHIVE_OLPATH: Packages
  :ARCHIVE_CATEGORY: settings
  :END:
** evil mode specifics 
#+BEGIN_SRC emacs-lisp :results none 
  ;; some proposals for binding:
 
;  (define-key evil-motion-state-map (kbd "SPC") #'evil-ace-jump-char-mode)
;  (define-key evil-motion-state-map (kbd "C-SPC") #'evil-ace-jump-word-mode)
;  (define-key evil-motion-state-map (kbd "M-SPC") #'evil-ace-jump-line-mode)
   
  ;; (define-key evil-operator-state-map (kbd "SPC") #'evil-ace-jump-char-mode)      ; similar to f
  ;; (define-key evil-operator-state-map (kbd "C-SPC") #'evil-ace-jump-char-to-mode) ; similar to t
  ;; (define-key evil-operator-state-map (kbd "M-SPC") #'evil-ace-jump-word-mode)
  
#+END_SRC

* helm agenda
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-07-24 Fri 12:56
  :ARCHIVE_FILE: ~/.emacs.d/settings.org
  :ARCHIVE_OLPATH: test
  :ARCHIVE_CATEGORY: settings
  :END:
#+BEGIN_SRC emacs-lisp :results none
(defun helm-agenda-candidates (query)
  (let ((results '()))
    (mapc (lambda (f)
      (with-current-buffer (find-file-noselect f)
        (org-map-entries
         (lambda ()
           (add-to-list 'results
                        (cons
                         (concat
                          (file-name-nondirectory f) " | "
                          (make-string (nth 1 (org-heading-components)) ?*)
                          " "
                          (org-get-heading))
                         (point-marker))))
         query))) (org-agenda-files))
    results))


(defun helm-query-agenda (query)
  "Helm interface to headlines with TODO status in current buffer."
  (interactive "sQuery: ")
  (let ((candidates (helm-agenda-candidates query)))
    (helm :sources '(((name . "TODO headlines")
                      (candidates . candidates)
                      (action . (("open" . (lambda (m)
                                             (switch-to-buffer (marker-buffer m))
                                             (goto-char m)
                                             (show-children))))))))))
#+END_SRC


* org appoint
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-07-24 Fri 12:56
  :ARCHIVE_FILE: ~/.emacs.d/settings.org
  :ARCHIVE_OLPATH: test/config stuff
  :ARCHIVE_CATEGORY: settings
  :END:
   #+BEGIN_EXAMPLE
 Add org-mode appointments to the diary

Diary offers reminders, which can be useful when scheduling appointments.

(defadvice org-agenda-redo (after ext:org-agenda-redo-add-appts)
  "Pressing `r' on the agenda will also add appointments."
  (setq appt-time-msg-list nil)
  (org-agenda-to-appt))



   #+END_EXAMPLE

* scroll line
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-07-24 Fri 12:56
  :ARCHIVE_FILE: ~/.emacs.d/settings.org
  :ARCHIVE_OLPATH: test/config stuff
  :ARCHIVE_CATEGORY: settings
  :END:
However, this doesn't work when running Emacs as a Daemon. So instead I specify it in the default-frame-alist.

(vertical-scroll-bars . nil)

* prelude functions
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-07-24 Fri 13:26
  :ARCHIVE_FILE: ~/.emacs.d/settings.org
  :ARCHIVE_OLPATH: test/config stuff
  :ARCHIVE_CATEGORY: settings
  :END:
https://github.com/seth/my-emacs-dot-d/blob/master/emacs-init.org

* function to connect to R remotly
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-07-24 Fri 13:26
  :ARCHIVE_FILE: ~/.emacs.d/settings.org
  :ARCHIVE_OLPATH: test
  :ARCHIVE_CATEGORY: settings
  :END:
#+BEGIN_SRC emacs-lisp :results none
(defun zconn ()
  (interactive)
  (eshell)
  (insert "export TERM=screen-256color-bce")
  (insert "ssu zuni")
  (comint-send-input))
#+END_SRC

* Emacs deamon
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-07-24 Fri 13:27
  :ARCHIVE_FILE: ~/.emacs.d/settings.org
  :ARCHIVE_OLPATH: test
  :ARCHIVE_CATEGORY: settings
  :END:
#+BEGIN_EXAMPLE
The super secret ingredient to all of this is emacs server and emacsclient. Emacs server allows you to connect to a running instance of emacs to do things (like edit files or run elisp functions) without starting a whole new emacs instance. That makes it really fast. You can start emacs server by running M-x server-start or have it happen automatically when emacs starts by putting (server-start) in $HOME/.emacs. You can even use emacs –daemon to start emacs in the background when you log in or with the @reboot tag in cron to start it when the machine starts. The –daemon option has the fringe benefit of leaving emacs running even if you log out.The super secret ingredient to all of this is emacs server and emacsclient. Emacs server allows you to connect to a running instance of emacs to do things (like edit files or run elisp functions) without starting a whole new emacs instance. That makes it really fast. You can start emacs server by running M-x server-start or have it happen automatically when emacs starts by putting (server-start) in $HOME/.emacs. You can even use emacs –daemon to start emacs in the background when you log in or with the @reboot tag in cron to start it when the machine starts. The –daemon option has the fringe benefit of leaving emacs running even if you log out.
#+END_EXAMPLE


* change dirs
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-07-28 Tue 21:25
  :ARCHIVE_FILE: ~/.emacs.d/settings.org
  :ARCHIVE_OLPATH: Packages/sunrise-commander/functions
  :ARCHIVE_CATEGORY: settings
  :END:
#+BEGIN_SRC emacs-lisp :results none
(defun chd/dired-Dowloads ()
  "  "
  (interactive)
  (find-file "~/Downloads/")     
)
#+END_SRC


* expand code block keys 
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-07-31 Fri 09:29
  :ARCHIVE_FILE: ~/.emacs.d/settings.org
  :ARCHIVE_OLPATH: Functions/org
  :ARCHIVE_CATEGORY: settings
  :END:
#+BEGIN_SRC emacs-lisp :results none
(defun pl/hot-expand (str)
  "Expand org template."
  (insert str)
  (org-try-structure-completion))

(with-eval-after-load "org"
  (define-key org-mode-map "<"
    (lambda () (interactive)
      (if (looking-back "^")
          (hydra-org-template/body)
        (self-insert-command 1)))))

#+END_SRC

* TODO org refile with prefix
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-07-31 Fri 11:22
  :ARCHIVE_FILE: ~/.emacs.d/settings.org
  :ARCHIVE_OLPATH: Functions/org
  :ARCHIVE_CATEGORY: settings
  :ARCHIVE_TODO: TODO
  :END:
broken this way, causes erros in init 
#+BEGIN_SRC emacs-lisp :results none
;(fset 'z/prefix-org-refile (C-u M-x org-refile))   
#+END_SRC




* kill line when no region is active
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-07-31 Fri 12:31
  :ARCHIVE_FILE: ~/.emacs.d/settings.org
  :ARCHIVE_OLPATH: Settings/Editing
  :ARCHIVE_CATEGORY: settings
  :END:
#+BEGIN_SRC emacs-lisp :results none
;; kill line if no region active                      
;; http://emacs-fu.blogspot.co.uk/2009/11/copying-lines-without-selecting-them.html
(defadvice kill-region (before slick-cut activate compile)
  "When called interactively with no active region, kill a single line instead."
  (interactive
   (if mark-active (list (region-beginning) (region-end))
     (list (line-beginning-position)
           (line-beginning-position 2)))))
#+END_SRC


* OLD wrap code block
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-07-31 Fri 16:21
  :ARCHIVE_FILE: ~/.emacs.d/settings.org
  :ARCHIVE_OLPATH: Functions/org/code blocks
  :ARCHIVE_CATEGORY: settings
  :END:
** z/org-cblock-wrap-emacs-lisp
#+begin_src emacs-lisp :results none
(defun z/org-cblock-wrap-emacs-lisp ()
   "Wrap region in quote block"
   (interactive)
   (save-excursion
     (save-restriction
       (and
        (region-active-p)
        (use-region-p)
        (narrow-to-region (region-beginning) (region-end)))
        (goto-char (point-min))
        (insert "#+BEGIN_SRC emacs-lisp :results none\n")
        (goto-char (point-max))
        (insert "#+END_SRC\n")
        (deactivate-mark))))
#+end_src
** z/org-cblock-wrap-example
#+BEGIN_SRC emacs-lisp :results none
(defun z/org-cblock-wrap-example ()
   "Wrap region in quote block"
   (interactive)
   (save-excursion
     (save-restriction
       (and
        (region-active-p)
        (use-region-p)
        (narrow-to-region (region-beginning) (region-end)))
        (goto-char (point-min))
        (insert "#+BEGIN_EXAMPLE\n")
        (goto-char (point-max))
        (insert "#+END_EXAMPLE\n")
        (deactivate-mark))))
#+END_SRC
** z/org-cblock-wrap-sh 
#+BEGIN_SRC emacs-lisp :results none
(defun z/org-cblock-wrap-sh ()
   "Wrap region in quote block"
   (interactive)
   (save-excursion
     (save-restriction
       (and
        (region-active-p)
        (use-region-p)
        (narrow-to-region (region-beginning) (region-end)))
        (goto-char (point-min))
        (insert "#+BEGIN_SRC sh\n")
        (goto-char (point-max))
        (insert "#+END_SRC\n")
        (deactivate-mark))))
        
#+END_SRC
** z/org-cblock-wrap-R
#+BEGIN_SRC emacs-lisp :results none
(defun z/org-cblock-wrap-R ()
   "Wrap region in quote block"
   (interactive)
   (save-excursion
     (save-restriction
       (and
        (region-active-p)
        (use-region-p)
        (narrow-to-region (region-beginning) (region-end)))
        (goto-char (point-min))
        (insert "#+BEGIN_SRC R\n")
        (goto-char (point-max))
        (insert "#+END_SRC\n")
        (deactivate-mark))))

#+END_SRC
** z/org-cblock-wrap-qoute
#+BEGIN_SRC emacs-lisp :results none
(defun z/org-cblock-wrap-qoute ()
   "Wrap region in quote block"
   (interactive)
   (save-excursion
     (save-restriction
       (and
        (region-active-p)
        (use-region-p)
        (narrow-to-region (region-beginning) (region-end)))
        (goto-char (point-min))
        (insert "#+BEGIN_QUOTE\n")
        (goto-char (point-max))
        (insert "#+END_QUOTE\n")
        (deactivate-mark))))
#+END_SRC 
** z/org-cblock-wrap-sas
#+BEGIN_SRC emacs-lisp :results none
(defun z/org-cblock-wrap-sas ()
   "Wrap region in quote block"
   (interactive)
   (save-excursion
     (save-restriction
       (and
        (region-active-p)
        (use-region-p)
        (narrow-to-region (region-beginning) (region-end)))
        (goto-char (point-min))
        (insert "#+BEGIN_SRC sas\n")
        (goto-char (point-max))
        (insert "#+END_SRC\n")
        (deactivate-mark))))
#+END_SRC


* leader 
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-08-07 Fri 15:54
  :ARCHIVE_FILE: ~/.emacs.d/settings.org
  :ARCHIVE_OLPATH: Key binds
  :ARCHIVE_CATEGORY: settings
  :END:
#+BEGIN_SRC emacs-lisp :results none

; (progn
;    (define-prefix-command 'xah-fly-leader-key-map)
;    (define-key xah-fly-leader-key-map (kbd "RET") (if (fboundp 'smex) 'smex 'execute-extended-command ))
;    (define-key xah-fly-leader-key-map (kbd "<backspace>") nil)
;    (define-key xah-fly-leader-key-map (kbd "<delete>") nil)
;    (define-key xah-fly-leader-key-map (kbd "SPC") nil )
;    (define-key xah-fly-leader-key-map (kbd "<menu>") 'exchange-point-and-mark)
;    (define-key xah-fly-leader-key-map (kbd "TAB") nil)
;    (define-key xah-fly-leader-key-map (kbd "\\") 'z/insert-slsh)
;    (define-key xah-fly-leader-key-map (kbd "r") 'query-replace)
;    (define-key xah-fly-leader-key-map (kbd "h") 'hippie-expand)

;  )

;(global-set-key (kbd "\\") 'xah-fly-leader-key-map)

#+END_SRC

  

* gnus
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-08-08 Sat 11:23
  :ARCHIVE_FILE: ~/.emacs.d/settings.org
  :ARCHIVE_CATEGORY: settings
  :END:
** standalone gnus
you should start Emacs like this with the below code: 'emacs -gnus'

#+BEGIN_SRC emacs-lisp :results none
(add-to-list
 'command-switch-alist
 '("gnus" . (lambda (&rest ignore)
              ;; Start Gnus when Emacs starts
              (add-hook 'emacs-startup-hook 'gnus t)
              ;; Exit Emacs after quitting Gnus
              (add-hook 'gnus-after-exiting-gnus-hook
                        'save-buffers-kill-emacs))))
#+END_SRC

** base setup
look here as a starting point for setup :
https://github.com/redguardtoo/mastering-emacs-in-one-year-guide/blob/master/gnus-guide-en.org

#+BEGIN_SRC emacs-lisp :results none
(require 'nnir)
;nnir is a Gnus interface to a number of tools for searching through mail and news repositories. Different backends (like nnimap and nntp) work with different tools (called engines in nnir lingo), but all use the same basic search interface.
;;@see http://www.emacswiki.org/emacs/GnusGmail#toc1
(setq gnus-select-method '(nntp "news.gmane.org")) ;; if you read news groups 
;; ask encyption password once
(setq epa-file-cache-passphrase-for-symmetric-encryption t)
;better to use/store authentication information in one of these files: ~/.authinfo.gpg. if not use this config (may not work)
;;(setq smtpmail-auth-credentials "/home/zeltak/.gnupg/.authinfo.gpg")
;; don't ask confirmations etc on delete and other options 
(setq gnus-novice-user nil)

#+END_SRC
** start options
 
#+BEGIN_SRC emacs-lisp :results none
(setq  gnus-always-read-dribble-file 1)  ; always read auto-save file
(setq 
gnus-treat-buttonize t           ; Add buttons
      gnus-treat-buttonize-head 'head  ; Add buttons to the head
      gnus-treat-emphasize t           ; Emphasize text
      gnus-treat-display-smileys t     ; Use Smilies
      gnus-treat-strip-cr 'last        ; Remove carriage returns
 ;;     gnus-treat-hide-headers 'head    ; Hide headers
)

(add-hook 'gnus-article-display-hook 'gnus-article-highlight-citation t) ; highlight quotes
(add-hook 'gnus-group-mode-hook 'gnus-topic-mode)                        ; use topic separation in the Group overview

#+END_SRC
** TODO asyncronous??
#+BEGIN_SRC emacs-lisp :results none
(setq gnus-asynchronous t)
#+END_SRC
** inline images
#+BEGIN_SRC emacs-lisp :results none
 ;; Inline images?
    (setq mm-attachment-override-types '("image/.*"))
    ;; Or, like this:
    (add-to-list 'mm-attachment-override-types "image/.*")
#+END_SRC
** keybinds
#+BEGIN_SRC emacs-lisp :results none
(define-key gnus-summary-mode-map (kbd "<delete>") 'gnus-summary-delete-article)
#+END_SRC
** auto check mail
#+BEGIN_SRC emacs-lisp :results none
#+END_SRC
** allow levels (enables to hide/show groups based on levels)
the groups cycle upon `o' press
you can change level of a folder via 【S l NUMBER】                             
so to assign to group 1 press 【S l 1】
【o】 to show the selected lv 1 group
【L】 to show all groups  
#+BEGIN_SRC emacs-lisp :results none
(eval-after-load "gnus"
  (lambda ()
     (gnus-demon-add-handler 'gnus-group-get-new-news 2 nil)
     ;; subscribed, from Chen Bin
     (defun my-gnus-group-list-subscribed-groups ()
       (interactive)
       (gnus-group-list-all-groups 2))
     (define-key gnus-group-mode-map (kbd "o") 'my-gnus-group-list-subscribed-groups)
     (add-hook 'gnus-startup-hook
 	      'my-gnus-group-list-subscribed-groups)))


#+END_SRC
** default for how many messages are grabbed when you select a group                            

#+BEGIN_SRC emacs-lisp :results none
(setq gnus-fetch-old-headers 250 )
#+END_SRC

** gmail
*** personal info
#+BEGIN_SRC emacs-lisp :results none
;; Personal Information
(setq user-full-name "Itai Kloog"
      user-mail-address "ikloog@gmail.com")
#+END_SRC
*** account
#+BEGIN_SRC emacs-lisp :results none
(add-to-list 'gnus-secondary-select-methods
             '(nnimap "gmail"
                      (nnimap-address "imap.gmail.com")
                      (nnimap-server-port 993)
                      (nnimap-stream ssl)
                      (nnir-search-engine imap)
;;                      (nnimap-authinfo-file "~/.gnupg/ikloogmail.gpg")
                      (nnmail-expiry-target "nnimap+gmail:[Gmail]/Trash")
                      (nnmail-expiry-wait 90)))

(setq gnus-thread-sort-functions
      '((not gnus-thread-sort-by-date)
        (not gnus-thread-sort-by-number)))

;; Make Gnus NOT ignore [Gmail] mailboxes
    (setq gnus-ignored-newsgroups "^to\\.\\|^[0-9. ]+\\( \\|$\\)\\|^[\"]\"[#'()]")

(setq message-send-mail-function 'smtpmail-send-it
      smtpmail-starttls-credentials '(("smtp.gmail.com" 587 nil nil))
      smtpmail-auth-credentials '(("smtp.gmail.com" 587 "ikloog@gmail.com" nil))
      smtpmail-default-smtp-server "smtp.gmail.com"
      smtpmail-smtp-server "smtp.gmail.com"
      smtpmail-smtp-service 587
      smtpmail-local-domain "homepc")

(setq gnus-use-correct-string-widths nil)
#+END_SRC
*** multiple accounts
#+BEGIN_SRC emacs-lisp :results none
(setq my-email-addresses '("ikloog@gmail.com"
                           "zeltak@gmail.com"
                            "ikloog@bgu.ac.il."
                           "ekloog@hsoh.harvard.edu"
                        ))

(setq message-alternative-emails
      (regexp-opt my-email-addresses))

;; Gnus from manipulation
(setq gnus-from-selected-index 0)
(defun gnus-loop-from ()
  (interactive)
  (setq gnus-article-current-point (point))
  (goto-char (point-min))
  (if (eq gnus-from-selected-index (length my-email-addresses))
      (setq gnus-from-selected-index 0) nil)
  (while (re-search-forward "^From:.*$" nil t)
    (replace-match (concat "From: " user-full-name " <" (nth gnus-from-selected-index my-email-addresses) ">")))
  (goto-char gnus-article-current-point)
  (setq gnus-from-selected-index (+ gnus-from-selected-index 1)))

(global-set-key (kbd "C-c f") 'gnus-loop-from)
#+END_SRC
*** options
#+BEGIN_SRC emacs-lisp :results none
;; You need install the command line brower 'w3m' and Emacs plugin 'w3m'
(setq mm-text-html-renderer 'w3m)

;; NO 'passive
(setq gnus-use-cache t)
;; Fetch only part of the article if we can.  I saw this in someone ;; else's .gnus
(setq gnus-read-active-file 'some)
;; Tree view for groups.  I like the organisational feel this has.
(add-hook 'gnus-group-mode-hook 'gnus-topic-mode)
;; Threads!  I hate reading un-threaded email -- especially mailing
;; lists.  This helps a ton!
(setq gnus-summary-thread-gathering-function 'gnus-gather-threads-by-subject)

;; Also, I prefer to see only the top level message.  If a message has
;; several replies or is part of a thread, only show the first
;; message.  'gnus-thread-ignore-subject' will ignore the subject and
;; look at 'In-Reply-To:' and 'References:' headers.
(setq gnus-thread-hide-subtree t)
(setq gnus-thread-ignore-subject t)


#+END_SRC
** BBDB integration
#+BEGIN_SRC emacs-lisp :results none

;; BBDB: Address list
;(add-to-list 'load-path "/where/you/place/bbdb/")
(require 'bbdb)
(bbdb-initialize 'message 'gnus 'sendmail)
(setq bbdb-file "~/.bbdb") ;; OPTIONAL, because I'm sharing my ~/.emacs.d
(add-hook 'gnus-startup-hook 'bbdb-insinuate-gnus)
(setq bbdb/mail-auto-create-p t
      bbdb/news-auto-create-p t)

;; auto-complete emacs address using bbdb's own UI
(add-hook 'message-mode-hook
          '(lambda ()
             (flyspell-mode t)
             (local-set-key "<TAB>" 'bbdb-complete-name)))
#+END_SRC
** searching mail
** read html email
#+BEGIN_SRC emacs-lisp :results none
(setq mm-text-html-renderer 'w3m)
#+END_SRC
** messages
when a new followup arrives in a thread, I see the previous messages from that thread
#+BEGIN_SRC emacs-lisp :results none
(setq gnus-fetch-old-headers t)
#+END_SRC
** TODO sane default headers
#+BEGIN_SRC emacs-lisp :results none

  ;; ;; also I'd prefer to have sane default headers
  ;; (setq gnus-visible-headers '("^From:\\|^Subject:\\|To:\\|^Cc:\\|^Date:\\|^Newsgroups:\\|^User-Agent:\\|^X-Newsreader:\\|^X-Mailer:")
  ;;       gnus-sorted-header-list gnus-visible-headers)
#+END_SRC
** Theme
*** split gnus to 3 (outlook style)
https://raw.githubusercontent.com/dertuxmalwieder/My-Emacs-config/master/.gnus.el
#+BEGIN_SRC emacs-lisp :results none
  ;; ;; reconfigure buffer positions for a wider screen
  ;; (gnus-add-configuration  ; summary view
  ;;  '(summary
  ;;    (horizontal 1.0
  ;;                (vertical 1.0 (group 0.25) (summary 1.0 point)))))
  ;; (gnus-add-configuration  ; article view
  ;;  '(article
  ;;    (horizontal 1.0
  ;;                (vertical 0.45 (group 0.25) (summary 1.0 point) ("*BBDB*" 0.15))
  ;;                (vertical 1.0 (article 1.0)))))
  ;; (gnus-add-configuration  ; post new stuff
  ;;  '(edit-form
  ;;    (horizontal 1.0
  ;;                (vertical 0.45 (group 0.25) (edit-form 1.0 point) ("*BBDB*" 0.15))
  ;;                (vertical 1.0 (article 1.0)))))
#+END_SRC

* mu4e
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-08-08 Sat 11:25
  :ARCHIVE_FILE: ~/.emacs.d/settings.org
  :ARCHIVE_CATEGORY: settings
  :END:
*** base setup 
for ubuntu
#+BEGIN_SRC emacs-lisp :results none
(when (string= system-name "zuni")
(add-to-list 'load-path "~/mu/mu4e/")
)
#+END_SRC

#+BEGIN_SRC emacs-lisp :results none
(require 'mu4e)
(require 'mu4e-contrib) 
;for below make sure the (mu4e-maildirs-extension) is installed from melpa/git

;;;;$Note-this may screw up header updates$ 
;(mu4e-maildirs-extension)
;; list of my email addresses.
(setq mu4e-user-mail-address-list '("ikloog@gmail.com"
                                    "ikloog@bgu.ac.il"
                                    "ekloog@hsph.harvard.edu"))


#+END_SRC
*** fetching and indexing
#+BEGIN_SRC emacs-lisp :results none
(setq mu4e-update-interval 60)
(setq mu4e-headers-auto-update t)
(setq mu4e-index-update-error-warning  t)
(setq mu4e-index-update-error-continue   t)
#+END_SRC
OLD:
#+BEGIN_EXAMPLE
(setq mu4e-get-mail-command "offlineimap")
#+END_EXAMPLE
*** personal info
#+BEGIN_SRC emacs-lisp :results none
;; something about ourselves
(setq
   user-mail-address "ikloog@gmail.com"
   user-full-name  "itai kloog "
   mu4e-compose-signature
    (concat
      "itai kloog\n"
      "http://www.bgu.ac.il\n"))

(setq mu4e-compose-signature-auto-include 't)
#+END_SRC

*** mail folders 
#+BEGIN_SRC emacs-lisp :results none
;; default
;;(setq mu4e-maildir "~/.mail/gmail/")
(setq mu4e-maildir "/home/zeltak/Maildir")

(setq mu4e-drafts-folder "/[Gmail].Drafts")
(setq mu4e-sent-folder   "/[Gmail].Sent Mail")
(setq mu4e-trash-folder  "/[Gmail].Trash")
(setq mu4e-attachment-dir  "~/Downloads")

#+END_SRC
*** keybinds
#+BEGIN_SRC emacs-lisp :results none
;; setup some handy shortcuts
;; you can quickly switch to your Inbox -- press ``ji''
;; then, when you want archive some messages, move them to
;; the 'All Mail' folder by pressing ``ma''.

(setq mu4e-maildir-shortcuts
    '( ("INBOX"               . ?i)
       ("Starred"   . ?r)
       ("/[Gmail].Sent Mail"   . ?s)
       ("/[Gmail].Trash"       . ?t)
       ("/[Gmail].All Mail"    . ?a)))
#+END_SRC
*** composing
#+BEGIN_SRC emacs-lisp :results none
mu4e-compose-dont-reply-to-self t                  ; don't reply to myself
#+END_SRC
*** orgmode integration
#+BEGIN_SRC emacs-lisp :results none
(require 'org-mu4e)
#+END_SRC
*** sending
#+BEGIN_SRC emacs-lisp :results none
(require 'smtpmail)
(setq message-send-mail-function 'smtpmail-send-it
   starttls-use-gnutls t
   smtpmail-starttls-credentials '(("smtp.gmail.com" 587 nil nil))
   smtpmail-auth-credentials
     '(("smtp.gmail.com" 587 "ikloog@gmail.com" nil))
   smtpmail-default-smtp-server "smtp.gmail.com"
   smtpmail-smtp-server "smtp.gmail.com"
   smtpmail-smtp-service 587)

;; don't save messages to Sent Messages, Gmail/IMAP takes care of this
(setq mu4e-sent-messages-behavior 'delete)

;; alternatively, for emacs-24 you can use:
;;(setq message-send-mail-function 'smtpmail-send-it
;;     smtpmail-stream-type 'starttls
;;     smtpmail-default-smtp-server "smtp.gmail.com"
;;     smtpmail-smtp-server "smtp.gmail.com"
;;     smtpmail-smtp-service 587)
#+END_SRC
*** view settings
#+BEGIN_SRC emacs-lisp :results none
(setq mu4e-date-format-long "%d/%m/%Y (%H:%M:%S)")
(setq mu4e-headers-date-format "%d/%m/%Y (%H:%M:%S)")
;can define a horizontal or vertical split 
(setq mu4e-split-view 'horizontal)


;; use 'fancy' non-ascii characters in various places in mu4e
(setq mu4e-use-fancy-chars t)
;; attempt to show images when viewing messages
(setq mu4e-view-show-images t)
(when (fboundp 'imagemagick-register-types)
      (imagemagick-register-types))
;preffer html  
(setq mu4e-view-prefer-html t)

;; Silly mu4e only shows names in From: by default. Of course we also  want the addresses.
(setq mu4e-view-show-addresses t)

;; mu4e-action-view-in-browser is built into mu4e
;; by adding it to these lists of custom actions
;; it can be invoked by first pressing a, then selecting
(add-to-list 'mu4e-headers-actions
             '("in browser" . mu4e-action-view-in-browser) t)
(add-to-list 'mu4e-view-actions
             '("in browser" . mu4e-action-view-in-browser) t)

;; the headers to show in the headers list -- a pair of a field
;; and its width, with `nil' meaning 'unlimited'
;; (better only use that for the last field.
;; These are the defaults:
(setq mu4e-headers-fields
    '( (:date          .  25)
       (:flags         .   6)
       (:from          .  22)
       (:subject       .  nil)))


;; don't keep message buffers around
(setq message-kill-buffer-on-exit t)

#+END_SRC
*** html 
#+BEGIN_SRC emacs-lisp :results none
(require 'mu4e-contrib) 
(setq mu4e-html2text-command 'mu4e-shr2text) 
;(setq mu4e-html2text-command "w3m -I utf8 -O utf8 -T text/html")
#+END_SRC

*** misc
#+BEGIN_SRC emacs-lisp :results none
;; don't keep message buffers around
(setq message-kill-buffer-on-exit t)

;; don't save message to Sent Messages, Gmail/IMAP takes care of this
(setq mu4e-sent-messages-behavior 'delete)
;; (See the documentation for `mu4e-sent-messages-behavior' if you have
;; additional non-Gmail addresses and want assign them different
;; behavior.)

#+END_SRC
*** Faces
#+BEGIN_SRC emacs-lisp :results none
(defgroup mu4e-faces nil 
  "Type faces (fonts) used in mu4e." 
  :group 'mu4e 
  :group 'faces) 

(defface mu4e-basic-face 
  '((t :inherit font-lock-keyword-face)) 
  "Basic Face." 
  :group 'mu4e-faces) 

(defface mu4e-list-default 
  '((t :inherit mu4e-basic-face)) 
  "Basic list Face." 
  :group 'mu4e-faces) 

(defface mu4e-rw-default 
  '((t :inherit mu4e-basic-face)) 
  "Basic rw Face." 
  :group 'mu4e-faces) 
#+END_SRC

#+BEGIN_SRC emacs-lisp :results none
;; basic face from where the rest inherits 
 '(mu4e-basic-face ((t :inherit font-lock-keyword-face :weight normal :foreground "Gray10"))) 

;; read-write group 
 '(mu4e-rw-default ((t :inherit mu4e-basic-face))) ;; face from where all the read/write faces inherits 
 '(mu4e-header-face ((t :inherit mu4e-rw-default))) 
 '(mu4e-header-marks-face ((t :inherit mu4e-rw-default))) 
 '(mu4e-header-title-face ((t :inherit mu4e-rw-default))) 
 '(mu4e-header-highlight-face ((t :inherit mu4e-rw-default :foreground "Black" :background "LightGray"))) 
 '(mu4e-compose-header-face ((t :inherit mu4e-rw-default))) 
 '(mu4e-compose-separator-face ((t :inherit mu4e-rw-default :foreground "Gray30" :weight bold))) 
 '(mu4e-footer-face ((t :inherit mu4e-rw-default))) 
 '(mu4e-contact-face ((t :inherit mu4e-rw-default :foreground "Black"))) 
 '(mu4e-cited-1-face ((t :inherit mu4e-rw-default :foreground "Gray10"))) 
 '(mu4e-cited-2-face  ((t :inherit mu4e-cited-1-face :foreground "Gray20"))) 
 '(mu4e-cited-3-face   ((t :inherit mu4e-cited-2-face :foreground "Gray30"))) 
 '(mu4e-cited-4-face    ((t :inherit mu4e-cited-3-face :foreground "Gray40"))) 
 '(mu4e-cited-5-face     ((t :inherit mu4e-cited-4-face :foreground "Gray50"))) 
 '(mu4e-cited-6-face      ((t :inherit mu4e-cited-5-face :foreground "Gray60"))) 
 '(mu4e-cited-7-face       ((t :inherit mu4e-cited-6-face :foreground "Gray70"))) 
 '(mu4e-link-face ((t :inherit mu4e-rw-default :foreground "Blue" :weight bold))) 
 '(mu4e-system-face ((t :inherit mu4e-rw-defaul :foreground "DarkOrchid"))) 
 '(mu4e-url-number-face ((t :inherit mu4e-rw-default :weight bold))) 
 '(mu4e-attach-number-face ((t :inherit mu4e-rw-default :weight bold :foreground "Blue"))) 

;; lists (headers) group 
 '(mu4e-list-default ((t :inherit mu4e-basic-face))) ;; basic list face from where lists inherits 
 '(mu4e-draft-face ((t :inherit mu4e-list-default))) 
 '(mu4e-flagged-face ((t :inherit mu4e-list-default :weight bold :foreground "Black"))) 
 '(mu4e-forwarded-face ((t :inherit mu4e-list-default))) 
 '(mu4e-list-default-face ((t :inherit mu4e-list-default))) 
 '(mu4e-title-face ((t :inherit mu4e-list-default))) 
 '(mu4e-trashed-face ((t :inherit mu4e-list-default))) 
 '(mu4e-warning-face ((t :inherit mu4e-list-default :foreground "OrangeRed1"))) 
 '(mu4e-modeline-face ((t :inherit mu4e-list-default))) 
 '(mu4e-moved-face ((t :inherit mu4e-list-default))) 
 '(mu4e-ok-face ((t :inherit mu4e-list-default :foreground "ForestGreen"))) 
 '(mu4e-read-face ((t :inherit mu4e-list-default :foreground "Gray80"))) 
 '(mu4e-region-code-face ((t :inherit mu4e-list-default :background "Gray25"))) 
 '(mu4e-replied-face ((t :inherit mu4e-list-default :foreground "Black"))) 
 '(mu4e-unread-face ((t :inherit mu4e-list-default :foreground "Blue"))) 
 '(mu4e-highlight-face ((t :inherit mu4e-unread-face))) 

 '(mu4e-special-header-value-face ((t :inherit mu4e-contact-face))) 
 '(mu4e-header-key-face ((t :inherit mu4e-contact-face :foreground "Gray50"))) 
 '(mu4e-header-value-face ((t :inherit mu4e-contact-face))) 
 '(message-cited-text ((t :inherit mu4e-rw-default :foreground "Gray10"))) 

#+END_SRC


* resize via menu
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-08-09 Sun 16:25
  :ARCHIVE_FILE: ~/.emacs.d/settings.org
  :ARCHIVE_OLPATH: Functions/windows (panes)
  :ARCHIVE_CATEGORY: settings
  :END:
#+BEGIN_SRC emacs-lisp :results none
(defun resize-window (&optional arg)    ; Hirose Yuuji and Bob Wiener
  "*Resize window interactively."
  (interactive "p")
  (if (one-window-p) (error "Cannot resize sole window"))
  (or arg (setq arg 1))
  (let (c)
    (catch 'done
      (while t
	(message
	 "h=heighten, s=shrink, w=widen, n=narrow (by %d);  1-9=unit, q=quit"
	 arg)
	(setq c (read-char))
	(condition-case ()
	    (cond
	     ((= c ?h) (enlarge-window arg))
	     ((= c ?s) (shrink-window arg))
	     ((= c ?w ) (enlarge-window-horizontally arg))
	     ((= c ?n) (shrink-window-horizontally arg))
	     ((= c ?\^G) (keyboard-quit))
	     ((= c ?q) (throw 'done t))
	     ((and (> c ?0) (<= c ?9)) (setq arg (- c ?0)))
	     (t (beep)))
	  (error (beep)))))
    (message "Done.")))
#+END_SRC

* swap window location
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-08-09 Sun 16:25
  :ARCHIVE_FILE: ~/.emacs.d/settings.org
  :ARCHIVE_OLPATH: Functions/windows (panes)
  :ARCHIVE_CATEGORY: settings
  :END:
#+BEGIN_SRC emacs-lisp :results none
(defun transpose-windows (arg)
   "Transpose the buffers shown in two windows."
   (interactive "p")
   (let ((selector (if (>= arg 0) 'next-window 'previous-window)))
     (while (/= arg 0)
       (let ((this-win (window-buffer))
             (next-win (window-buffer (funcall selector))))
         (set-window-buffer (selected-window) next-win)
         (set-window-buffer (funcall selector) this-win)
         (select-window (funcall selector)))
       (setq arg (if (plusp arg) (1- arg) (1+ arg))))))
#+END_SRC


* windows (panes)
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-08-09 Sun 16:25
  :ARCHIVE_FILE: ~/.emacs.d/settings.org
  :ARCHIVE_OLPATH: Functions
  :ARCHIVE_CATEGORY: settings
  :END:
