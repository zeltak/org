
Archived entries from file /home/zeltak/.emacs.d/settings.org


* Abbrev for Shell Commands
  :PROPERTIES:
  :ARCHIVE_TIME: 2014-12-15 Mon 13:03
  :ARCHIVE_FILE: ~/.emacs.d/settings.org
  :ARCHIVE_OLPATH: test
  :ARCHIVE_CATEGORY: settings
  :END:

#+BEGIN_SRC emacs-lisp :results none
(defcustom xah-shell-abbrev-alist nil "alist of xah's shell abbrevs")

(setq xah-shell-abbrev-alist
          '(
            ("rsync1" . "rsync -z -r -v -t --chmod=Dugo+x --chmod=ugo+r --delete --exclude='*~' --exclude='.bash_history' --exclude='logs/'  --rsh='ssh -l u80781' ~/web/ u80781@s30097.example.com:~/")

            ("ssh" . "ssh -l u80781 xahlee.org ")
            ("img1" . "convert -quality 85% ")
            ("imgScale" . "convert -scale 50% -quality 85% ")
            ("img256" . "convert +dither -colors 256 ")
            ("imgBatch" . "find . -name \"*png\" | xargs -l -i basename \"{}\" \".png\" | xargs -l -i  convert -quality 85% \"{}.png\" \"{}.jpg\"")
            ("img-bmp2png" . "find . -name \"*bmp\" | xargs -l -i basename \"{}\" \".bmp\" | xargs -l -i  convert \"{}.bmp\" \"{}.png\"")

            ("grep" . "grep -r -F 'xxx' --include='*html' ~/web")

            ("rm_empty" . "find . -type f -empty")
            ("chmod_file" . "find . -type f -exec chmod 644 {} ';'")
            ("rm~" . "find . -name \"*~\" -exec rm {} ';'")
            ("findEmptyDir" . "find . -depth -empty -type d")
            ("rmEmptyDir" . "find . -depth -empty -type d -exec rmdir {} ';'")
            ("chmod2" . "find . -type d -exec chmod 755 {} ';'")
            ("arch-upgrade" . "sudo pacman -Syu ")
            ("lynx" . "lynx -dump -assume_local_charset=utf-8 -display_charset=utf-8 -width=100")
            ("vp" . "feh --randomize --recursive --auto-zoom --action \"gvfs-trash '%f'\" --geometry 1600x1000 ~/Pictures/ &")
            )

          )

(defun xah-shell-commands (cmdAbbrev)
  "insert shell command from a selection prompt."
  (interactive
   (list
      (ido-completing-read "shell abbrevs:" (mapcar (lambda (x) (car x)) xah-shell-abbrev-alist) "PREDICATE" "REQUIRE-MATCH") ) )
  (progn
    (insert (cdr (assoc cmdAbbrev xah-shell-abbrev-alist)))
    ))
#+END_SRC 



* modline
  :PROPERTIES:
  :ARCHIVE_TIME: 2014-12-20 Sat 08:32
  :ARCHIVE_FILE: ~/.emacs.d/settings.org
  :ARCHIVE_OLPATH: test
  :ARCHIVE_CATEGORY: settings
  :END:
#+BEGIN_SRC emacs-lisp 
;; use setq-default to set it for /all/ modes
(setq mode-line-format
  (list
    ;; the buffer name; the file name as a tool tip
    '(:eval (propertize "%b " 'face 'font-lock-keyword-face
        'help-echo (buffer-file-name)))
    ;; line and column
    "(" ;; '%02' to set to 2 chars at least; prevents flickering
      (propertize "%02l" 'face 'font-lock-type-face) ","
      (propertize "%02c" 'face 'font-lock-type-face) 
    ") "
    ;; relative position, size of file
    "["
    (propertize "%p" 'face 'font-lock-constant-face) ;; % above top
    "/"
    (propertize "%I" 'face 'font-lock-constant-face) ;; size
    "] "
    ;; the current major mode for the buffer.
    "["

    '(:eval (propertize "%m" 'face 'font-lock-string-face
              'help-echo buffer-file-coding-system))
    "] "


    "[" ;; insert vs overwrite mode, input-method in a tooltip
    '(:eval (propertize (if overwrite-mode "Ovr" "Ins")
              'face 'font-lock-preprocessor-face
              'help-echo (concat "Buffer is in "
                           (if overwrite-mode "overwrite" "insert") " mode")))

    ;; was this buffer modified since the last save?
    '(:eval (when (buffer-modified-p)
              (concat ","  (propertize "Mod"
                             'face 'font-lock-warning-face
                             'help-echo "Buffer has been modified"))))

    ;; is this buffer read-only?
    '(:eval (when buffer-read-only
              (concat ","  (propertize "RO"
                             'face 'font-lock-type-face
                             'help-echo "Buffer is read-only"))))  
    "] "

    " --"
    ;; i don't want to see minor-modes; but if you want, uncomment this:
    ;; minor-mode-alist  ;; list of minor modes
    "%-" ;; fill with '-'
    ))
#+END_SRC



* Changing the mode-line color by state
  :PROPERTIES:
  :ARCHIVE_TIME: 2014-12-20 Sat 08:33
  :ARCHIVE_FILE: ~/.emacs.d/settings.org
  :ARCHIVE_OLPATH: look and feel/Evil mode look and feel
  :ARCHIVE_CATEGORY: settings
  :END:

#+BEGIN_SRC emacs-lisp :results none
  ;; (defun my-evil-modeline-change (default-color)
  ;;   "changes the modeline color when the evil mode changes"
  ;;   (let ((color (cond ((evil-emacs-state-p) '("#440000" . "#ffffff"))
  ;;                      ((evil-insert-state-p) '("#002233" . "#ffffff"))
  ;;                      ((evil-visual-state-p) '("#330022" . "#ffffff"))
  ;;                      (t default-color))))
  ;;     (set-face-background 'mode-line (car color))
  ;;     (set-face-foreground 'mode-line (cdr color))))
  
  ;; (lexical-let ((default-color (cons (face-background 'mode-line)
  ;;                                    (face-foreground 'mode-line))))
  ;;   (add-hook 'post-command-hook (lambda () (my-evil-modeline-change default-color))))
#+END_SRC

#+BEGIN_SRC emacs-lisp :resulits none
  ;; ;; change mode-line color by evil state
  ;;  (lexical-let ((default-color (cons (face-background 'mode-line)
  ;;                                     (face-foreground 'mode-line))))
  ;;    (add-hook 'post-command-hook
  ;;      (lambda ()
  ;;        (let ((color (cond ((minibufferp) default-color)
  ;;                           ((evil-insert-state-p) '("#F90E41" . "#ffffff"))
  ;;                           ((evil-emacs-state-p)  '("#777877" . "#ffffff"))
  ;;                           ((buffer-modified-p)   '("#000000" . "#ffffff"))
  ;;                           (t default-color))))
  ;;          (set-face-background 'mode-line (car color))
  ;;          (set-face-foreground 'mode-line (cdr color))))))
#+END_SRC

* repeatable command
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-01-30 Fri 09:14
  :ARCHIVE_FILE: ~/.emacs.d/settings.org
  :ARCHIVE_OLPATH: Packages/key-chord
  :ARCHIVE_CATEGORY: settings
  :END:
#+BEGIN_SRC emacs-lisp :results none
  (defun zeltak/def-rep-command (alist)
      "Return a lambda that calls the first function of ALIST.
  It sets the transient map to all functions of ALIST,
  allowing you to repeat those functions as needed."
      (lexical-let ((keymap (make-sparse-keymap))
                    (func (cdar alist)))
        (mapc (lambda (x)
                (when x
                  (define-key keymap (kbd (car x)) (cdr x))))
              alist)
        (lambda (arg)
          (interactive "p")
          (when func
            (funcall func arg))
          (set-transient-map keymap t))))
#+END_SRC

* orgmode
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-01-30 Fri 09:14
  :ARCHIVE_FILE: ~/.emacs.d/settings.org
  :ARCHIVE_OLPATH: Packages/key-chord
  :ARCHIVE_CATEGORY: settings
  :END:
#+BEGIN_SRC emacs-lisp :results none
(key-chord-define-global "oo"   
      (zeltak/def-rep-command
       '(nil
         ("d" . org-download-screenshot)
         ("<right>" . org-download-screenshot)
         ("<down>" . windmove-down)
         ("<up>" . windmove-up)
         ("y" . other-window)
         ("h" . ace-window)
         ("s" . (lambda () (interactive) (ace-window 4)))
         ("d" . (lambda () (interactive) (ace-window 16)))
         )))
#+END_SRC


* !icicles!
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-01-30 Fri 10:47
  :ARCHIVE_FILE: ~/.emacs.d/settings.org
  :ARCHIVE_OLPATH: Packages
  :ARCHIVE_CATEGORY: settings
  :END:

#+BEGIN_SRC emacs-lisp :results none
  ;; (require 'icicles)
  ;; ;turn on by default
  ;; (icy-mode 1)
#+END_SRC

* !Inactive!
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-01-30 Fri 10:47
  :ARCHIVE_FILE: ~/.emacs.d/settings.org
  :ARCHIVE_OLPATH: Packages
  :ARCHIVE_CATEGORY: settings
  :END:
** org-screenshot

https://github.com/dfeich/org-screenshot

#+BEGIN_SRC emacs-lisp :results none
;(load-file "/home/zeltak/.emacs.g/extra/org-screenshot/org-screenshot.el")
;(require 'org-screenshot)
#+END_SRC

** fill column indicator

#+BEGIN_SRC emacs-lisp :results none
  ;; (require 'fill-column-indicator)
  ;;  (setq fci-rule-width 1)
  ;;   (setq fci-rule-color "darkblue")
  
  ;; ;to turn it on automatically when visiting a file with C code, put the following line in your init file:
  ;; (add-hook 'org-mode-hook 'fci-mode)
  
  ;; ;To turn on fci-mode automatically for all files, put the following line in your init file:
  ;; ;add-hook 'after-change-major-mode-hook 'fci-mode)
  
  ;; ;To enable fci-mode as a global minor mode, put the following code to your init file:
  ;; ;(define-globalized-minor-mode global-fci-mode fci-mode (lambda () (fci-mode 1)))
  ;; ;(global-fci-mode 1)
  
#+END_SRC 




* SML (smartmodeline) @broken currently@
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-01-30 Fri 11:07
  :ARCHIVE_FILE: ~/.emacs.d/settings.org
  :ARCHIVE_OLPATH: Packages
  :ARCHIVE_CATEGORY: settings
  :END:
#+BEGIN_SRC emacs-lisp :results none
#+END_SRC


* switch window
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-01-30 Fri 11:08
  :ARCHIVE_FILE: ~/.emacs.d/settings.org
  :ARCHIVE_OLPATH: Packages
  :ARCHIVE_CATEGORY: settings
  :END:
https://github.com/dimitri/switch-window/blob/master/switch-window.el

when !3 or more! windows are present the command numbers the windows for easy switching
if only 2 windows are avilabe it will switch between

#+BEGIN_SRC emacs-lisp :results none
(global-set-key (kbd "C-x o") 'switch-window)
(require 'switch-window)
#+END_SRC

* el-get
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-02-04 Wed 20:32
  :ARCHIVE_FILE: ~/.emacs.d/settings.org
  :ARCHIVE_OLPATH: Emacs startup/startup packages
  :ARCHIVE_CATEGORY: settings
  :END:
** load on Emacs start 
#+BEGIN_SRC emacs-lisp :results none
(add-to-list 'load-path "~/.emacs.d/el-get/el-get")

(unless (require 'el-get nil 'noerror)
  (with-current-buffer
      (url-retrieve-synchronously
       "https://raw.githubusercontent.com/dimitri/el-get/master/el-get-install.el")
    (goto-char (point-max))
    (eval-print-last-sexp)))

(add-to-list 'el-get-recipe-path "~/.emacs.d/el-get-user/recipes")
(el-get 'sync)
#+END_SRC
** my packages to install/load on startup 
#+BEGIN_SRC emacs-lisp :results none
(setq el-get-sources  
      '((:name async :type elpa)  
         ( :name bookmark+ :type elpa)
))

(setq my:el-get-packages
      '(yasnippet
        helm
        dired-sort
        dired+
        rainbow-mode
        hydra
        ace-isearch 
        helm-swoop
        ace-jump-mode 
        ace-window 
        ace-jump-mode 
        auctex 
        auto-complete 
        bbdb 
        browse-kill-ring
        dired-details+ 
        evil 
        undo-tree 
        evil-nerd-commenter 
        expand-region 
        flx 
        google-contacts 
        helm-cmd-t 
        key-chord 
        magit 
        openwith 
        smex 
        async 
        bookmark+
        ))


(el-get 'sync my:el-get-packages)
#+END_SRC
lentic 
async
company dired-rainbow
dired-hacks-utils 
flx-ido 
helm-bibtex 
helm-chrome 



* perspective
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-07-03 Fri 13:05
  :ARCHIVE_FILE: ~/.emacs.d/settings.org
  :ARCHIVE_OLPATH: Packages
  :ARCHIVE_CATEGORY: settings
  :END:
https://github.com/nex3/perspective-el

#+BEGIN_SRC emacs-lisp :results none
(use-package perspective
 :ensure t
 :config
  )
#+END_SRC 


* Ace jump
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-07-20 Mon 18:34
  :ARCHIVE_FILE: ~/.emacs.d/settings.org
  :ARCHIVE_OLPATH: Packages
  :ARCHIVE_CATEGORY: settings
  :END:
** evil mode specifics 
#+BEGIN_SRC emacs-lisp :results none 
  ;; some proposals for binding:
 
;  (define-key evil-motion-state-map (kbd "SPC") #'evil-ace-jump-char-mode)
;  (define-key evil-motion-state-map (kbd "C-SPC") #'evil-ace-jump-word-mode)
;  (define-key evil-motion-state-map (kbd "M-SPC") #'evil-ace-jump-line-mode)
   
  ;; (define-key evil-operator-state-map (kbd "SPC") #'evil-ace-jump-char-mode)      ; similar to f
  ;; (define-key evil-operator-state-map (kbd "C-SPC") #'evil-ace-jump-char-to-mode) ; similar to t
  ;; (define-key evil-operator-state-map (kbd "M-SPC") #'evil-ace-jump-word-mode)
  
#+END_SRC
