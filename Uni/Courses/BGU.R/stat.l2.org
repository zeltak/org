# -*- mode: Org; org-download-image-dir: "/home/zeltak/org/attach/bgu/courses/BGU.R/images"; org-download-heading-lvl: nil; -*-
#+Title:שיטות כמותיות למתקדמים
#+Author: ד"ר איתי קלוג 
#+Email: ikloog@bgu.ac.il
#+REVEAL_TITLE_SLIDE_BACKGROUND: /home/zeltak/org/attach/bgu/courses/BGU.R/images/stat_large.jpg

#+OPTIONS: reveal_center:t reveal_progress:t reveal_history:nil reveal_control:t
# #+OPTIONS: reveal_center:t 
#+OPTIONS: reveal_rolling_links:t reveal_keyboard:t reveal_overview:t num:nil
#+OPTIONS: reveal_width:1200 reveal_height:800
#+OPTIONS: toc:nil
# #+REVEAL: split
#+REVEAL_MARGIN: 0.1
#+REVEAL_MIN_SCALE: 0.5
#+REVEAL_MAX_SCALE: 2.5
#+REVEAL_TRANS: linear
#+REVEAL_SPEED: default
#+REVEAL_THEME: white
#+REVEAL_HLEVEL: 2
#+REVEAL_HEAD_PREAMBLE: <meta name="description" content="Org-Reveal Introduction.">
#+REVEAL_POSTAMBLE: <p> Created by itai Kloog. </p>
# REVEAL_PLUGINS: (highlight markdown notes)
#+REVEAL_EXTRA_CSS: ./local.css
#+REVEAL_SLIDE_NUMBER: t
#+OPTIONS: ^:nil
#+EXCLUDE_TAGS: noexport
#+TAGS: noexport(n)


* Week 2

#+DOWNLOADED: /tmp/screenshot.png @ 2015-10-19 09:45:28
#+attr_html: :width 600px
 [[~/Sync/attach/images_2015/screenshot_2015-10-19_09-45-28.png]]

** Math in R
  :PROPERTIES:
	  :reveal_background: /home/zeltak/org/attach/bgu/courses/BGU.R/images/hist_BD.jpg
	  :END:
*** R base math
sum(x)
total of all the values in x

mean(x)
arithmetic average of the values in x

sd(x)
find the SD of x

median(x)
median value in x

IQR(x)
Interquartile range of x

range(x)
vector of min(x) and max(x)

var(x)
sample variance of x

*** mean, min and max
#+BEGIN_SRC R  :session Rorg  :results none
a <- c(2,4,6,3,1,5)
min(a)
#[1] 1
max(a)
#[1] 6
mean(a)
[1] 3.5

#+END_SRC 

*** square root, logarithm, etc.
#+BEGIN_SRC R :session Rorg  :results none
sqrt(a)
#[1] 1.000000 1.414214 1.732051 2.000000
  exp(a)
#[1]  2.718282  7.389056 20.085537 54.598150
  log(a)
#[1] 0.0000000 0.6931472 1.0986123 1.3862944
#+END_SRC
*** combining operations 
By combining operations and using parentheses you can make more complicated expressions:
#+BEGIN_SRC R :session Rorg  :results none
c <- (a + sqrt(a))/(exp(2)+1)
c
#[1] 0.2384058 0.4069842 0.5640743 0.7152175
#+END_SRC
*** arithmetics with R
In its most basic form R can be used as a simple calculator. Consider the following arithmetic operators:\\

#+BEGIN_QUOTE
Addition: +\\
Subtraction: -\\
Multiplication: *\\
Division: /\\
Exponentiation: ^\\
#+END_QUOTE

** More R programming
  :PROPERTIES:
	  :reveal_background: /home/zeltak/org/attach/bgu/courses/BGU.R/images/hist_BD.jpg
	  :END:
*** Entering and Importing Data
 R works most easily with datasets stored as text files. Typically, values in text files are separated, or delimited, by tabs or spaces:

 #+BEGIN_EXAMPLE
 gender id race ses schtyp prgtype read write math science socst
 0 70 4 1 1 general 57 52 41 47 57
 1 121 4 2 1 vocati 68 59 53 63 31
 0 86 4 3 1 general 44 33 54 58 31
 0 141 4 3 1 vocati 63 44 47 53 56
 #+END_EXAMPLE
 or by commas (CSV file):
 #+BEGIN_EXAMPLE
 gender,id,race,ses,schtyp,prgtype,read,write,math,science,socst
 0,70,4,1,1,general,57,52,41,47,57
 1,121,4,2,1,vocati,68,59,53,63,61
 0,86,4,3,1,general,44,33,54,58,31
 0,141,4,3,1,vocati,63,44,47,53,56
 #+END_EXAMPLE
*** read data-Base
 Base R functions *read.table* and *read.csv* can read in data stored as text files, delimited by almost anything (notice the sep = option)

 You can retrieving files over the internet or from disk

 *Note* how we are assigning the loaded data to objects.

 #+BEGIN_SRC R :session Rorg  :results none
   # comma separated values- FILE
   dat.csv <- read.csv("/home/zeltak/org/attach/bgu/courses/BGU.R/data/hsb2.csv")
   # comma separated values- INTERNET
   dat.int.csv <- read.csv("http://www.ats.ucla.edu/stat/data/hsb2.csv")
   # tab separated values
   dat.int.tab <- read.table("http://www.ats.ucla.edu/stat/data/hsb2.txt",header=TRUE, sep = "\t")
 #+END_SRC
*** read from other software (spps,stata)
 We can read in datasets from other statistical analysis software using functions found in the foreign package

 #+BEGIN_SRC R :session Rorg  :results none
 require(foreign)
 # SPSS files
 dat.spss <- read.spss("http://www.ats.ucla.edu/stat/data/hsb2.sav",to.data.frame=TRUE)
 # Stata files
 dat.dta <- read.dta("http://www.ats.ucla.edu/stat/data/hsb2.dta")
 #+END_SRC
*** Reading in Excel Files
 Datasets are often saved as Excel spreadsheets. Here we utilize the xlsx package and Java to download an Excel dataset.
 #+BEGIN_SRC R :session Rorg  :results none
 # these two steps only needed to read excel files from the internet
 f <- tempfile("hsb2", fileext=".xls")
 download.file("http://www.ats.ucla.edu/stat/data/hsb2.xls", f, mode="wb")
 dat.xls <- read.xlsx(f, sheetIndex=1)
 #+END_SRC
 If you have trouble getting Java and the xlsx package installed and working, just click "save as" in Excel and export the data to a comma separated values file (.csv).
*** reading using a package (fread,readr)
 you can (and should) read csv using 2 new available packakges *fread* and *readr*\\

 *reader*
 #+BEGIN_SRC R :session Rorg  :results none
 library(readr)
 # Read a csv file into a data frame
 readr.csv <- read_csv("/home/zeltak/org/attach/bgu/courses/BGU.R/data/hsb2.csv")
 #+END_SRC
 *fread*
 #+BEGIN_SRC R :session Rorg  :results none
 library(data.table) #many other function, includes fread
 # Read a csv file into a data frame
 fread.csv <- fread("/home/zeltak/org/attach/bgu/courses/BGU.R/data/hsb2.csv")
 #+END_SRC
*** Viewing Data (Head)
 R has ways to look at the dataset at a glance or as a whole.

 #+BEGIN_SRC R :session Rorg  :results none
 # first few rows
 head(dat.csv)
 ##    id female race ses schtyp prog read write math science socst
 ## 1  70      0    4   1      1    1   57    52   41      47    57
 ## 2 121      1    4   2      1    3   68    59   53      63    61
 ## 3  86      0    4   3      1    1   44    33   54      58    31
 ## 4 141      0    4   3      1    3   63    44   47      53    56
 ## 5 172      0    4   2      1    2   47    52   57      53    61
 ## 6 113      0    4   2      1    2   44    52   51      63    61
 #+END_SRC
*** Tail
 #+BEGIN_SRC R :session Rorg  :results none
 # last few rows
 tail(dat.csv)
 ##      id female race ses schtyp prog read write math science socst
 ## 195 179      1    4   2      2    2   47    65   60      50    56
 ## 196  31      1    2   2      2    1   55    59   52      42    56
 ## 197 145      1    4   2      1    3   42    46   38      36    46
 ## 198 187      1    4   2      2    1   57    41   57      55    52
 ## 199 118      1    4   2      1    1   55    62   58      58    61
 ## 200 137      1    4   3      1    2   63    65   65      53    61
 #+END_SRC
*** variable names
to show all the variable names in the data use *names* or *View* commands

 #+BEGIN_SRC R :session Rorg  :results none
# variable names
names(dat.csv)
##  [1] "id"      "female"  "race"    "ses"     "schtyp"  "prog"    "read"   
##  [8] "write"   "math"    "science" "socst"
# pop-up view of entire data set (uncomment to run)
#View(dat.csv)
 #+END_SRC
*** Data frames
Once read in, datasets in R are typically stored as *data frames*, which have a matrix structure.\\

Observations are arranged as *rows* and *variables*, either numerical or categorical, are arranged as columns.\\

data frames are often referenced as DF

*** Data frames
#+BEGIN_SRC R :session Rorg  :results none
  tag <- c(2, 3, 5, 7, 8, 9, 15, 21, 23, 26) 
  weight <- c(14.8, 21, 19.7, 23.2, 16, 16.1, 20, 29.3, 17.8, 21.2) 
  condition <- c("good", "fair", "fair", "poor", "fair", "good", "good", "fair", "fair", "poor") 
  #create a DF from 3 vectors
  fishData <- data.frame(tag, weight, condition) 
  head(fishData, n=2) 
  #  tag weight condition 
  #1   2   14.8      good 
  #2   3   21.0      fair
#+END_SRC
*** Access Individual rows, columns and cells
Individual rows, columns and cells in a data frame can be accessed through many methods of indexing

We most commonly use:
#+BEGIN_EXAMPLE
object[row,column] 
#+END_EXAMPLE

#+BEGIN_SRC R :session Rorg  :results none
# single cell value
dat.csv[2,3]
## [1] 4
#+END_SRC
*** omitting rows,columns
omitting row value implies all rows; here all rows in column 3

#+BEGIN_SRC R :session Rorg  :results none
dat.csv[,3]
##   [1] 4 4 4 4 4 4 3 1 4 3 4 4 4 4 3 4 4 4 4 4 4 4 3 1 1 3 4 4 4 2 4 4 4 4 4
##  [36] 4 4 4 1 4 4 4 4 3 4 4 3 4 4 1 2 4 1 4 4 1 4 1 4 1 4 4 4 4 4 4 4 4 4 1
##  [71] 4 4 4 4 4 1 4 4 4 1 4 4 4 1 4 4 4 4 4 4 2 4 4 1 4 4 4 4 1 4 4 4 3 4 4
## [106] 4 4 4 3 4 4 1 4 4 1 4 4 4 4 3 1 4 4 4 3 4 4 2 4 3 4 2 4 4 4 4 4 3 1 3
## [141] 1 4 4 1 4 4 4 4 1 3 3 4 4 1 4 4 4 4 4 3 4 4 4 4 4 4 4 4 4 4 4 1 3 2 3
## [176] 4 4 4 4 4 4 4 4 4 2 2 4 2 4 3 4 4 4 2 4 2 4 4 4 4
# omitting column values implies all columns; here all columns in row 2
dat.csv[2,]
##    id female race ses schtyp prog read write math science socst
## 2 121      1    4   2      1    3   68    59   53      63    61

#+END_SRC
*** ranges
#+BEGIN_SRC R :session Rorg  :results none
# can also use ranges - rows 2 and 3, columns 2 and 3
dat.csv[2:3, 2:3]
##   female race
## 2      1    4
## 3      0    4
#+END_SRC
*** More variable indexing

We can also access variables directly by using their names, either with object[,"variable"] notation or object$variable notation.

#+BEGIN_SRC R :session Rorg  :results none
# get first 10 rows of variable female using two methods
dat.csv[1:10, "female"]
##  [1] 0 1 0 0 0 0 0 0 0 0
dat.csv$female[1:10]
##  [1] 0 1 0 0 0 0 0 0 0 0
#+END_SRC
*** Combing values into a vector
The c function is widely used to combine values of common type together to form a vector.

For example, it can be used to access non-sequential rows and columns from a data frame.

#+BEGIN_SRC R :session Rorg  :results none
# get column 1 for rows 1, 3 and 5
dat.csv[c(1,3,5), 1]
## [1]  70  86 172
# get row 1 values for variables female, prog and socst
dat.csv[1,c("female", "prog", "socst")]
##   female prog socst
## 1      0    1    57
#+END_SRC
*** Variable rename
If there were no variable names, or we wanted to change the names, we could use colnames.

#+BEGIN_SRC R :session Rorg  :results none
colnames(dat.csv) <- c("ID", "Sex", "Ethnicity", "SES", "SchoolType",
  "Program", "Reading", "Writing", "Math", "Science", "SocialStudies")

# to change one variable name, just use indexing
colnames(dat.csv)[1] <- "ID2"
#+END_SRC
*** Sequence
seq is used to generate regular sequence

#+BEGIN_SRC R  :session Rorg  :results none
seq(11, 20)
#[1] 11 12 13 14 15 16 17 18 19 20
seq(11, 20, by=2) # by 2 
#[1] 11 13 15 17 19
#+END_SRC
*** Repeat
Replicates the values in x

#+BEGIN_SRC R :session Rorg  :results none
rep(3,times=10) 
#[1] 3 3 3 3 3 3 3 3 3 3 
y <- 1:3 
rep(y,times=4) 
#[1] 1 2 3 1 2 3 1 2 3 1 2 3 
rep(y,length=10) 
#[1] 1 2 3 1 2 3 1 2 3 1
rep(y,length=30) 
#[1] 1 2 3 1 2 3 1 2 3 1 2 3 1 
#[14] 2 3 1 2 3 1 2 3 1 2 3 1 2 
#[27] 3 1 2 3
#+END_SRC
*** set names with data.table
alternitavly you can use the data.table setname command
#+BEGIN_SRC R :session Rorg  :results none
# to change one variable name with setnames
setnames(DT,"OLD" "NEW")
#example
setnames(dat.csv,"ID" "ID2")
#+END_SRC
*** Saving Data
most of the time we will save data in *.csv format

We can also save our data in a number of formats, including text, Excel .xlsx, and in other statistical software formats like Stata .dta. 

The function write.dta comes from the foreign package, while write.xlsx comes from the xlsx package.

#+BEGIN_SRC R :session Rorg  :results none
write.csv(dat.csv, file = "path/to/save/filename.csv")
#write.dta(dat.csv, file = "path/to/save/filename.dta")
#write.xlsx(dat.csv, file = "path/to/save/filename.xlsx", sheetName="hsb2")
#+END_SRC

*** save to native R format
We can also save to to binary R format (can save multiple datasets and R objects)
#+BEGIN_SRC R :session Rorg  :results none
# save to binary R format 
save(dat.csv, dat.dta, dat.spss, dat.txt, file = "path/to/save/filename.RData")
#+END_SRC
** Exploring Data
  :PROPERTIES:
	  :reveal_background: /home/zeltak/org/attach/bgu/courses/BGU.R/images/hist_BD.jpg
	  :END:
*** Exploring Data
Now we're going to read some data in and store it in the object, d. We prefer short names for objects that we will use frequently.

We can now easily explore and get to know these data, which contain a number of school, test, and demographic variables for 200 students.

#+BEGIN_SRC R :session Rorg  :results none
d <- read.csv("http://www.ats.ucla.edu/stat/data/hsb2.csv")
#+END_SRC
*** The length function
Many datasets are built into R for testing purposes, for a full list: 
#+BEGIN_SRC R :session Rorg  :results none
library(help="datasets")
#+END_SRC
This function returns the number of elements in a vector and is very useful for generalizing code
#+BEGIN_SRC R :session Rorg  :results none
length(islands) 
[1] 48 
#The vecor has 48 entries
#+END_SRC
*** Description of Dataset
Using dim, we get the number of observations (rows) and variables (columns) in d.

Using str, we get the structure of d, including the class(type) of all variables

#+BEGIN_SRC R :session Rorg  :results none
dim(d)
## [1] 200  11
str(d)
## 'data.frame':	200 obs. of  11 variables:
##  $ id     : int  70 121 86 141 172 113 50 11 84 48 ...
##  $ female : int  0 1 0 0 0 0 0 0 0 0 ...
##  $ race   : int  4 4 4 4 4 4 3 1 4 3 ...
##  $ ses    : int  1 2 3 3 2 2 2 2 2 2 ...
##  $ schtyp : int  1 1 1 1 1 1 1 1 1 1 ...
##  $ prog   : int  1 3 1 3 2 2 1 2 1 2 ...
##  $ read   : int  57 68 44 63 47 44 50 34 63 57 ...
##  $ write  : int  52 59 33 44 52 52 59 46 57 55 ...
##  $ math   : int  41 53 54 47 57 51 42 45 54 52 ...
##  $ science: int  47 63 58 53 53 63 53 39 58 50 ...
##  $ socst  : int  57 61 31 56 61 61 61 36 51 51 ...
#+END_SRC
*** Descriptive Stats
summary is a generic function to summarize many types of R objects, including datasets \\
When used on a dataset, summary returns distributional summaries of variables in the data\\

#+BEGIN_SRC R :session Rorg  :results none
summary(d)
##        id            female           race           ses      
##  Min.   :  1.0   Min.   :0.000   Min.   :1.00   Min.   :1.00  
##  1st Qu.: 50.8   1st Qu.:0.000   1st Qu.:3.00   1st Qu.:2.00  
##  Median :100.5   Median :1.000   Median :4.00   Median :2.00  
##  Mean   :100.5   Mean   :0.545   Mean   :3.43   Mean   :2.06  
##  3rd Qu.:150.2   3rd Qu.:1.000   3rd Qu.:4.00   3rd Qu.:3.00  
##  Max.   :200.0   Max.   :1.000   Max.   :4.00   Max.   :3.00  
##      schtyp          prog           read          write     
##  Min.   :1.00   Min.   :1.00   Min.   :28.0   Min.   :31.0  
##  1st Qu.:1.00   1st Qu.:2.00   1st Qu.:44.0   1st Qu.:45.8  
##  Median :1.00   Median :2.00   Median :50.0   Median :54.0  
##  Mean   :1.16   Mean   :2.02   Mean   :52.2   Mean   :52.8  
##  3rd Qu.:1.00   3rd Qu.:2.25   3rd Qu.:60.0   3rd Qu.:60.0  
##  Max.   :2.00   Max.   :3.00   Max.   :76.0   Max.   :67.0  

#+END_SRC
*** Conditional Summaries 1
If we want conditional summaries, for example only for those students with high reading scores (read >= 60), we first subset the data, then summarize as usual.

R permits nested function calls, where the results of one function are passed directly as an argument to another function. Here, subset returns a dataset containing observations where read >= 60. This data subset is then passed to summary to obtain distributions of the variables in the subset.
#+BEGIN_SRC R :session Rorg  :results none
summary(subset(d, read >= 60))
##        id            female           race          ses      
##  Min.   :  3.0   Min.   :0.000   Min.   :1.0   Min.   :1.00  
##  1st Qu.: 76.5   1st Qu.:0.000   1st Qu.:4.0   1st Qu.:2.00  
##  Median :108.5   Median :0.000   Median :4.0   Median :3.00  
##  Mean   :109.8   Mean   :0.482   Mean   :3.7   Mean   :2.38  
##  3rd Qu.:143.2   3rd Qu.:1.000   3rd Qu.:4.0   3rd Qu.:3.00  
##  Max.   :200.0   Max.   :1.000   Max.   :4.0   Max.   :3.00  
#+END_SRC
*** Descriptive statistics using Hmisc package 
you can get a more detailed view using the describe function in Hmisc

#+BEGIN_SRC R  :session Rorg  
library(Hmisc)
describe(d)
#+END_SRC

#+BEGIN_EXAMPLE
--------------------------------------------------------------------------------
prog 
      n missing  unique    Info    Mean 
    200       0       3    0.83   2.025 

1 (45, 22%), 2 (105, 52%), 3 (50, 25%) 
--------------------------------------------------------------------------------
read 
      n missing  unique    Info    Mean     .05     .10     .25     .50     .75 
    200       0      30    0.99   52.23    36.0    39.0    44.0    50.0    60.0 
    .90     .95 
   66.2    68.0 

lowest : 28 31 34 35 36, highest: 66 68 71 73 76 
--------------------------------------------------------------------------------
#+END_EXAMPLE

*** Histograms
Typically it is easier to inspect variable distributions with graphics. Histograms are often used for continuous variable distributions
#+BEGIN_SRC R :session Rorg  :results none
hist(d$write)
#+END_SRC

#+DOWNLOADED: /tmp/screenshot.png @ 2015-10-19 15:26:49
#+attr_html: :width 500px
 [[~/Sync/attach/images_2015/screenshot_2015-10-19_15-26-49.png]]
** more programming with R
*** Missing values (NA)
See below vector, the *NA* stands for missing value
#+BEGIN_SRC R  :session Rorg  :results none
humidity <- c(63.33, NA, 64.63, 68.38, NA, 79.1, 77.46)
#+END_SRC 
*** Missing values (NA)
Many functions do not handle missing values by default
#+BEGIN_SRC R :session Rorg  :results none
mean(humidity) 
#[1] NA 
mean(humidity, na.rm=T) 
#[1] 70.58
#+END_SRC
na.rm=T will remove NAs before calculating mean
*** Omit missing values
#+BEGIN_SRC R :session Rorg  :results none
na.omit(humidity) 
#[1] 63.33 64.63 68.38 79.10 77.46 
#+END_SRC

!is.na() is a slick way to handle missing values in vectors
#+BEGIN_SRC R :session Rorg  :results none
humidity[!is.na(humidity)] 
#[1] 63.33 64.63 68.38 79.10 77.46
#+END_SRC
*** NaN
NaN is usually the product of some arithmetic operation, such as 0/0 that isn't possible
NaN- Stands for Not a Number
NaN ≠ NA and there is a need for NaN and NA
*** cbind
cbind() function combines vector, matrix or data frame by* columns*.

#+BEGIN_SRC R :session Rorg  :results none
x <- data.frame(cbind(column1,column2))
#+END_SRC

*** rbind

rbind() function combines vector, matrix or data frame by *rows*.

#+BEGIN_SRC R :session Rorg  :results none
rbind(x1,x2,...)
x1,x2:vector, matrix, data frames
x3 <- rbind(DF1,DF2)
#+END_SRC



*** Boolean logic (T or F)
I carry an umbrella if it both rains and snows on the same day

I carry an umbrella whenever it rains or snows

I carry an umbrella for rain but never for snow

I never carry an umbrella for rain, only for snow

#+DOWNLOADED: /tmp/screenshot.png @ 2015-10-25 13:39:20
#+attr_html: :width 300px
[[~/org/attach/bgu/courses/BGU.R/images/screenshot_2015-10-25_13-39-20.png]]
*** boolean logic

#+DOWNLOADED: /tmp/screenshot.png @ 2015-10-25 13:45:33
#+attr_html: :width 300px
[[~/org/attach/bgu/courses/BGU.R/images/screenshot_2015-10-25_13-45-33.png]]
*** Boolean operators

&  and (element wise)
| or (element wise) |
!  not
<  less than
>  greater than
<= less than or equal to
>= greater than or equal to
== equal to
!= not equal to
*** Boolean examples: single value
#+BEGIN_SRC R :session Rorg  :results none
x <- 3 
x == 3 
#[1] TRUE 
x < 10 
#[1] TRUE 
x < -1 
#[1] FALSE 
 x > 0 & x < 10 #Combine multiple conditions with AND (&) or OR (|)
#[1] TRUE
#+END_SRC
*** Boolean examples: vector of values
#+BEGIN_SRC R :session Rorg  :results none
> x <- 1:5 #Now x is a vector of values
 
x == 3 
#[1] FALSE FALSE TRUE FALSE FALSE 
 x < 10 
#[1] TRUE TRUE TRUE TRUE TRUE 
 x > 2 & x <= 4 
#[1] FALSE FALSE TRUE TRUE FALSE 
 x != 2 
#[1] TRUE FALSE TRUE TRUE TRUE
#+END_SRC
*** Umbrella logic
#+BEGIN_SRC R :session Rorg  :results none
day <- c("Sun","Mon","Tues","Wed","Thurs","Fri","Sat") 
rain <- c("Yes","Yes","Yes","Yes","Yes","Yes","No") 
snow <- c("No", "No", "No", "Yes", "No", "No", "No") 
rain == "Yes" 
#[1] TRUE TRUE TRUE TRUE TRUE TRUE FALSE 
  rain != "No" 
#[1] TRUE TRUE TRUE TRUE TRUE TRUE FALSE 
  snow == "Yes" 
#[1] FALSE FALSE FALSE TRUE FALSE FALSE FALSE
  rain=="Yes" & snow=="Yes" 
#[1] FALSE FALSE FALSE TRUE FALSE FALSE FALSE 
  rain=="Yes" | snow=="Yes" 
#[1] TRUE TRUE TRUE TRUE TRUE TRUE FALSE
#+END_SRC
*** Umbrella logic
#+BEGIN_SRC R :session Rorg  :results none
#Vectors can be subsetted according to logic
day[rain=="Yes"] 
#[1] "Sun" "Mon" "Tues" "Wed" "Thurs" "Fri" 
 day[snow=="Yes"] 
#[1] "Wed" 

#I always carry an umbrella if it rains and snows
 day[rain=="Yes" & snow=="Yes"] 
#[1] "Wed" 

#I always carry an umbrella if it rains or snows
day[rain=="Yes" | snow=="Yes"] 
#[1] "Sun" "Mon" "Tues" "Wed" "Thurs" "Fri" 
#+END_SRC
*** TRUE and FALSE
Pro tip: In R, F is equivalent to FALSE and T is equivalent to TRUE. Most code uses T and F. 
TRUE == T == 1 and FALSE == F == 0 (long-standing programming convention)
#+BEGIN_SRC R :session Rorg  :results none

rain <- c("Yes","Yes","Yes", "Yes","Yes","Yes","No") 

#How many days did it rain this week? 
sum(rain=="Yes") 
#[1] 6 

#Internal representation of TRUE and FALSE
as.numeric(rain=="Yes") 
#[1] 1 1 1 1 1 1 0
#+END_SRC
*** Other Boolean operators
#+BEGIN_SRC R :session Rorg  :results none
 rain <- c("Yes","Yes","Yes","Yes","Yes","Yes","No") 
#Which elements are TRUE?
  which(rain=="Yes") 
#[1] 1 2 3 4 5 6
#Are any elements true?
  any(rain=="Yes") 
#[1] TRUE
#Are all elements true?
  all(rain=="Yes") 
#[1] FALSE
#+END_SRC
* Homework-Week 2
** Little arithmetics with R
run some of the following lines and Type 2^5 in the editor to calculate 2 to the power 5 (#Exponentiation).
#+BEGIN_SRC R :session Rorg  :results none
# An addition
5 + 5 

# A subtraction
5 - 5 

# A multiplication
3 * 5

 # A division
(5 + 5)/2 

# Exponentiation
#+END_SRC

** power and root
Use R to calculate the following and write down the answers
#+BEGIN_EXAMPLE
1+2*(3+4)
log(4^3+3^(2+1))
sqrt((4+3)*(2+1))
((1+2)/(3+4))^2
#+END_EXAMPLE
** create a vector
Assign the value "Here we go!" to the variable Vegas

#+BEGIN_SRC R
Vegas<-
#+END_SRC
*** Answer							   :noexport:

#+BEGIN_SRC R :session Rorg  :results none
# Define the variable 'Vegas'
Vegas<-"Here we go!"
#+END_SRC

** Create a vector (2)

In R, you create a vector with the combine function c(). You place the vector elements separated by a comma between the brackets. For example:

#+BEGIN_SRC R :session Rorg  :results none
numeric_vector <- c(1, 2, 3)
character_vector <- c("a", "b", "c")
boolean_vector <- c(TRUE, FALSE)
#+END_SRC

Once you have created these vectors above in R, you can use them to do calculations.

Complete the code such that boolean_vector contains the three elements: TRUE, FALSE and TRUE (in that order).

#+BEGIN_SRC R :session Rorg  :results none
numeric_vector <- c(1, 10, 49)
character_vector <- c("a", "b", "c")
# Complete the code for 'boolean_vector'
boolean_vector <-
#+END_SRC

*** Answer							   :noexport:
#+BEGIN_SRC R :session Rorg  :results none
numeric_vector <- c(1, 10, 49)
character_vector <- c("a", "b", "c")
# Complete the code for 'boolean_vector'
boolean_vector <- c(TRUE,FALSE,TRUE)
#+END_SRC

** Create a vector (3)
After one week in Las Vegas and still zero Ferraris in your garage, you decide that it is time to start using your data analytical superpowers.

Before doing a first analysis, you decide to first collect all the winnings and losses for the last week (*Note* the lost and won values):

#+BEGIN_SRC sh
#For poker_vector:
On Monday you won 140$
Tuesday you lost 50$
Wednesday you won 20$
Thursday you lost 120$
Friday you won 240$

#For roulette_vector:
On Monday you lost 24$
Tuesday you lost 50$
Wednesday you won 100$
Thursday you lost 350$
Friday you won 10$
#+END_SRC

To be able to use this data in R, you decide to create the variables poker_vector and roulette_vector.

Instructions: Assign the winnings/losses for roulette to the variable roulette_vector.

#+BEGIN_SRC R :session Rorg  :results none
# Poker winnings from Monday to Friday
poker_vector <- c(140, -50, 20, -120, 240)

# Roulette winnings from Monday to Friday
roulette_vector <-  
#+END_SRC

*** Answer							   :noexport:
#+BEGIN_SRC R :session Rorg  :results none
# Poker winnings from Monday to Friday
poker_vector <- c(140, -50, 20, -120, 240)

# Roulette winnings from Monday to Friday
roulette_vector <-  c(-24,-50,100,-350,10)
#+END_SRC

** creating vectors
Create vectors using seq() and rep(). Only use c() if absolutely necessary
#+BEGIN_EXAMPLE
Positive integers from 1 to 99
Odd integers between 1 and 99
The numbers 1,1,1, 2,2,2, 3,3,3
The numbers 1,2,3,4,5,4,3,2,1,0
#+END_EXAMPLE

** naming a vector 

In the previous exercise, we created a vector with your winnings over the week. 
Each vector element refers to a day of the week but it is hard to tell which element belongs to which day.

It would be nice if you could show that in the vector itself.

You can give a name to the elements of a vector with the names() function. Have a look at this example:

#+BEGIN_SRC R :session Rorg  :results none
some_vector <- c("Johnny", "Poker Player")
names(some_vector) <- c("Name", "Profession")
#+END_SRC

This code first creates a vector some_vector and then gives the two elements a name. 

The first element is assigned the name Name, while the second element is labeled Profession. 

Printing the contents to the console yields following output:

*some_vector*

Instructions: Go ahead and assign the days of the week as names to poker_vector and roulette_vector. In case you are not sure, the days of the week are: Monday, Tuesday, Wednesday, Thursday and Friday.

#+BEGIN_SRC R :session Rorg  :results none
# Poker winnings from Monday to Friday
poker_vector <- c(140, -50, 20, -120, 240)

# Roulette winnings from Monday to Friday
roulette_vector <- c(-24, -50, 100, -350, 10)

# Add your code here

#+END_SRC
*** Answer							   :noexport:
#+BEGIN_SRC R :session Rorg  :results none
# Poker winnings from Monday to Friday
poker_vector <- c(140, -50, 20, -120, 240)

# Roulette winnings from Monday to Friday
roulette_vector <- c(-24, -50, 100, -350, 10)

# Add your code here
names(poker_vector) <- c("Monday", "Tuesday", "Wednesday", "Thursday" , "Friday")
names(roulette_vector) <- c("Monday", "Tuesday", "Wednesday", "Thursday" , "Friday")
#+END_SRC






** Naming a vector (2)

if you want to become a good statistician, you have to become lazy. (If you are already lazy, chances are high you are one of those exceptional, natural-born statistical talents.)

In the previous exercises you probably experienced that it is boring and frustrating to type and retype information such as the days of the week. 

However, when you look at it from a higher perspective, there is a more efficient way to do this, namely, to assign the days of the week vector to a variable!

Just like you did with your poker and roulette returns, you can also create a variable that contains the days of the week. This way you can use and re-use it.

Instructions: Create a variable days_vector that contains the days of the week, from Monday to Friday.

Use that variable days_vector to set the names of poker_vector and roulette_vector.

#+BEGIN_SRC R :session Rorg  :results none
# Poker winnings from Monday to Friday
poker_vector <- c(140, -50, 20, -120, 240)

# Roulette winnings from Monday to Friday
roulette_vector <- c(-24, -50, 100, -350, 10)

# Create the variable 'days_vector'
days_vector <- 
 
#Assign the names of the day to 'roulette_vector' and 'poker_vector'
names(poker_vector) <-   
names(roulette_vector) <-
#+END_SRC
*** Answer							   :noexport:
#+BEGIN_SRC R :session Rorg  :results none
# Poker winnings from Monday to Friday
poker_vector <- c(140, -50, 20, -120, 240)

# Roulette winnings from Monday to Friday
roulette_vector <- c(-24, -50, 100, -350, 10)

# Create the variable 'days_vector'
days_vector <- c("Monday", "Tuesday", "Wednesday", "Thursday" , "Friday")

 
#Assign the names of the day to 'roulette_vector' and 'poker_vector'
names(poker_vector) <-   days_vector
names(roulette_vector) <- days_vector
#+END_SRC
** Calculating total winnings			
Now that you have the poker and roulette winnings nicely as a named vector, you can start doing some data analytical magic.

You want to find out the following type of information:

How much has been your overall profit or loss per day of the week?

Have you lost money over the week in total?

Are you winning/losing money on poker or on roulette?

To get the answers, you have to do arithmetic calculations on vectors.

It is important to know is that if you sum two vectors in R, it takes the element-wise sum. For example, the following three statements are completely equivalent:

#+BEGIN_SRC R :session Rorg  :results none
c(1, 2, 3) + c(4, 5, 6)
c(1 + 4, 2 + 5, 3 + 6)
c(5, 7, 9)

#+END_SRC
Let us try this first!
Instructions: Take the sum of the variables A_vector and B_vector and it assign to total_vector.

Inspect the result by printing total_vector to the console:

#+BEGIN_SRC R :session Rorg  :results none
A_vector <- c(1, 2, 3)
B_vector <- c(4, 5, 6)

# Take the sum of 'A_vector' and 'B_vector'
total_vector <-  
  
# Print 'total_vector' to the console
total_vector
#+END_SRC
*** Answer							   :noexport:
#+BEGIN_SRC R :session Rorg  :results none
A_vector <- c(1, 2, 3)
B_vector <- c(4, 5, 6)

# Take the sum of 'A_vector' and 'B_vector'
total_vector <- A_vector+B_vector
  
# Print 'total_vector' to the console
total_vector
#+END_SRC
** Calculating total winnings (2)
It is time to get those Ferraris in your garage! 

First, you need to understand what the overall profit or loss per day of the week was. 

The total daily profit is the sum of the profit/loss you realized on poker per day, and the profit/loss you realized on roulette per day.

In R, this is just the sum of roulette_vector and poker_vector.

Instructions: Assign to the variable total_daily how much you won or lost on each day in total (poker and roulette combined).
#+BEGIN_SRC R :session Rorg  :results none
# Poker winnings from Monday to Friday:
poker_vector <- c(140, -50, 20, -120, 240)

# Roulette winnings from Monday to Friday:
roulette_vector <- c(-24, -50, 100, -350, 10)

# Give names to both 'poker_vector' and 'roulette_vector'
days_vector <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
names(poker_vector) <- days_vector
names(roulette_vector) <- days_vector

# Up to you now:
total_daily <-
#+END_SRC
*** Answer							   :noexport:
#+BEGIN_SRC R :session Rorg  :results none
# Poker winnings from Monday to Friday:
poker_vector <- c(140, -50, 20, -120, 240)

# Roulette winnings from Monday to Friday:
roulette_vector <- c(-24, -50, 100, -350, 10)

# Give names to both 'poker_vector' and 'roulette_vector'
days_vector <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
names(poker_vector) <- days_vector
names(roulette_vector) <- days_vector

# Up to you now:
total_daily <- roulette_vector+poker_vector
#+END_SRC
** Calculating total winnings (3)

Based on the previous analysis, it looks like you had a mix of good and bad days. 

This is not what your ego expected, and you wonder if there may be a (very very very) tiny chance you have lost money over the week in total?

A function that helps you to answer this question is sum(). It calculates the sum of all elements of a vector. For example, to calculate the total amount of 

money you have lost/won with poker you do:

total_poker <- sum(poker_vector)

Instructions: Calculate the total amount of money that you have won/lost with roulette and assign to the variable total_roulette.
Now that you have the totals for roulette and poker, you can easily calculate total_week (which is the sum of all gains and losses of the week).
#+BEGIN_SRC R :session Rorg  :results none
# Poker winnings from Monday to Friday
poker_vector <- c(140, -50, 20, -120, 240)

# Roulette winnings from Monday to Friday
roulette_vector <- c(-24, -50, 100, -350, 10)

# Give names to both 'poker_vector' and 'roulette_vector'
days_vector <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
names(roulette_vector) <- days_vector
names(poker_vector) <- days_vector

# Total winnings with poker
total_poker <- sum(poker_vector)

# Up to you now:
total_roulette <-
total_week <- 
#+END_SRC
*** Answer							   :noexport:
#+BEGIN_SRC R :session Rorg  :results none
# Poker winnings from Monday to Friday
poker_vector <- c(140, -50, 20, -120, 240)

# Roulette winnings from Monday to Friday
roulette_vector <- c(-24, -50, 100, -350, 10)

# Give names to both 'poker_vector' and 'roulette_vector'
days_vector <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
names(roulette_vector) <- days_vector
names(poker_vector) <- days_vector

# Total winnings with poker
total_poker <- sum(poker_vector)

# Up to you now:
total_roulette <-sum(roulette_vector)

total_week <- total_roulette +total_poker
#+END_SRC
** Compare results
Oops, it seems like you are losing money. Time to rethink and adapt your strategy! This will require some deeper analysis…

After a short brainstorm in your hotel's jacuzzi, you realize that a possible explanation might be that your skills in roulette are not as well developed as your skills in poker. So maybe your total gains in poker are higher (or > ) than in roulette.

Instructions Calculate total_poker and total_roulette as in the previous exercise.

Check if your total gains in poker are higher than for roulette by using a comparison. Assign the result of this comparison to the variable answer. What do you conclude, should you focus on roulette or on poker?

#+BEGIN_SRC R :session Rorg  :results none
# Poker winnings from Monday to Friday
poker_vector <- c(140, -50, 20, -120, 240)

# Roulette winnings from Monday to Friday
roulette_vector <- c(-24, -50, 100, -350, 10)

# Give names to both 'poker_vector' and 'roulette_vector'
days_vector <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
names(roulette_vector) <- days_vector
names(poker_vector) <- days_vector

# Total winnings with poker
total_poker <- 
# Up to you now:
total_roulette <-


# Check if you realized higher total gains in poker than in roulette 
answer <-
#+END_SRC

*** Answer							   :noexport:
#+BEGIN_SRC R :session Rorg  :results none
# Poker winnings from Monday to Friday
poker_vector <- c(140, -50, 20, -120, 240)

# Roulette winnings from Monday to Friday
roulette_vector <- c(-24, -50, 100, -350, 10)

# Give names to both 'poker_vector' and 'roulette_vector'
days_vector <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
names(roulette_vector) <- days_vector
names(poker_vector) <- days_vector

# Total winnings with poker
total_poker <- sum(poker_vector)
# Up to you now:
total_roulette <-sum(roulette_vector)


# Check if you realized higher total gains in poker than in roulette 
answer <- total_poker > total_roulette
#+END_SRC
** Vector selection (1)
Your hunch seemed to be right. It appears that the poker game is more your cup of tea than roulette.

Another possible route for investigation is your performance at the beginning of the working week compared to the end of it. 

You did have a couple of Margarita cocktails at the end of the week…

To answer that question, you only want to focus on a selection of the total_vector. In other words, our goal is to select specific elements of the vector. 
To select elements of a vector (and later matrices, data frames, …), you can use square brackets. Between the square brackets, you indicate what elements to select. 

For example, to select the first element of the vector, you type poker_vector. To select the second element of the vector, you type poker_vector[2], etc.

Instructions: Assign the poker results of Wednesday to the variable poker_wednesday.
#+BEGIN_SRC R :session Rorg  :results none
# Poker winnings from Monday to Friday
poker_vector <- c(140, -50, 20, -120, 240)

# Roulette winnings from Monday to Friday
roulette_vector <- c(-24, -50, 100, -350, 10)

# Give names to both 'poker_vector' and 'roulette_vector'
days_vector <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
names(roulette_vector) <- days_vector
names(poker_vector) <- days_vector

# Define a new variable based on a selection
poker_wednesday <- 
#+END_SRC
*** Answer							   :noexport:
#+BEGIN_SRC R :session Rorg  :results none
# Poker winnings from Monday to Friday
poker_vector <- c(140, -50, 20, -120, 240)

# Roulette winnings from Monday to Friday
roulette_vector <- c(-24, -50, 100, -350, 10)

# Give names to both 'poker_vector' and 'roulette_vector'
days_vector <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
names(roulette_vector) <- days_vector
names(poker_vector) <- days_vector

# Define a new variable based on a selection
poker_wednesday <- poker_vector[3]
#+END_SRC


** Vector selection (2)
Selecting multiple elements of poker_vector with c(2,3,4) is not very convenient.
Many statisticians are lazy people by nature, so they created an easier way to do this:

c(2,3,4) can be abbreviated to 2:4, which generates a vector with all natural numbers from 2 up to 4.

So, another way to find the mid-week results is poker_vector[2:4]. Notice how the vector 2:4 is placed between the square brackets to select element 2 up to 4.

Instructions: Assign the results to roulette_selection_vector the results from Tuesday up to Friday by making use of :.

#+BEGIN_SRC R :session Rorg  :results none
# Poker winnings from Monday to Friday
poker_vector <- c(140, -50, 20, -120, 240)

# Roulette winnings from Monday to Friday
roulette_vector <- c(-24, -50, 100, -350, 10)

# Give names to both 'poker_vector' and 'roulette_vector'
days_vector <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
names(roulette_vector) <- days_vector
names(poker_vector) <- days_vector

# Define a new variable based on a selection
roulette_selection_vector <- 
#+END_SRC
*** Answer							   :noexport:
#+BEGIN_SRC R :session Rorg  :results none
# Poker winnings from Monday to Friday
poker_vector <- c(140, -50, 20, -120, 240)

# Roulette winnings from Monday to Friday
roulette_vector <- c(-24, -50, 100, -350, 10)

# Give names to both 'poker_vector' and 'roulette_vector'
days_vector <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
names(roulette_vector) <- days_vector
names(poker_vector) <- days_vector

# Define a new variable based on a selection
roulette_selection_vector <- roulette_vector[c(2:5)]
#+END_SRC
