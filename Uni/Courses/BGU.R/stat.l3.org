# -*- mode: Org; org-download-image-dir: "/home/zeltak/org/attach/bgu/courses/BGU.R/images"; org-download-heading-lvl: nil; -*-
#+Title:שיטות כמותיות למתקדמים
#+Author: ד"ר איתי קלוג 
#+Email: ikloog@bgu.ac.il
#+REVEAL_TITLE_SLIDE_BACKGROUND: /home/zeltak/org/attach/bgu/courses/BGU.R/images/stat_large.jpg

#+OPTIONS: reveal_center:t reveal_progress:t reveal_history:nil reveal_control:t
# #+OPTIONS: reveal_center:t 
#+OPTIONS: reveal_rolling_links:t reveal_keyboard:t reveal_overview:t num:nil
#+OPTIONS: reveal_width:1200 reveal_height:800
#+OPTIONS: toc:nil
# #+REVEAL: split
#+REVEAL_MARGIN: 0.1
#+REVEAL_MIN_SCALE: 0.5
#+REVEAL_MAX_SCALE: 2.5
#+REVEAL_TRANS: linear
#+REVEAL_SPEED: default
#+REVEAL_THEME: white
#+REVEAL_HLEVEL: 2
#+REVEAL_HEAD_PREAMBLE: <meta name="description" content="Org-Reveal Introduction.">
#+REVEAL_POSTAMBLE: <p> Created by itai Kloog. </p>
# REVEAL_PLUGINS: (highlight markdown notes)
#+REVEAL_EXTRA_CSS: ./local.css
#+REVEAL_SLIDE_NUMBER: t
#+OPTIONS: ^:nil
#+EXCLUDE_TAGS: noexport
#+TAGS: noexport(n)

* Week 3
** Exploring Data
  :PROPERTIES:
	  :reveal_background: /home/zeltak/org/attach/bgu/courses/BGU.R/images/hist_BD.jpg
	  :END:
*** Exploring Data
Now we're going to read some data in and store it in the object d.

We prefer short names for objects that we will use frequently.

We can now easily explore and get to know these data, which contain a number of school, test, and demographic variables for 200 students.

#+BEGIN_SRC R :session Rorg  :results none
d <- read.csv("http://www.ats.ucla.edu/stat/data/hsb2.csv")
#+END_SRC
*** The length function
Many datasets are built into R for testing purposes, for a full list: 
#+BEGIN_SRC R :session Rorg  :results none
library(help="datasets")
#+END_SRC
This *length* function returns the number of elements in a vector and is very useful for generalizing code
#+BEGIN_SRC R :session Rorg  :results none
length(islands) 
#[1] 48 
#The vecor has 48 entries
#+END_SRC
*** Description of Dataset
Using *dim*, we get the number of observations (rows) and variables (columns) in d.

Using *str*, we get the structure of d, including the class(type) of all variables

#+BEGIN_SRC R :session Rorg  :results none
dim(d)
## [1] 200  11
str(d)
## 'data.frame':	200 obs. of  11 variables:
##  $ id     : int  70 121 86 141 172 113 50 11 84 48 ...
##  $ female : int  0 1 0 0 0 0 0 0 0 0 ...
##  $ race   : int  4 4 4 4 4 4 3 1 4 3 ...
##  $ ses    : int  1 2 3 3 2 2 2 2 2 2 ...
##  $ schtyp : int  1 1 1 1 1 1 1 1 1 1 ...
##  $ prog   : int  1 3 1 3 2 2 1 2 1 2 ...
##  $ read   : int  57 68 44 63 47 44 50 34 63 57 ...
##  $ write  : int  52 59 33 44 52 52 59 46 57 55 ...
##  $ math   : int  41 53 54 47 57 51 42 45 54 52 ...
##  $ science: int  47 63 58 53 53 63 53 39 58 50 ...
##  $ socst  : int  57 61 31 56 61 61 61 36 51 51 ...
#+END_SRC
*** Conditional Summaries 1
If we want conditional summaries, for example only for those students with high reading scores (read >= 60), we first subset the data, then summarize as usual.

R permits nested function calls, where the results of one function are passed directly as an argument to another function. Here, subset returns a dataset containing observations where read >= 60. This data subset is then passed to summary to obtain distributions of the variables in the subset.
#+BEGIN_SRC R :session Rorg  :results none
summary(subset(d, read >= 60))
##        id            female           race          ses      
##  Min.   :  3.0   Min.   :0.000   Min.   :1.0   Min.   :1.00  
##  1st Qu.: 76.5   1st Qu.:0.000   1st Qu.:4.0   1st Qu.:2.00  
##  Median :108.5   Median :0.000   Median :4.0   Median :3.00  
##  Mean   :109.8   Mean   :0.482   Mean   :3.7   Mean   :2.38  
##  3rd Qu.:143.2   3rd Qu.:1.000   3rd Qu.:4.0   3rd Qu.:3.00  
##  Max.   :200.0   Max.   :1.000   Max.   :4.0   Max.   :3.00  
#+END_SRC
*** Histograms
Typically it is easier to inspect variable distributions with graphics. Histograms are often used for continuous variable distributions
#+BEGIN_SRC R :session Rorg  :results none
hist(d$write)
#+END_SRC

#+DOWNLOADED: /tmp/screenshot.png @ 2015-10-19 15:26:49
#+attr_html: :width 500px
 [[~/Sync/attach/images_2015/screenshot_2015-10-19_15-26-49.png]]
*** Missing values (NA)
See below vector, the *NA* stands for missing value
#+BEGIN_SRC R  :session Rorg  :results none
humidity <- c(63.33, NA, 64.63, 68.38, NA, 79.1, 77.46)
#+END_SRC 
*** Missing values (NA)
Many functions do not handle missing values by default
#+BEGIN_SRC R :session Rorg  :results none
mean(humidity) 
#[1] NA 
mean(humidity, na.rm=T) 
#[1] 70.58
#+END_SRC
na.rm=T will remove NAs before calculating mean
*** Omit missing values
#+BEGIN_SRC R :session Rorg  :results none
na.omit(humidity) 
#[1] 63.33 64.63 68.38 79.10 77.46 
#+END_SRC

*NOTE:Carefull this could wipe out all DB..each cases with even 1 missing variable data will be wiped!!)*

to use it with a specific variable

#+BEGIN_SRC R :session Rorg  :results none
newdata = na.omit(data_10$predicted)
#+END_SRC

!is.na() is a slick way to handle missing values in vectors
#+BEGIN_SRC R :session Rorg  :results none
humidity[!is.na(humidity)] 
#[1] 63.33 64.63 68.38 79.10 77.46
#+END_SRC

*** NaN
NaN is usually the product of some arithmetic operation, such as 0/0 that isn't possible
NaN- Stands for Not a Number
NaN ≠ NA and there is a need for NaN and NA
*** cbind
cbind() function combines vector, matrix or data frame by* columns*.

#+BEGIN_SRC R :session Rorg  :results none
x <- data.frame(cbind(column1,column2))
#+END_SRC

*** rbind

rbind() function combines vector, matrix or data frame by *rows*.

#+BEGIN_SRC R :session Rorg  :results none
rbind(x1,x2,...)
x1,x2:vector, matrix, data frames
x3 <- rbind(DF1,DF2)
#+END_SRC
*** attach and detach
The attach() function in R can be used to make objects within dataframes accessible in R with fewer keystrokes.

As an example:

#+begin_src R
ds = read.csv("http://www.math.smith.edu/r/data/help.csv")
names(ds)
attach(ds)
mean(ds)
#[1] 32.84768
detach(ds)
#+end_src
*** launching a script
you may either use from within R or

#+BEGIN_EXAMPLE
source("/home/jim/psych/adoldrug/partyuse1.R")
#+END_EXAMPLE

or on the system command line

#+BEGIN_EXAMPLE
R CMD BATCH /home/jim/psych/adoldrug/partyuse1.R
#+END_EXAMPLE
S*** Check current memory (gc)
use the garbage collection option
#+begin_src R
gc()
#to get more details
gc(verbose=T)
#+end_src


*** row means/sums
#+BEGIN_EXAMPLE
colSums (x, na.rm = FALSE, dims = 1)
rowSums (x, na.rm = FALSE, dims = 1)
colMeans(x, na.rm = FALSE, dims = 1)
rowMeans(x, na.rm = FALSE, dims = 1)
rowMeans(x, na.rm = TRUE)
#+END_EXAMPLE

example:

#+BEGIN_SRC R :session Rorg  :results none
cvtable$mean<- rowMeans(cvtable[,2:10])
#+END_SRC
*** row/column Missing data
#+BEGIN_SRC R :session Rorg  :results none
rowSums(is.na(mydata)) # Number of missing per row
colSums(is.na(mydata)) # Number of missing per column/variable
#+END_SRC
*** Delete rows
use this:

#+BEGIN_SRC R :session Rorg  :results none
x <- x[-n,]
#+END_SRC

where n is the row (case) number

#+BEGIN_SRC R :session Rorg  :results none
zinc <- zinc[-771,]
#+END_SRC


*** Excluding (DROPPING-deleting) Variables
1.Excluding single Variable

#+BEGIN_SRC R :session Rorg  :results none
#+BEGIN_SRC sh
dataframe$VAR <- NULL 
#+END_SRC

*** workspace/object deletions
Delete temporary objects and objects that are no longer needed:

#+BEGIN_SRC R :session Rorg  :results none
rm(list=ls())
#+END_SRC
will remove all objects from memory, providing a clean slate.

Specific objects can be removed with
#+BEGIN_SRC R :session Rorg  :results none
rm(object)
#+END_SRC

*** sorting with sort command
Sorting Data

To sort a dataframe in R, use the order( ) function. By default, sorting is ASCENDING.

add a minus sign to indicate DESCENDING order

Here are some examples:

#+BEGIN_SRC R :session Rorg  :results none
# sort by mpg
newdata <- mtcars[order(mpg),]
# sort by mpg and cyl
newdata <- mtcars[order(mpg, cyl),]
#sort by mpg (ascending) and cyl (descending)
newdata <- mtcars[order(mpg, -cyl),]
#+END_SRC

** Descriptive Statistics
*** What are Descriptive statistics
*Numerical*:

Location: Mean, median, mode

Spread: Standard deviation, variance, range, quantiles, IQR

Correlation

*Graphical*:

Histograms, bar charts,dot charts, boxplots,scatter plots, etc.

Good descriptive statistics leads to good decision making
*** Summary
The summary() function provides the minimum, maximum, quartiles, and the mean for numerical variables and frequencies for factors and logical vectors:

 #+BEGIN_SRC R :session Rorg  :results none
 # mean,median,25th and 75th quartiles,min,max
 summary(mydata)
 #+END_SRC
*** Summary
summary is a generic function to summarize many types of R objects, including datasets \\
When used on a dataset, summary returns distributional summaries of variables in the data\\

#+BEGIN_SRC R :session Rorg  :results none
summary(d)
##        id            female           race           ses      
##  Min.   :  1.0   Min.   :0.000   Min.   :1.00   Min.   :1.00  
##  1st Qu.: 50.8   1st Qu.:0.000   1st Qu.:3.00   1st Qu.:2.00  
##  Median :100.5   Median :1.000   Median :4.00   Median :2.00  
##  Mean   :100.5   Mean   :0.545   Mean   :3.43   Mean   :2.06  
##  3rd Qu.:150.2   3rd Qu.:1.000   3rd Qu.:4.00   3rd Qu.:3.00  
##  Max.   :200.0   Max.   :1.000   Max.   :4.00   Max.   :3.00  
##      schtyp          prog           read          write     
##  Min.   :1.00   Min.   :1.00   Min.   :28.0   Min.   :31.0  
##  1st Qu.:1.00   1st Qu.:2.00   1st Qu.:44.0   1st Qu.:45.8  
##  Median :1.00   Median :2.00   Median :50.0   Median :54.0  
##  Mean   :1.16   Mean   :2.02   Mean   :52.2   Mean   :52.8  
##  3rd Qu.:1.00   3rd Qu.:2.25   3rd Qu.:60.0   3rd Qu.:60.0  
##  Max.   :2.00   Max.   :3.00   Max.   :76.0   Max.   :67.0  

#+END_SRC

*** fivenum
The function fivenum() returns Tukey's five-number summary (minimum, lower-hinge, median, upper-hinge, and maximum). 
 #+BEGIN_SRC R :session Rorg  :results none
 # Tukey min,lower-hinge, median,upper-hinge,max
 fivenum(x)
 #+END_SRC
*** summary subseted
 #+BEGIN_SRC R :session Rorg  :results none
summary(data$var[data$var == 1995])
 #+END_SRC
*** Quantiles and Percentiles
Percentiles: For data, the pth percentile ,0<= p <= 100 , is the value of x such that p% of the data is less than or equal to x

Quantiles same as percentiles except for scale:

Percentiles are on a 0 to 100 scale

Quantiles are on a 0 to 1 scale
*** get basic IQR of variable
Special percentiles:

Minimum: 0th percentile (or 0 quantile)

Median: 50th percentile (or 0.5 quantile)

Maximum: 100th percentile (or 1.0 quantile)

Quartiles: 25th and 75th percentiles

Interquartile Range (IQR): IQR = 75th percentile - 25th percentile

issue the internal *IQR* command:
IE:

#+BEGIN_SRC R :session Rorg  :results none
IQR(DATA$VARIABLE)
#+END_SRC

*** Descriptive statistics using Hmisc package 
you can get a more detailed view using the describe function in Hmisc
The describe() function in the Hmisc package returns the number of variables and observations, the number of missing and unique values, the mean, quantiles, and the five highest and lowest values.

#+BEGIN_SRC R  :session Rorg  
library(Hmisc)
describe(d)
#+END_SRC

#+BEGIN_EXAMPLE
--------------------------------------------------------------------------------
prog 
      n missing  unique    Info    Mean 
    200       0       3    0.83   2.025 

1 (45, 22%), 2 (105, 52%), 3 (50, 25%) 
--------------------------------------------------------------------------------
read 
      n missing  unique    Info    Mean     .05     .10     .25     .50     .75 
    200       0      30    0.99   52.23    36.0    39.0    44.0    50.0    60.0 
    .90     .95 
   66.2    68.0 

lowest : 28 31 34 35 36, highest: 66 68 71 73 76 
--------------------------------------------------------------------------------
#+END_EXAMPLE


*** Describe limit digits in output 
use the dig=switch
 #+BEGIN_SRC R
describe(bda$sga,dig=2)
 #+END_SRC
*** Describe only a subset of the data
 #+BEGIN_SRC R
describe(bd$birthw[bd$mrn.n == 4])
 #+END_SRC
*** Get percents in dichotomous variable (0,1)
 #+BEGIN_SRC R
#$Note$ that you may need to manually run is at a factor to make hmisc know its not continous
Hmisc::describe(as.factor(bd$lungd))
 #+END_SRC
results:
 #+BEGIN_EXAMPLE
 as.factor(bd$lungd) 
       n missing  unique 
  452316    1342       2 

 0 (437753, 97%), 1 (14563, 3%) 
 #+END_EXAMPLE

*** exclude missing
 #+BEGIN_SRC R
exclude.missing=TRUE
 #+END_SRC

*** pastecs
gives the following:

 #+BEGIN_EXAMPLE
 # nbr.val, nbr.null, nbr.na, min max, range, sum,
 # median, mean, SE.mean, CI.mean, var, std.dev, coef.var 
 #+END_EXAMPLE

 example:
 using *stat.desc*

 #+BEGIN_SRC R
 stat.desc(bd$ta270)
           nbr.val          nbr.null            nbr.na               min               max             range               sum            median 
  453658.000000000       0.000000000       0.000000000      -0.419630007       8.376250511       8.795880518 1844219.041496962       4.122560722 
              mean           SE.mean      CI.mean.0.95               var           std.dev          coef.var 
       4.065218825       0.001191507       0.002335318       0.644053584       0.802529491       0.197413602 
 
 #+END_SRC

*** psych package
# item name ,item number, nvalid, mean, sd,
# median, mad, min, max, skew, kurtosis, se

 #+BEGIN_SRC R
 library(psych)
 describe(bd$ta270)
   vars      n mean  sd median trimmed  mad   min  max range  skew kurtosis se
 1    1 453658 4.07 0.8   4.12    4.13 0.74 -0.42 8.38   8.8 -1.15     2.43  0
 #+END_SRC
*** Descriptive statistics by group (Doby package)
#+BEGIN_SRC R
library(doBy)
tden$count<-1
summaryBy(count~guid, data=tden, FUN=sum)
#+END_SRC
*** Count number of occurances per variable
 #+begin_src R
count(df,"VAR")
 #+end_src
** Boolean
*** Boolean logic (T or F)
I carry an umbrella if it both rains and snows on the same day\\
I carry an umbrella whenever it rains or snows\\
I carry an umbrella for rain but never for snow\\
I never carry an umbrella for rain, only for snow\\
#+DOWNLOADED: /tmp/screenshot.png @ 2015-10-25 13:39:20
#+attr_html: :width 200px
[[~/org/attach/bgu/courses/BGU.R/images/screenshot_2015-10-25_13-39-20.png]]
*** boolean logic

#+DOWNLOADED: /tmp/screenshot.png @ 2015-10-25 13:45:33
#+attr_html: :width 300px
[[~/org/attach/bgu/courses/BGU.R/images/screenshot_2015-10-25_13-45-33.png]]
*** Boolean operators
#+BEGIN_EXAMPLE
&  and (element wise)
| or (element wise)
!  not
<  less than
>  greater than
<= less than or equal to
>= greater than or equal to
== equal to
!= not equal to
#+END_EXAMPLE
*** Boolean examples: single value
#+BEGIN_SRC R :session Rorg  :results none
x <- 3 
x == 3 
#[1] TRUE 
x < 10 
#[1] TRUE 
x < -1 
#[1] FALSE 
x > 0 & x < 10 #Combine multiple conditions with AND (&) or OR (|)
#[1] TRUE
#+END_SRC
*** Boolean examples: vector of values
#+BEGIN_SRC R :session Rorg  :results none
> x <- 1:5 #Now x is a vector of values
 
x == 3 
#[1] FALSE FALSE TRUE FALSE FALSE 
x < 10 
#[1] TRUE TRUE TRUE TRUE TRUE 
x > 2 & x <= 4 
#[1] FALSE FALSE TRUE TRUE FALSE 
x != 2 
#[1] TRUE FALSE TRUE TRUE TRUE
#+END_SRC
*** Umbrella logic
#+BEGIN_SRC R :session Rorg  :results none
day <- c("Sun","Mon","Tues","Wed","Thurs","Fri","Sat") 
rain <- c("Yes","Yes","Yes","Yes","Yes","Yes","No") 
snow <- c("No", "No", "No", "Yes", "No", "No", "No") 
rain == "Yes" 
#[1] TRUE TRUE TRUE TRUE TRUE TRUE FALSE 
  rain != "No" 
#[1] TRUE TRUE TRUE TRUE TRUE TRUE FALSE 
  snow == "Yes" 
#[1] FALSE FALSE FALSE TRUE FALSE FALSE FALSE
  rain=="Yes" & snow=="Yes" 
#[1] FALSE FALSE FALSE TRUE FALSE FALSE FALSE 
  rain=="Yes" | snow=="Yes" 
#[1] TRUE TRUE TRUE TRUE TRUE TRUE FALSE
#+END_SRC
*** Umbrella logic
#+BEGIN_SRC R :session Rorg  :results none
#Vectors can be subsetted according to logic
day[rain=="Yes"] 
#[1] "Sun" "Mon" "Tues" "Wed" "Thurs" "Fri" 
 day[snow=="Yes"] 
#[1] "Wed" 

#I always carry an umbrella if it rains and snows
 day[rain=="Yes" & snow=="Yes"] 
#[1] "Wed" 

#I always carry an umbrella if it rains or snows
day[rain=="Yes" | snow=="Yes"] 
#[1] "Sun" "Mon" "Tues" "Wed" "Thurs" "Fri" 
#+END_SRC
*** TRUE and FALSE
Pro tip: In R, F is equivalent to FALSE and T is equivalent to TRUE. Most code uses T and F. 
TRUE == T == 1 and FALSE == F == 0 (long-standing programming convention)
#+BEGIN_SRC R :session Rorg  :results none

rain <- c("Yes","Yes","Yes", "Yes","Yes","Yes","No") 

#How many days did it rain this week? 
sum(rain=="Yes") 
#[1] 6 

#Internal representation of TRUE and FALSE
as.numeric(rain=="Yes") 
#[1] 1 1 1 1 1 1 0
#+END_SRC
*** Other Boolean operators
#+BEGIN_SRC R :session Rorg  :results none
 rain <- c("Yes","Yes","Yes","Yes","Yes","Yes","No") 
#Which elements are TRUE?
  which(rain=="Yes") 
#[1] 1 2 3 4 5 6
#Are any elements true?
  any(rain=="Yes") 
#[1] TRUE
#Are all elements true?
  all(rain=="Yes") 
#[1] FALSE
#+END_SRC

** Dates
*** Basic

Dates are typically entered into R as character strings and then translated into date variables that *are stored numerically*. 

The function *as.Date()* is used to make this translation.

The syntax is *as.Date(X, "input_format")* 

The *default format* for inputting dates is yyyy-mm-dd. 

mydates <- as.Date(c("2007-06-22", "2004-02-13"))

converts the character data to dates using this default format.

*** convert from SAS/excel/other date into R date

#+begin_src r
mod1$day <- as.Date(strptime(mod1$DATE, "%m/%d/%y"))
#+end_src

*** advanced date variable table

#+BEGIN_EXAMPLE
 %a, %A Abbreviated and full weekday name.
 %b, %B Abbreviated and full month name.
 %d Day of the month (01---31).
 %H Hours (00---23).
 %I Hours (01---12).
 %j Day of year (001---366).
 %m Month (01---12).
 %M Minute (00---59).
 %p AM/PM indicator.
 %S Second as decimal number (00---61).
 %U Week (00---53); the first Sunday as day 1 of week 1.
 %w Weekday (0--6, Sunday is 0).
 %W Week (00---53); the first Monday as day 1 of week 1.
 %y Year without century (00---99)
 %Y Year with century.
 %z (output only.) Offset from Greenwich; -0800 is 8 hours west of.
 %Z (output only.) Time zone as a character string (empty if not
available
#+END_EXAMPLE

*** Extract day of the year
you can also extract parts of a date and create a variable

#+begin_src r
mod1$dayofyr <- as.numeric(format(mod1$day, "%j"))
#+end_src

*** subset by date range
1. make sure the date field is converted to standard R date
2. issue the followiing command

#+BEGIN_SRC R
NEWDATA <-subset(FULLDATA, as.Date(DATEFIELD) >= 'DATERANGE' & as.Date(DATEFIELD) <= 'DATERANGE')

#example
mb4 <-subset(mb3, as.Date(rdate) >= '2003-09-02' & as.Date(rdate) <= '2004-09-04')
#+END_SRC
*** create a date range/date time series
**** simple date sequence
#+begin_src R
bd <- as.Date("2007-05-20")
ed <- as.Date("2010-06-13")
seqd <- seq(bd, ed, by="1 day")
#+end_src
**** to create a date range based on start and end points use`
#+begin_src R
days_2000<-seq.Date(from = as.Date("2000-01-01"), to = as.Date("2000-12-31"), 1)
#+end_src
where the 1 at the end of the file specifies the increment , thats is increment by 1 day
*** adding days to date
#+begin_src R
as.Date("2001-01-01") + 45
#+end_src

* Homework-Week 3
** Exercise 1 Infant birth weight
In a study of infant birth weight for different occupational groups this was recorded for some first-time mothers hairdressers. The following table shows the results in grams (data specified in sorted order) for 20 births in total, 10 female births and 10 male births.

#+BEGIN_SRC R :session Rorg  :results none
Females (x) 2474 2547 2830 3219 3429 3448 3677 3872 4001 4116
Males (y) 2844 2863 2963 3239 3379 3449 3582 3926 4151 4356
#+END_SRC

a) What is the sample mean, variance and standard deviation of female births? 
b) Compute the same summary statistics of the male births. 
c) Compare the two results, are they similar?
** Course Grades
To compare the difficulty of 2 different courses at a university the following grades distributions (given as number of pupils who achieved the grades) were registered:
#+BEGIN_EXAMPLE
          Course 1  Course 2 Total
Grade 12  20         14      34
Grade 10  14         14      28
Grade 7   16         27      43
Grade 4   20         22      42
Grade 2   12         27      39
Grade 0   16         17      33
Grade -3  10         22      32
Total     108       143      251
#+END_EXAMPLE
a) What is the median of the 251 achieved grades?
b) What are the quartiles and the IQR (Inter Quartile Range)?
** Cholesterol
In a clinical trial of a cholesterol-lowering agent, 15 patients’ cholesterol (in mMol/l) was measured before treatment and 3 weeks after starting treatment. Data are listed in the following table:
#+BEGIN_EXAMPLE
Patient 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
Before 9.1 8.0 7.7 10.0 9.6 7.9 9.0 7.1 8.3 9.6 8.2 9.2 7.3 8.5 9.5
After 8.2 6.4 6.6 8.5 8.0 5.8 7.8 7.2 6.7 9.8 7.1 7.7 6.0 6.6 8.4
#+END_EXAMPLE

a) What is the median of the cholesterol measurements for the patients before treatment,
and similarly after treatment?

b) Find the standard deviations of the cholesterol measurements of the patients before
and after treatment
** using hmisc 
install the Hmisc package
import the hsb2.csv file from the moodle website
explore the same descriptive statistics as from previous steps using describe(from Hmisc)
** 
