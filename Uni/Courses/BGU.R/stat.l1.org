# -*- mode: Org; org-download-image-dir: "/home/zeltak/org/attach/bgu/courses/BGU.R/images"; org-download-heading-lvl: nil; -*-
#+Title:שיטות כמותיות למתקדמים
#+Author: ד"ר איתי קלוג 
#+Email: ikloog@bgu.ac.il
#+REVEAL_TITLE_SLIDE_BACKGROUND: /home/zeltak/org/attach/bgu/courses/BGU.R/images/stat_large.jpg

#+OPTIONS: reveal_center:t reveal_progress:t reveal_history:nil reveal_control:t
# #+OPTIONS: reveal_center:t 
#+OPTIONS: reveal_rolling_links:t reveal_keyboard:t reveal_overview:t num:nil
#+OPTIONS: reveal_width:1200 reveal_height:800
#+OPTIONS: toc:nil
# #+REVEAL: split
#+REVEAL_MARGIN: 0.1
#+REVEAL_MIN_SCALE: 0.5
#+REVEAL_MAX_SCALE: 2.5
#+REVEAL_TRANS: linear
#+REVEAL_SPEED: default
#+REVEAL_THEME: white
#+REVEAL_HLEVEL: 2
#+REVEAL_HEAD_PREAMBLE: <meta name="description" content="Org-Reveal Introduction.">
#+REVEAL_POSTAMBLE: <p> Created by itai Kloog. </p>
# REVEAL_PLUGINS: (highlight markdown notes)
#+REVEAL_EXTRA_CSS: ./local.css
#+REVEAL_SLIDE_NUMBER: t
#+OPTIONS: ^:nil
#+EXCLUDE_TAGS: noexport
#+TAGS: noexport(n)



* Week 1-Admin and Intro to R

#+DOWNLOADED: /tmp/screenshot.png @ 2015-10-19 09:45:28
#+attr_html: :width 600px
 [[~/Sync/attach/images_2015/screenshot_2015-10-19_09-45-28.png]]

#+DOWNLOADED: /tmp/screenshot.png @ 2015-10-19 11:58:28
#+attr_html: :width 500px
 [[~/Sync/attach/images_2015/screenshot_2015-10-19_11-58-28.png]]



** Admin
:PROPERTIES:
	  :reveal_background: /home/zeltak/org/attach/bgu/courses/BGU.R/images/hist_BD.jpg
	  :END:
*** *פרטים ורקע שלי*
ד"ר איתי קלוג

ראש תוכנית טמג

ראש המעבדה להערכת חשיפה סביבתית
http://in.bgu.ac.il/humsos/eeal/Pages/default.aspx

ikloog@gmail.com
#+DOWNLOADED: /tmp/screenshot.png @ 2015-10-21 18:21:25
#+attr_html: :width 400px
 [[~/Sync/attach/images_2015/screenshot_2015-10-21_18-21-25.png]]

*** סילבוס
אתר הקורס
http://moodle2.bgu.ac.il/

*מתרגלים*
שעות הקבלה בתאום מראש
#+attr_html: :width 300px
[[~/Sync/attach/images_2015/screenshot_2015-10-19_10-17-10.png]]  [[~/Sync/attach/images_2015/screenshot_2015-10-19_10-17-23.png]]

*** הפסקות 
בזמן התרגול ניתן לצאת מתי שרוצים

לכן השיעור יהיה בין 09:00 ל 11:15 רצוף

(45 minutes X3)


*** אופי הקורס

בוחן אמצע X2 -סגירת פערים בתרגילים

עבודה מסכמת- הגשה חודש משעור אחרון

(הרצאה+ תרגול בכיתה (מה שלא מספיקים יש להשלים למבחן אמצע\מבחן

ההרצאות ינועו מהקל אל הכבד בהדרגה
רצוי להשלים מה שלא הספקתם בכתה, כל שעור מתבסס על הקודם
*** *ENGLISH!* 
 הרבה מהמושגים באנגלית- בלתי אפשרי לתרגם\\

 זה לא קורס תכנות בחוג למחשבים\\
    
 לא מצופה מכם בסוף הקורס להיות מסוגלים לתכנת את האלטרנטיבה ל Whatsapp \\

 וכמו כן הקורס הזה לא יסדר לכם עבודה בגוגל...כנראה 

 יש דרכים להתמקצע בתכנות\\

*** שיטת הלימוד
 מספר גישות להוראת תוכנות מחשב בכלל וסטטיסטיקה בפרט\\

לתת רק תאוריה...התרגול, אם בכלל, באחריות הסטודנט\\

מעבדה עצמאית של סטודנטים\\

*הדגמה של המרצה ועבודה משותפת עם המרצה בתרגול*
*** תרגילים
אין חובת הגשה

אך מאוד רצוי לגמור את כל התרגילים כדי להצליח בקורס



#+DOWNLOADED: /tmp/screenshot.png @ 2015-10-25 18:32:09
#+attr_html: :width 400px
[[~/ZH_tmp/screenshot_2015-10-25_18-32-09.png]]
*** הכל יעשה בקצב מתון
הולכים מהקל אל הכבד

אך בצורה מתונה

כל מי שיעשה את התרגילים יצליח בקורס

** Programming and Open Source
  :PROPERTIES:
	  :reveal_background: /home/zeltak/org/attach/bgu/courses/BGU.R/images/hist_BD.jpg
	  :END:
*** Here be dragons... 
Warning..English starts here :D

#+DOWNLOADED: /tmp/screenshot.png @ 2015-10-25 11:32:54
#+attr_html: :width 300px
[[~/ZH_tmp/screenshot_2015-10-25_11-32-54.png]]

#+DOWNLOADED: /tmp/screenshot.png @ 2015-10-25 10:39:02
#+attr_html: :width 600px
[[~/ZH_tmp/screenshot_2015-10-25_10-39-02.png]]

*** Open source

 #+DOWNLOADED: /tmp/screenshot.png @ 2015-10-19 10:03:27
 #+attr_html: :width 500px
  [[~/Sync/attach/images_2015/screenshot_2015-10-19_10-03-27.png]]
*** History of open source

#+DOWNLOADED: /tmp/screenshot.png @ 2015-10-25 18:26:43
#+attr_html: :width 900px
[[~/ZH_tmp/screenshot_2015-10-25_18-26-43.png]]
*** Open source
קוד פתוח משמש בעולם התוכנה לציון תוכנה שקוד המקור שלה פתוח ונגיש לכל מי שחפץ בו

הקוד חופשי לשימוש, לצפייה, לעריכת שינויים ולהפצה מחודשת לכל אחד ואחת 

 #+DOWNLOADED: /tmp/screenshot.png @ 2015-10-19 10:04:18
 #+attr_html: :width 600px
  [[~/Sync/attach/images_2015/screenshot_2015-10-19_10-04-18.png]]
*** Open source 
 שיטת פיתוח כזו מאפשרת בעצם לכל מי שחפץ בכך לקחת חלק בפיתוח התוכנה ולתרום לשיפורה

 FOSS או  FLOSS  באנגלית: Free/Libre and Open Source Software


#+DOWNLOADED: /tmp/screenshot.png @ 2015-10-25 18:24:47
#+attr_html: :width 300px
[[~/ZH_tmp/screenshot_2015-10-25_18-24-47.png]]
***  OPEN SOURCE VS. CLOSED SOURCE

View/Modify the source code of an application or software.
Open source software is released to the development community and undergoes a secondary phase of evolution, but closed source software is developed in isolation with a small team of developers.
Developer support and large community to help.

 #+DOWNLOADED: /tmp/screenshot.png @ 2015-10-19 10:07:03
 #+attr_html: :width 300px
  [[~/Sync/attach/images_2015/screenshot_2015-10-19_10-07-03.png]]
*** open source
Open Source Software (OSS)? Free Software (FS)? FOSS?

What does it all mean?

The differences are very subtle

*Open source* - focuses on community development model and providing source code

*Free software* - focuses on the philosophical freedoms it gives to users 

Free and open source software -  is an inclusive term which covers both free software and open source software 

which, despite being similar, have differing histories, cultures and philosophies.
*** open source
Open Source is more secure and bugs and vulnerabilities are fixed often

windows patch Tuesday vs heartbleed ...OsX sneaks in updates/patches

#+DOWNLOADED: /tmp/screenshot.png @ 2015-10-25 18:23:08
#+attr_html: :width 500px
[[~/ZH_tmp/screenshot_2015-10-25_18-23-08.png]]

*** open source

#+DOWNLOADED: /tmp/screenshot.png @ 2015-10-25 18:23:26
#+attr_html: :width 500px
[[~/ZH_tmp/screenshot_2015-10-25_18-23-26.png]]
*** Free Software (FS)
The free software movement was conceived in 1983 by Richard Stallman to satisfy the need for and to give the benefit of "software freedom" to computer users

 #+DOWNLOADED: /tmp/screenshot.png @ 2015-10-19 10:05:59
 #+attr_html: :width 400px
  [[~/Sync/attach/images_2015/screenshot_2015-10-19_10-05-59.png]]

*** Open source 
 סביב מושג הקוד הפתוח קיימת תפיסת עולם הטוענת כי התוכנות שייכות להמונים, ועל כן כל החפצים בכך יכולים להיכנס לקוד ולערוך בו שינויים

 זאת, בניגוד לקוד סגור, אשר מזוהה, על פי רוב, עם יצרני התוכנה הגדולים

 לאדם הקונה תוכנות מבית מיקרוסופט, למשל, אין אפשרות פשוטה לצפות, בפרטי התהליכים שמרכיבים את התוכנות שרכש 

 #+DOWNLOADED: /tmp/screenshot.png @ 2015-10-19 10:10:49
 #+attr_html: :width 400px
  [[~/Sync/attach/images_2015/screenshot_2015-10-19_10-10-49.png]]
*** Open source

 #+DOWNLOADED: /tmp/screenshot.png @ 2015-10-19 10:14:44
 #+attr_html: :width 900px
  [[~/Sync/attach/images_2015/screenshot_2015-10-19_10-14-44.png]]
*** Open source in Israel 

 #+DOWNLOADED: /tmp/screenshot.png @ 2015-10-19 10:15:53
 #+attr_html: :width 990px
  [[~/Sync/attach/images_2015/screenshot_2015-10-19_10-15-53.png]]
** Introduction to R
  :PROPERTIES:
	  :reveal_background: /home/zeltak/org/attach/bgu/courses/BGU.R/images/hist_BD.jpg
	  :END:
*** What is R

#+DOWNLOADED: /tmp/screenshot.png @ 2015-10-21 16:43:18
#+attr_html: :width 150px
 [[~/Sync/attach/images_2015/screenshot_2015-10-21_16-43-18.png]]
שפת תכנות וסביבת עבודה למחשוב וגרפיקה סטטיסטיים

נמצאת בשימוש נרחב בקרב סטטיסטיקאים וכורי נתונים ומשמשת לפיתוח תוכנה סטטיסטית וניתוח נתונים

בעלת רשיון קוד פתוח

עובדת על כך מערכת הפעלה אפשרית

*** What is R 
בעלת ממשק משתמש גרפי ולא גרפית-שורת הפקודה

בפיתוח מתמיד על ידי אנשי אקדמייה ותעשייה

מיקוסופט ואינטל מפתחים פעילים של השפה  
*** What about Excel?

 -  serious data manipulation is impossible

 -  better visually see what is happening... But: graphics are poor!

 -  Limited statistical possibles and many things Excel just cannot do...

 -  Use the right tool!

#+DOWNLOADED: /tmp/screenshot.png @ 2015-10-21 16:52:26
#+attr_html: :width 300px
 [[~/Sync/attach/images_2015/screenshot_2015-10-21_16-52-26.png]]

*** What are the strengths of R?

 -  Comprehensive set of statistical analysis techniques:

    -  Classical statistical tests

    -  Linear and nonlinear modeling

    -  Time-series analysis

    -  Classification and cluster analysis

    -  Spatial statistics

    -  Bayesian statistics

 -  Virtually every statistical technique is either already built into R,
    or a user-contributed package
*** What are the strengths of R?

 -  Completely open-source

    -  Users contribute and create new packages

    -  Existing R functions can be edited and expanded

    -  Free

    -  Huge community of scientists using R

    -  Easy to replicate your work from data to finished product

 -  Publication-quality graphics

    -  Many default graphics

    -  Full control of graphics

    -  vibrant and exciting
*** Learning it
R is a programming language, the learning curve can be steep

Very rewarding to become fluent: you can do more

Be patient and creative

Lots of help files, online sources, books, and graduate students in your lab
*** history
R is an implementation of the S programming language combined with lexical scoping semantics inspired by Scheme

Created by *Ross Ihaka* and *Robert Gentleman* at the University of Auckland, New Zealand, currently developed by the R Development Core Team


#+DOWNLOADED: /tmp/screenshot.png @ 2015-10-25 13:12:23
#+attr_html: :width 500px
[[~/ZH_tmp/screenshot_2015-10-25_13-12-23.png]]

*** Releases in R

#+DOWNLOADED: /tmp/screenshot.png @ 2015-10-21 18:38:00
#+attr_html: :width 1200px
 [[~/Sync/attach/images_2015/screenshot_2015-10-21_18-38-00.png]]

*** Graphics 
 #+BEGIN_SRC R  :session Rorg  :results none
 library(caTools) # library to write.gif
 jet.colors <- colorRampPalette(c("#00007F", "blue", "#007FFF", "cyan", "#7FFF7F",
  "yellow", "#FF7F00", "red", "#7F0000"))
 m <- 1000 # define size
 C <- complex( real=rep(seq(-1.8,0.6, length.out=m), each=m ),
  imag=rep(seq(-1.2,1.2, length.out=m), m ) )
 C <- matrix(C,m,m) 
 Z <- 0 
 X <- array(0, c(m,m,20))
 for (k in 1:20) { # loop
  Z <- Z^2+C #
  X[,,k] <- exp(-abs(Z)) #save 
 }
 write.gif(X, "Mandelbrot.gif", col=jet.colors, delay=800)
 #+END_SRC 
#+attr_html: :width 300px
file:/home/zeltak/ZH_tmp/Mandelbrot_Creation_Animation.gif

*** Graphical user interfaces (GUI)
Architect – cross-platform open source IDE for data science based on Eclipse and StatET \\
Deducer – GUI for menu driven data analysis (similar to SPSS/JMP/Minitab).\\
Java GUI for R – cross-platform stand-alone R terminal and editor based on Java (also known as JGR).\\
R Commander – cross-platform menu-driven GUI based on tcltk (several plug-ins to Rcmdr are also available).\\
Revolution R Productivity Environment (RPE) – Revolution Analytics provided Visual Studio based IDE, and has plans for web based point and click interface.\\
RGUI – comes with the pre-compiled version of R for Microsoft Windows.\\
RKWard – extensible GUI and IDE for R.\\
*RStudio – cross-platform open source IDE (which can also be run on a remote linux server).*
** Starting with R
  :PROPERTIES:
	  :reveal_background: /home/zeltak/org/attach/bgu/courses/BGU.R/images/hist_BD.jpg
	  :END:
*** CRAN
 go to https://cran.r-project.org/


 #+DOWNLOADED: /tmp/screenshot.png @ 2015-10-19 10:47:20
 #+attr_html: :width 800px
  [[~/Sync/attach/images_2015/screenshot_2015-10-19_10-47-20.png]]
*** CRAN 

 #+DOWNLOADED: /tmp/screenshot.png @ 2015-10-19 10:48:02
 #+attr_html: :width 900px
  [[~/Sync/attach/images_2015/screenshot_2015-10-19_10-48-02.png]]
*** CRAN  

 #+DOWNLOADED: /tmp/screenshot.png @ 2015-10-19 10:48:22
 #+attr_html: :width 800px
  [[~/Sync/attach/images_2015/screenshot_2015-10-19_10-48-22.png]]
*** Install on PC
Open and run the file you just downloaded R-3.1.2-win.exe  \\
There is no need to change the default installation!\\

#+DOWNLOADED: /tmp/screenshot.png @ 2015-10-19 12:57:44
#+attr_html: :width 150px
 [[~/Sync/attach/images_2015/screenshot_2015-10-19_12-57-44.png]]
*** install process

#+DOWNLOADED: /tmp/screenshot.png @ 2015-10-19 12:59:02
#+attr_html: :width 600px
 [[~/Sync/attach/images_2015/screenshot_2015-10-19_12-59-02.png]]
*** Load up R
#+DOWNLOADED: /tmp/screenshot.png @ 2015-10-21 17:57:42
#+attr_html: :width 550px
 [[~/Sync/attach/images_2015/screenshot_2015-10-21_17-57-42.png]]

luckily for you you don't have to use plain R anymore...
but for today we will use plain R..lets open it on your PC's

*** Rstudio
It is tedious to write R code in the command line..

Old style: create a text file (e.g. Notepad) and copy the code you want to run, to the command line

New Style: use RStudio. Why? 

- Multiple files

- View variable values, color coding

- Built-in help

- Quick running of code

- Easy file handling

- Easy package installation

- Many other reasons
*** Rstudio look
#+DOWNLOADED: /tmp/screenshot.png @ 2015-10-21 17:59:31
#+attr_html: :width 850px
 [[~/Sync/attach/images_2015/screenshot_2015-10-21_17-59-31.png]]
*** Installing RStudio
Go to http://www.rstudio.com/ and click on Desktop


#+DOWNLOADED: /tmp/screenshot.png @ 2015-10-19 13:00:49
#+attr_html: :width 600px
 [[~/Sync/attach/images_2015/screenshot_2015-10-19_13-00-49.png]]
*** Rtudio install 
Select DOWNLOAD RSTUDIO DESKTOP


#+DOWNLOADED: /tmp/screenshot.png @ 2015-10-19 13:01:30
#+attr_html: :width 800px
 [[~/Sync/attach/images_2015/screenshot_2015-10-19_13-01-30.png]]

*** Rtudio install 
Download the installer for Windows

#+DOWNLOADED: /tmp/screenshot.png @ 2015-10-19 13:01:43
#+attr_html: :width 800px
 [[~/Sync/attach/images_2015/screenshot_2015-10-19_13-01-43.png]]
*** Rtudio install 
Open and run the file you just downloaded RStudio-0.98.1091.exe 

You don't have to change any of the defaults for the installation
*** Rtudio install 

#+DOWNLOADED: /tmp/screenshot.png @ 2015-10-19 13:02:08
#+attr_html: :width 900px
 [[~/Sync/attach/images_2015/screenshot_2015-10-19_13-02-08.png]]
*** RStudio tips

#+DOWNLOADED: /tmp/screenshot.png @ 2015-10-21 18:00:48
#+attr_html: :width 900px
 [[~/Sync/attach/images_2015/screenshot_2015-10-21_18-00-48.png]]
*** R scripts

 R scripts

 -  A text file (e.g. lab1.r) that contains all your R code

 -  Scientific method: complete record of your analyses

 -  Reproducible: rerunning your code is easy for you or someone else

 -  Easily modified and rerun

 -  In RStudio, select code and type <ctrl+enter> to run the code in the
    R console

 -  SAVE YOUR SCRIPTS

*** R scripts

  You can work directly in R, but most users prefer a graphical interface. For starters:

  *RStudio*, an Integrated Development Environment (IDE)\\

  Deducer, a Graphical User Interface (GUI)\\

  More advanced users may prefer a good text editor with plugins for syntax highlighting, code completion, etc. for R such as:\\

  Vim\\

  *Emacs* + ESS \\

  Eclipse + StatET\\
*** sessionInfo()
Basic info on R session
To get a description of the version of R and its attached packages used in the current session, we can use the sessionInfo function

  #+BEGIN_SRC R  :session Rorg  :results none
blah
sessionInfo()
  #+END_SRC
*** R is RAM dependent
R runs entirely in RAM!

So if you want to use big data and run an analysis on 6,000,000 cases you need a lot of RAM!


#+DOWNLOADED: /tmp/screenshot.png @ 2015-10-25 18:15:42
#+attr_html: :width 300px
[[~/ZH_tmp/screenshot_2015-10-25_18-15-42.png]]
*** R workspaces
 R workspaces

 -  When you close your R session, you can save data and analyses in an R
    workspace

 -  This saves everything run in your R console

 -  Generally not recommended

    -  Exception: working with an enormous dataset

 -  Better to start with a clean, empty workspace so that past analyses
    don't interfere with current analyses

 -  rm(list = ls()) clears out your workspace

 -  Summary: save your R script, don't save your workspace


** Base R programming
  :PROPERTIES:
	  :reveal_background: /home/zeltak/org/attach/bgu/courses/BGU.R/images/hist_BD.jpg
	  :END:
*** Programming basics
*code or source code*: The sequence of instructions in a program.

*syntax*: The set of legal structures and commands that can be used in a particular programming language.

*output*: The messages printed to the user by a program.

*console*: The text box onto which output is printed.

Some source code editors pop up the console as an external window, and others contain their own console window.

*** R programming 
R code can be entered into the command line directly or saved to a script, which can be run inside a session using the source function

Commands are separated either by a ; or by a newline.

R is case sensitive.

Help files for R functions are accessed by preceding the name of the function with ?
you can also use ?? for keyword searhc

#+BEGIN_SRC R  :session Rorg  :results none
?require
??logistic
#+END_SRC 

*** packages
A way to extend R basic functionality

can add graphic, statistics, GIS, etc 


#+DOWNLOADED: /tmp/screenshot.png @ 2015-10-22 15:50:12
#+attr_html: :width 300px
 [[~/Sync/attach/images_2015/screenshot_2015-10-22_15-50-12.png]]
*** installing via GUI- Via Rstudio

 #+DOWNLOADED: /tmp/screenshot.png @ 2015-10-19 10:52:09
 #+attr_html: :width 500px
  [[~/Sync/attach/images_2015/screenshot_2015-10-19_10-52-09.png]]
*** Installing via CODE
To use packages in R, we must first install them using the install.packages function, which typically downloads the package from CRAN and installs it for use

 #+BEGIN_SRC R
 install.packages("foreign")
 install.packages("xlsx")
 install.packages("dplyr")
 install.packages("reshape2")
 install.packages("ggplot2")
 install.packages("GGally")
 install.packages("vcd")
 #+END_SRC
*** Loading Packages
If we know we will need a particular package for our current R session, we must load it into the R environment using the library or require functions
 #+BEGIN_SRC R
 library(foreign)
 library(xlsx)
 #+END_SRC
*** commenting
The # character at the beginning of a line signifies a comment, which is not executed\\
Start comments with #, rest of line is ignored\\
 #+BEGIN_SRC R  :session Rorg  :results none
 #sessionInfo is cool..
 sessionInfo()
 #+END_SRC
*** data store
 R stores both data and output from data analysis (as well as everything else) in objects

 Things are assigned to and stored in objects using the <- or = operator

 A list of all objects in the current session can be obtained with ls()

 #+BEGIN_SRC R  :session Rorg  :results none
 # assign the number 3 to object called abc
 abc <- 3
 # list all objects in current session
 ls()
 #+END_SRC
*** Variables
A basic concept in (statistical) programming is called a variable.

A variable allows you to store a value (e.g. 4) or an object (e.g. a function description) in R.

You can then later use this variable's name to easily access the value or the object that is stored within this variable.

You can assign a value 4 to a variable MYVAR with the command
#+BEGIN_SRC R :session Rorg  :results none
MYVAR <- 4
#+END_SRC
*** Str command
Compactly display the internal structure of an R object, a diagnostic function and an alternative to summary.
#+BEGIN_SRC R :session Rorg  :results none
str(a)
#+END_SRC

*** Basic data types in R
Decimals values like 4.5 are called numerics.\\
Natural numbers like 4 are called integers. Integers are also numerics.\\
Boolean values (TRUE or FALSE) are called logical (TRUE can be abbreviated to T and FALSE to F).\\
Text (or string) values are called characters.\\

#+DOWNLOADED: /tmp/screenshot.png @ 2015-10-19 15:36:27
#+attr_html: :width 400px
 [[~/Sync/attach/images_2015/screenshot_2015-10-19_15-36-27.png]]
*** numeric
#+BEGIN_SRC R :session Rorg  :results none
> a <- c(1,2,3,4,5)
> a
#[1] 1 2 3 4 5
> a+1
#[1] 2 3 4 5 6
> mean(a)
#[1] 3
> var(a)
#[1] 2.5
#+END_SRC
*** Strings
You are not limited to just storing numbers. You can also store strings. A string is specified by using quotes. Both single and double quotes will work:

#+BEGIN_SRC R :session Rorg  :results none
 a <- "hello"
> a
#[1] "hello"
> b <- c("hello","there")
> b
#[1] "hello" "there"
> b[1]
#[1] "hello"
#+END_SRC
*** Factors
a factor variable  stores the nominal values as a vector of integers in the range [ 1... k ] 

#+BEGIN_SRC R :session Rorg  :results none
tree$C
#[1]  1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3
#[39] 3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4
#Levels: 1 2 3 4
summary(tree$C)
#1  2  3  4
#8 23 10 13
levels(tree$C)
#[1] "1" "2" "3" "4"
#+END_SRC
*** converting between types
#+BEGIN_SRC R :session Rorg  :results none
Race <- as.character(Race)
Race <- as.numeric(Race)
Race <- as.factor(Race)
#+END_SRC
*** vector
All elements must be of the same type.

For example, the following code create two vectors.
#+BEGIN_SRC R :session Rorg  :results none
name <- c("Mike", "Lucy", "John") 
age <- c(20, 25, 30) 
#+END_SRC
*** Matrix
Matrix is a special kind of vector. A matrix is a vector with two additional attributes: the number of rows and the number of columns.
#+BEGIN_SRC R :session Rorg  :results none
x <- matrix(c(1,2,3,4), nrow=2, ncol=2)
x
#        [,1] [,2]
#  [1,]    1    3
#  [2,]    2    4
#+END_SRC
*** List

List can contain elements of different types.

#+BEGIN_SRC R :session Rorg  :results none
> y <- list(name="Mike", gender="M", company="ProgramCreek")
> y
$name
[1] "Mike"
$gender
[1] "M"
$company
[1] "ProgramCreek"
#+END_SRC
*** Date Frame

A data frame is used for storing data tables. It is a list of vectors of equal length.

Usually referred to in R examples as *DF*

For example, you can create a date frame by using the following code:

#+BEGIN_SRC R :session Rorg  :results none
> name <- c("Mike", "Lucy", "John") 
> age <- c(20, 25, 30) 
> student <- c(TRUE, FALSE, TRUE) 
> df = data.frame(name, age, student)  
> df
  name age student
1 Mike  20    TRUE
2 Lucy  25   FALSE
3 John  30    TRUE
#+END_SRC
*** refer to variables by name in a data frame
To access a specific variable in a *DF* use the dollar sign ($).

For example in the previous df

#+BEGIN_SRC R :session Rorg  :results none
name <- c("Mike", "Lucy", "John") 
age <- c(20, 25, 30) 
student <- c(TRUE, FALSE, TRUE) 
df = data.frame(name, age, student)  
df$name

#+END_SRC

*** view data in a GUI table
show a table for the data
#+begin_src R
View(df)
#+end_src

*** Remove vectors/datasets
To remove a dataset you can type a simple command:
#+begin_src R
rm(df)
#+end_src



* Homework-Week 1
** Asthmatic's with R
*** Variable assignment
complete the code in the editor such that it assigns the value 42 to the variable x in the editor.

Notice that when you ask R to print x, the value 42 appears.

#+BEGIN_SRC R :session Rorg  :results none
# Assign the value 42 to 'x'
x <- 

# Print out the value of the variable 'x'
x
#+END_SRC
*** Variable assignment (2)
Type the following code in the editor: my_apples <- 5. This will assign the value 5 to my_apples.\\
Type: my_apples below the second comment. This will print out the value of my_apples.\\
#+BEGIN_SRC R :session Rorg  :results none
# Assign the value 5 to the variable called 'my_apples'

# Print out the value of the variable 'my_apples'

#+END_SRC
*** Variable assignment (3)
Every tasty fruit basket needs oranges, so you decide to add six oranges.\\
As a data analyst, your reflex is to immediately create the variable my_oranges and assign the value 6 to it.\\
Next, you want to calculate how many pieces of fruit you have in total. Since you have given meaningful names to these values, you can now code this in a clear way:
#+BEGIN_QUOTE
my_apples + my_oranges
#+END_QUOTE

Assign to my_oranges the value 6.
Add the variables my_apples and my_oranges and have R simply print the result.
Combine the variables my_apples and my_oranges into a new variable my_fruit, which is the total amount of fruits in your fruit basket.

#+BEGIN_SRC R :session Rorg  :results none
# Assign a value to the variables called 'my_apples' and 'my_oranges'
my_apples <- 5


# Add these two variables together and print the result


# Create the variable 'my_fruit'

#+END_SRC
*** Apples and Oranges
Common knowledge tells you not to add apples and oranges. But hey, that is what you just did, no :-)? \\
The my_apples and my_oranges variables both contained a number in the previous exercise. \\
The + operator works with numeric variables in R. 
If you really tried to add "apples" and "oranges", and assigned a text value to the variable my_oranges (see the below excessive)\\
you would be trying to assign the addition of a numeric and a character variable to the variable my_fruit. This is not possible.\\
Adjust the code so that R knows you have 6 oranges and thus a fruit basket with 11 pieces of fruit.

#+BEGIN_SRC R :session Rorg  :results none
# Assign a value to the variable called 'my_apples'
my_apples <- 5 

# Print out the value of 'my_apples'
my_apples       

# Assign a value to the variable 'my_oranges' and print it out
my_oranges <- "six" 
my_oranges 

# New variable that contains the total amount of fruit
my_fruit <- my_apples + my_oranges 
my_fruit
#+END_SRC
** Basic data types in R
Change the value of the:
my_numeric variable to 42.
my_character variable to "forty-two". Note that the quotation marks indicate that "forty-two" is a character.
my_logical variable to FALSE.

#+BEGIN_SRC R :session Rorg  :results none
# What is the answer to the universe?
my_numeric <- 42.5

# The quotation marks indicate that the variable is of type character
my_character <- "some text"

my_logical <- TRUE
#+END_SRC
** What's that data type?
Do you remember that when you added 5 + "six", you got an error due to a mismatch in data types? You can avoid such embarrassing situations by checking the data type of a variable beforehand. You can do this as follows:
#+BEGIN_SRC R :session Rorg  :results none
class(some_variable_name)
#+END_SRC

Complete the code in the editor and print the class of my_numeric, my_character and my_logical to the console.

#+BEGIN_SRC R :session Rorg  :results none
# Declare variables of different types
my_numeric <- 42
my_character <- "forty-two"
my_logical <- FALSE 

# Check which type these variables have:
#+END_SRC

