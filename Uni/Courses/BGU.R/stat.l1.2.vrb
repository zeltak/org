\frametitle{Week 1-Admin and Intro to R}
\includegraphics[width=.9\linewidth]{/home/zeltak/Sync/attach/images_2015/screenshot_2015-10-19_09-45-28.png}

\includegraphics[width=.9\linewidth]{/home/zeltak/Sync/attach/images_2015/screenshot_2015-10-19_11-58-28.png}

\begin{block}{\alert{מנהלות}}
\alert{פרטים ורקע שלי}

ד"ר איתי קלוג

ראש תוכנית טמג

ראש המעבדה להערכת חשיפה סביבתית
\url{http://in.bgu.ac.il/humsos/eeal/Pages/default.aspx}

ikloog@gmail.com
\includegraphics[width=.9\linewidth]{/home/zeltak/Sync/attach/images_2015/screenshot_2015-10-21_18-21-25.png}

\begin{block}{סילבוס}
אתר הקורס
\url{http://moodle2.bgu.ac.il/}

\alert{מתרגלים}
שעות הקבלה בתאום מראש
\includegraphics[width=.9\linewidth]{/home/zeltak/Sync/attach/images_2015/screenshot_2015-10-19_10-17-10.png}  \includegraphics[width=.9\linewidth]{/home/zeltak/Sync/attach/images_2015/screenshot_2015-10-19_10-17-23.png}
\end{block}

\begin{block}{הפסקות}
בזמן התרגול ניתן לצאת מתי שרוצים

לכן השיעור יהיה בין 09:00 ל 11:15 רצוף

(45 minutes X3)
\end{block}


\begin{block}{אופי הקורס}
בוחן אמצע X2 -סגירת פערים בתרגילים

עבודה מסכמת- הגשה חודש משעור אחרון

(הרצאה+ תרגול בכיתה (מה שלא מספיקים יש להשלים למבחן אמצע$\backslash$מבחן

ההרצאות ינועו מהקל אל הכבד בהדרגה
רצוי להשלים מה שלא הספקתם בכתה, כל שעור מתבסס על הקודם
\end{block}
\begin{block}{\alert{ENGLISH!}}
הרבה מהמושגים באנגלית- בלתי אפשרי לתרגם\\

זה לא קורס תכנות בחוג למחשבים\\

לא מצופה מכם בסוף הקורס להיות מסוגלים לתכנת את האלטרנטיבה ל Whatsapp \\

וכמו כן הקורס הזה לא יסדר לכם עבודה בגוגל\ldots{}כנראה

יש דרכים להתמקצע בתכנות\\
\end{block}

\begin{block}{שיטת הלימוד}
מספר גישות להוראת תוכנות מחשב בכלל וסטטיסטיקה בפרט\\

לתת רק תאוריה\ldots{}התרגול, אם בכלל, באחריות הסטודנט\\

מעבדה עצמאית של סטודנטים\\

הדגמה של המרצה ועבודה משותפת עם המרצה בתרגול\\
\end{block}
\end{block}

\begin{block}{Programming and Open Source}
\begin{block}{Programming basics}
\alert{code or source code}: The sequence of instructions in a program.

\alert{syntax}: The set of legal structures and commands that can be used in a particular programming language.

\alert{output}: The messages printed to the user by a program.

\alert{console}: The text box onto which output is printed.

Some source code editors pop up the console as an external window, and others contain their own console window.
\end{block}
\begin{block}{Open source}
\includegraphics[width=.9\linewidth]{/home/zeltak/Sync/attach/images_2015/screenshot_2015-10-19_10-03-27.png}
\end{block}
\begin{block}{Open source}
קוד פתוח משמש בעולם התוכנה לציון תוכנה שקוד המקור שלה פתוח ונגיש לכל מי שחפץ בו

הקוד חופשי לשימוש, לצפייה, לעריכת שינויים ולהפצה מחודשת לכל אחד ואחת

\includegraphics[width=.9\linewidth]{/home/zeltak/Sync/attach/images_2015/screenshot_2015-10-19_10-04-18.png}
\end{block}
\begin{block}{Open source}
שיטת פיתוח כזו מאפשרת בעצם לכל מי שחפץ בכך לקחת חלק בפיתוח התוכנה ולתרום לשיפורה

FOSS או  FLOSS  באנגלית: Free/Libre and Open Source Software

\includegraphics[width=.9\linewidth]{/home/zeltak/Sync/attach/images_2015/screenshot_2015-10-19_10-05-59.png}
\end{block}
\begin{block}{OPEN SOURCE VS. CLOSED SOURCE}
View/Modify the source code of an application or software.
Open source software is released to the development community and undergoes a secondary phase of evolution, but closed source software is developed in isolation with a small team of developers.
Developer support and large community to help.

\includegraphics[width=.9\linewidth]{/home/zeltak/Sync/attach/images_2015/screenshot_2015-10-19_10-07-03.png}
\end{block}
\begin{block}{Open source}
סביב מושג הקוד הפתוח קיימת תפיסת עולם הטוענת כי התוכנות שייכות להמונים, ועל כן כל החפצים בכך יכולים להיכנס לקוד ולערוך בו שינויים

זאת, בניגוד לקוד סגור, אשר מזוהה, על פי רוב, עם יצרני התוכנה הגדולים

לאדם הקונה תוכנות מבית מיקרוסופט, למשל, אין אפשרות פשוטה לצפות, בפרטי התהליכים שמרכיבים את התוכנות שרכש

\includegraphics[width=.9\linewidth]{/home/zeltak/Sync/attach/images_2015/screenshot_2015-10-19_10-10-49.png}
\end{block}
\begin{block}{Open source}
\includegraphics[width=.9\linewidth]{/home/zeltak/Sync/attach/images_2015/screenshot_2015-10-19_10-14-44.png}
\end{block}
\begin{block}{Open source in Israel}
\includegraphics[width=.9\linewidth]{/home/zeltak/Sync/attach/images_2015/screenshot_2015-10-19_10-15-53.png}
\end{block}
\end{block}
\begin{block}{Introduction to R}
\begin{block}{What is R}
\includegraphics[width=.9\linewidth]{/home/zeltak/Sync/attach/images_2015/screenshot_2015-10-21_16-43-18.png}
שפת תכנות וסביבת עבודה למחשוב וגרפיקה סטטיסטיים

נמצאת בשימוש נרחב בקרב סטטיסטיקאים וכורי נתונים ומשמשת לפיתוח תוכנה סטטיסטית וניתוח נתונים

בעלת רשיון קוד פתוח

עובדת על כך מערכת הפעלה אפשרית
\end{block}

\begin{block}{What is R}
בעלת ממשק משתמש גרפי ולא גרפית-שורת הפקודה

בפיתוח מתמיד על ידי אנשי אקדמייה ותעשייה

מיקוסופט ואינטל מפתחים פעילים של השפה
\end{block}
\begin{block}{What about Excel?}
\begin{itemize}
\item serious data manipulation is impossible

\item better visually see what is happening\ldots{} But: graphics are poor!

\item Limited statistical possibles and many things Excel just cannot do\ldots{}

\item Use the right tool!
\end{itemize}

\includegraphics[width=.9\linewidth]{/home/zeltak/Sync/attach/images_2015/screenshot_2015-10-21_16-52-26.png}
\end{block}

\begin{block}{What are the strengths of R?}
\begin{itemize}
\item Comprehensive set of statistical analysis techniques:

\begin{itemize}
\item Classical statistical tests

\item Linear and nonlinear modeling

\item Time-series analysis

\item Classification and cluster analysis

\item Spatial statistics

\item Bayesian statistics
\end{itemize}

\item Virtually every statistical technique is either already built into R,
or a user-contributed package
\end{itemize}
\end{block}
\begin{block}{What are the strengths of R?}
\begin{itemize}
\item Completely open-source

\begin{itemize}
\item Users contribute and create new packages

\item Existing R functions can be edited and expanded

\item Free

\item Huge community of scientists using R

\item Easy to replicate your work from data to finished product
\end{itemize}

\item Publication-quality graphics

\begin{itemize}
\item Many default graphics

\item Full control of graphics

\item vibrant and exciting
\end{itemize}
\end{itemize}
\end{block}
\begin{block}{Learning it}
R is a programming language, the learning curve can be steep

Very rewarding to become fluent: you can do more

Be patient and creative

Lots of help files, online sources, books, and graduate students in your lab
\end{block}
\begin{block}{היסטוריה}
R is an implementation of the S programming language combined with lexical scoping semantics inspired by Scheme

Created by Ross Ihaka and Robert Gentleman at the University of Auckland, New Zealand

currently developed by the R Development Core Team
\end{block}

\begin{block}{אבני דרך חשובות}
\includegraphics[width=.9\linewidth]{/home/zeltak/Sync/attach/images_2015/screenshot_2015-10-21_18-38-00.png}
\end{block}

\begin{block}{Graphics}
\begin{verbatim}
library(caTools) # library to write.gif
jet.colors <- colorRampPalette(c("#00007F", "blue", "#007FFF", "cyan", "#7FFF7F",
 "yellow", "#FF7F00", "red", "#7F0000"))
m <- 1000 # define size
C <- complex( real=rep(seq(-1.8,0.6, length.out=m), each=m ),
 imag=rep(seq(-1.2,1.2, length.out=m), m ) )
C <- matrix(C,m,m)
Z <- 0
X <- array(0, c(m,m,20))
for (k in 1:20) { # loop
 Z <- Z^2+C #
 X[,,k] <- exp(-abs(Z)) #save
}
write.gif(X, "Mandelbrot.gif", col=jet.colors, delay=800)
\end{verbatim}
\url{file:///home/zeltak/ZH_tmp/Mandelbrot_Creation_Animation.gif}
\end{block}

\begin{block}{Graphical user interfaces (GUI)}
Architect – cross-platform open source IDE for data science based on Eclipse and StatET \\
Deducer – GUI for menu driven data analysis (similar to SPSS/JMP/Minitab).\\
Java GUI for R – cross-platform stand-alone R terminal and editor based on Java (also known as JGR).\\
R Commander – cross-platform menu-driven GUI based on tcltk (several plug-ins to Rcmdr are also available).\\
Revolution R Productivity Environment (RPE) – Revolution Analytics provided Visual Studio based IDE, and has plans for web based point and click interface.\\
RGUI – comes with the pre-compiled version of R for Microsoft Windows.\\
RKWard – extensible GUI and IDE for R.\\
\alert{RStudio – cross-platform open source IDE (which can also be run on a remote linux server).}
\end{block}
\end{block}
\begin{block}{Starting with R}
\begin{block}{CRAN}
go to \url{https://cran.r-project.org/}


\includegraphics[width=.9\linewidth]{/home/zeltak/Sync/attach/images_2015/screenshot_2015-10-19_10-47-20.png}
\end{block}
\begin{block}{CRAN}
\includegraphics[width=.9\linewidth]{/home/zeltak/Sync/attach/images_2015/screenshot_2015-10-19_10-48-02.png}
\end{block}
\begin{block}{CRAN}
\includegraphics[width=.9\linewidth]{/home/zeltak/Sync/attach/images_2015/screenshot_2015-10-19_10-48-22.png}
\end{block}
\begin{block}{Install on PC}
Open and run the file you just downloaded R-3.1.2-win.exe  \\
There is no need to change the default installation!\\

\includegraphics[width=.9\linewidth]{/home/zeltak/Sync/attach/images_2015/screenshot_2015-10-19_12-57-44.png}
\end{block}
\begin{block}{install process}
\includegraphics[width=.9\linewidth]{/home/zeltak/Sync/attach/images_2015/screenshot_2015-10-19_12-59-02.png}
\end{block}
\begin{block}{Load up R}
\includegraphics[width=.9\linewidth]{/home/zeltak/Sync/attach/images_2015/screenshot_2015-10-21_17-57-42.png}

\begin{itemize}
\item luckily for you you don't have to use plain R anymore\ldots{}
\end{itemize}
\end{block}
\begin{block}{Rstudio}
It is tedious to write R code in the command line..

Old style: create a text file (e.g. Notepad) and copy the code you want to run, to the command line

New Style: use RStudio. Why?

\begin{itemize}
\item Multiple files

\item View variable values, color coding

\item Built-in help

\item Quick running of code

\item Easy file handling

\item Easy package installation

\item Many other reasons
\end{itemize}
\end{block}
\begin{block}{Rstudio look}
\includegraphics[width=.9\linewidth]{/home/zeltak/Sync/attach/images_2015/screenshot_2015-10-21_17-59-31.png}
\end{block}
\begin{block}{Installing RStudio}
Go to \url{http://www.rstudio.com/} and click on Desktop


\includegraphics[width=.9\linewidth]{/home/zeltak/Sync/attach/images_2015/screenshot_2015-10-19_13-00-49.png}
\end{block}
\begin{block}{Rtudio install}
Select DOWNLOAD RSTUDIO DESKTOP


\includegraphics[width=.9\linewidth]{/home/zeltak/Sync/attach/images_2015/screenshot_2015-10-19_13-01-30.png}
\end{block}

\begin{block}{Rtudio install}
Download the installer for Windows

\includegraphics[width=.9\linewidth]{/home/zeltak/Sync/attach/images_2015/screenshot_2015-10-19_13-01-43.png}
\end{block}
\begin{block}{Rtudio install}
Open and run the file you just downloaded RStudio-0.98.1091.exe

You don't have to change any of the defaults for the installation
\end{block}
\begin{block}{Rtudio install}
\includegraphics[width=.9\linewidth]{/home/zeltak/Sync/attach/images_2015/screenshot_2015-10-19_13-02-08.png}
\end{block}
\begin{block}{RStudio tips}
\includegraphics[width=.9\linewidth]{/home/zeltak/Sync/attach/images_2015/screenshot_2015-10-21_18-00-48.png}
\end{block}
\begin{block}{R scripts}
R scripts

\begin{itemize}
\item A text file (e.g. lab1.r) that contains all your R code

\item Scientific method: complete record of your analyses

\item Reproducible: rerunning your code is easy for you or someone else

\item Easily modified and rerun

\item In RStudio, select code and type <ctrl+enter> to run the code in the
R console

\item SAVE YOUR SCRIPTS
\end{itemize}
\end{block}

\begin{block}{R scripts}
You can work directly in R, but most users prefer a graphical interface. For starters:

\alert{RStudio}, an Integrated Development Environment (IDE)\\

Deducer, a Graphical User Interface (GUI)\\

More advanced users may prefer a good text editor with plugins for syntax highlighting, code completion, etc. for R such as:\\

Vim\\

\alert{Emacs} + ESS \\

Eclipse + StatET\\
\end{block}
\begin{block}{packages}
A way to extend R basic functionality

can add graphic, statistics, GIS, etc


\includegraphics[width=.9\linewidth]{/home/zeltak/Sync/attach/images_2015/screenshot_2015-10-22_15-50-12.png}
\end{block}
\begin{block}{installing via GUI- Via Rstudio}
\includegraphics[width=.9\linewidth]{/home/zeltak/Sync/attach/images_2015/screenshot_2015-10-19_10-52-09.png}
\end{block}
\begin{block}{Installing via CODE}
To use packages in R, we must first install them using the install.packages function, which typically downloads the package from CRAN and installs it for use

\begin{verbatim}
install.packages("foreign")
install.packages("xlsx")
install.packages("dplyr")
install.packages("reshape2")
install.packages("ggplot2")
install.packages("GGally")
install.packages("vcd")
\end{verbatim}
\end{block}
\begin{block}{Loading Packages}
If we know we will need a particular package for our current R session, we must load it into the R environment using the library or require functions
\begin{verbatim}
library(foreign)
library(xlsx)
\end{verbatim}
\end{block}
\begin{block}{sessionInfo()}
Basic info on R session
To get a description of the version of R and its attached packages used in the current session, we can use the sessionInfo function

\begin{verbatim}
sessionInfo()
\end{verbatim}
\end{block}
\begin{block}{R workspaces}
R workspaces

\begin{itemize}
\item When you close your R session, you can save data and analyses in an R
workspace

\item This saves everything run in your R console

\item Generally not recommended

\begin{itemize}
\item Exception: working with an enormous dataset
\end{itemize}

\item Better to start with a clean, empty workspace so that past analyses
don't interfere with current analyses

\item rm(list = ls()) clears out your workspace

\item Summary: save your R script, don't save your workspace
\end{itemize}
\end{block}
\end{block}


\begin{block}{R programming}
\begin{block}{R programming}
R code can be entered into the command line directly or saved to a script, which can be run inside a session using the source function

Commands are separated either by a ; or by a newline.

R is case sensitive.

Help files for R functions are accessed by preceding the name of the function with ?
you can also use ?? for keyword searhc

\begin{verbatim}
?require
??logistic
\end{verbatim}
\end{block}

\begin{block}{commenting}
The \# character at the beginning of a line signifies a comment, which is not executed\\
Start comments with \#, rest of line is ignored\\
\begin{verbatim}
#sessionInfo is cool..
sessionInfo()
\end{verbatim}
\end{block}
\begin{block}{data store}
R stores both data and output from data analysis (as well as everything else) in objects

Things are assigned to and stored in objects using the <- or = operator

A list of all objects in the current session can be obtained with ls()

\begin{verbatim}
# assign the number 3 to object called abc
abc <- 3
# list all objects in current session
ls()
\end{verbatim}
\end{block}
\begin{block}{Variables}
A basic concept in (statistical) programming is called a variable.

A variable allows you to store a value (e.g. 4) or an object (e.g. a function description) in R.

You can then later use this variable's name to easily access the value or the object that is stored within this variable.

You can assign a value 4 to a variable MYVAR with the command
\begin{verbatim}
MYVAR <- 4
\end{verbatim}
\end{block}

\begin{block}{Basic data types in R}
Decimals values like 4.5 are called numerics.\\
Natural numbers like 4 are called integers. Integers are also numerics.\\
Boolean values (TRUE or FALSE) are called logical (TRUE can be abbreviated to T and FALSE to F).\\
Text (or string) values are called characters.\\

\includegraphics[width=.9\linewidth]{/home/zeltak/Sync/attach/images_2015/screenshot_2015-10-19_15-36-27.png}
\end{block}
\begin{block}{arithmetics with R}
In its most basic form R can be used as a simple calculator. Consider the following arithmetic operators:\\

\begin{quote}
Addition: +\\
Subtraction: -\\
Multiplication: *\\
Division: /\\
Exponentiation: \^{}\\
\end{quote}
\end{block}

\begin{block}{Entering and Importing Data}
R works most easily with datasets stored as text files. Typically, values in text files are separated, or delimited, by tabs or spaces:

\begin{verbatim}
gender id race ses schtyp prgtype read write math science socst
0 70 4 1 1 general 57 52 41 47 57
1 121 4 2 1 vocati 68 59 53 63 31
0 86 4 3 1 general 44 33 54 58 31
0 141 4 3 1 vocati 63 44 47 53 56
\end{verbatim}
or by commas (CSV file):
\begin{verbatim}
gender,id,race,ses,schtyp,prgtype,read,write,math,science,socst
0,70,4,1,1,general,57,52,41,47,57
1,121,4,2,1,vocati,68,59,53,63,61
0,86,4,3,1,general,44,33,54,58,31
0,141,4,3,1,vocati,63,44,47,53,56
\end{verbatim}
\begin{block}{read data-Base}
Base R functions \alert{read.table} and \alert{read.csv} can read in data stored as text files, delimited by almost anything (notice the sep = option)

You can retrieving files over the internet or from disk

\alert{Note} how we are assigning the loaded data to objects.

\begin{verbatim}
# comma separated values- FILE
dat.csv <- read.csv("/home/zeltak/org/attach/bgu/courses/BGU.R/data/hsb2.csv")
# comma separated values- INTERNET
dat.int.csv <- read.csv("http://www.ats.ucla.edu/stat/data/hsb2.csv")
# tab separated values
dat.int.tab <- read.table("http://www.ats.ucla.edu/stat/data/hsb2.txt",header=TRUE, sep = "\t")
\end{verbatim}
\end{block}
\begin{block}{read from other software (spps,stata)}
We can read in datasets from other statistical analysis software using functions found in the foreign package

\begin{verbatim}
require(foreign)
# SPSS files
dat.spss <- read.spss("http://www.ats.ucla.edu/stat/data/hsb2.sav",to.data.frame=TRUE)
# Stata files
dat.dta <- read.dta("http://www.ats.ucla.edu/stat/data/hsb2.dta")
\end{verbatim}
\end{block}
\begin{block}{Reading in Excel Files}
Datasets are often saved as Excel spreadsheets. Here we utilize the xlsx package and Java to download an Excel dataset.
\begin{verbatim}
# these two steps only needed to read excel files from the internet
f <- tempfile("hsb2", fileext=".xls")
download.file("http://www.ats.ucla.edu/stat/data/hsb2.xls", f, mode="wb")
dat.xls <- read.xlsx(f, sheetIndex=1)
\end{verbatim}
If you have trouble getting Java and the xlsx package installed and working, just click "save as" in Excel and export the data to a comma separated values file (.csv).
\end{block}
\begin{block}{reading using a package (fread,readr)}
you can (and should) read csv using 2 new available packakges \alert{fread} and \alert{readr}\\

\alert{reader}
\begin{verbatim}
library(readr)
# Read a csv file into a data frame
readr.csv <- read_csv("/home/zeltak/org/attach/bgu/courses/BGU.R/data/hsb2.csv")
\end{verbatim}
\alert{fread}
\begin{verbatim}
library(data.table) #many other function, includes fread
# Read a csv file into a data frame
fread.csv <- fread("/home/zeltak/org/attach/bgu/courses/BGU.R/data/hsb2.csv")
\end{verbatim}
\end{block}
\end{block}
\begin{block}{Viewing Data (Head)}
R has ways to look at the dataset at a glance or as a whole.

\begin{verbatim}
# first few rows
head(dat.csv)
##    id female race ses schtyp prog read write math science socst
## 1  70      0    4   1      1    1   57    52   41      47    57
## 2 121      1    4   2      1    3   68    59   53      63    61
## 3  86      0    4   3      1    1   44    33   54      58    31
## 4 141      0    4   3      1    3   63    44   47      53    56
## 5 172      0    4   2      1    2   47    52   57      53    61
## 6 113      0    4   2      1    2   44    52   51      63    61
\end{verbatim}
\end{block}
\begin{block}{Tail}
\begin{verbatim}
# last few rows
tail(dat.csv)
##      id female race ses schtyp prog read write math science socst
## 195 179      1    4   2      2    2   47    65   60      50    56
## 196  31      1    2   2      2    1   55    59   52      42    56
## 197 145      1    4   2      1    3   42    46   38      36    46
## 198 187      1    4   2      2    1   57    41   57      55    52
## 199 118      1    4   2      1    1   55    62   58      58    61
## 200 137      1    4   3      1    2   63    65   65      53    61
\end{verbatim}
\end{block}
\begin{block}{variable names}
to show all the variable names in the data use \alert{names} or \alert{View} commands

\begin{verbatim}
# variable names
names(dat.csv)
##  [1] "id"      "female"  "race"    "ses"     "schtyp"  "prog"    "read"
##  [8] "write"   "math"    "science" "socst"
# pop-up view of entire data set (uncomment to run)
#View(dat.csv)
\end{verbatim}
\end{block}
\begin{block}{Data frames}
Once read in, datasets in R are typically stored as \alert{data frames}, which have a matrix structure.\\

Observations are arranged as \alert{rows} and \alert{variables}, either numerical or categorical, are arranged as columns.\\

data frames are often referenced as DF
\end{block}

\begin{block}{Data frames}
\begin{verbatim}
tag <- c(2, 3, 5, 7, 8, 9, 15, 21, 23, 26)
weight <- c(14.8, 21, 19.7, 23.2, 16, 16.1, 20, 29.3, 17.8, 21.2)
condition <- c("good", "fair", "fair", "poor", "fair", "good", "good", "fair", "fair", "poor")
#create a DF from 3 vectors
fishData <- data.frame(tag, weight, condition)
head(fishData, n=2)
#  tag weight condition
#1   2   14.8      good
#2   3   21.0      fair
\end{verbatim}
\end{block}
\begin{block}{Access Individual rows, columns and cells}
Individual rows, columns and cells in a data frame can be accessed through many methods of indexing

We most commonly use:
\begin{verbatim}
object[row,column]
\end{verbatim}

\begin{verbatim}
# single cell value
dat.csv[2,3]
## [1] 4
\end{verbatim}
\end{block}
\begin{block}{omitting rows,columns}
omitting row value implies all rows; here all rows in column 3

\begin{verbatim}
dat.csv[,3]
##   [1] 4 4 4 4 4 4 3 1 4 3 4 4 4 4 3 4 4 4 4 4 4 4 3 1 1 3 4 4 4 2 4 4 4 4 4
##  [36] 4 4 4 1 4 4 4 4 3 4 4 3 4 4 1 2 4 1 4 4 1 4 1 4 1 4 4 4 4 4 4 4 4 4 1
##  [71] 4 4 4 4 4 1 4 4 4 1 4 4 4 1 4 4 4 4 4 4 2 4 4 1 4 4 4 4 1 4 4 4 3 4 4
## [106] 4 4 4 3 4 4 1 4 4 1 4 4 4 4 3 1 4 4 4 3 4 4 2 4 3 4 2 4 4 4 4 4 3 1 3
## [141] 1 4 4 1 4 4 4 4 1 3 3 4 4 1 4 4 4 4 4 3 4 4 4 4 4 4 4 4 4 4 4 1 3 2 3
## [176] 4 4 4 4 4 4 4 4 4 2 2 4 2 4 3 4 4 4 2 4 2 4 4 4 4
# omitting column values implies all columns; here all columns in row 2
dat.csv[2,]
##    id female race ses schtyp prog read write math science socst
## 2 121      1    4   2      1    3   68    59   53      63    61
\end{verbatim}
\end{block}
\begin{block}{ranges}
\begin{verbatim}
# can also use ranges - rows 2 and 3, columns 2 and 3
dat.csv[2:3, 2:3]
##   female race
## 2      1    4
## 3      0    4
\end{verbatim}
\end{block}
\begin{block}{More variable indexing}
We can also access variables directly by using their names, either with object[,"variable"] notation or object\$variable notation.

\begin{verbatim}
# get first 10 rows of variable female using two methods
dat.csv[1:10, "female"]
##  [1] 0 1 0 0 0 0 0 0 0 0
dat.csv$female[1:10]
##  [1] 0 1 0 0 0 0 0 0 0 0
\end{verbatim}
\end{block}
\begin{block}{Combing values into a vector}
The c function is widely used to combine values of common type together to form a vector.

For example, it can be used to access non-sequential rows and columns from a data frame.

\begin{verbatim}
# get column 1 for rows 1, 3 and 5
dat.csv[c(1,3,5), 1]
## [1]  70  86 172
# get row 1 values for variables female, prog and socst
dat.csv[1,c("female", "prog", "socst")]
##   female prog socst
## 1      0    1    57
\end{verbatim}
\end{block}
\begin{block}{Variable Names}
If there were no variable names, or we wanted to change the names, we could use colnames.

\begin{verbatim}
colnames(dat.csv) <- c("ID", "Sex", "Ethnicity", "SES", "SchoolType",
  "Program", "Reading", "Writing", "Math", "Science", "SocialStudies")

# to change one variable name, just use indexing
colnames(dat.csv)[1] <- "ID2"
\end{verbatim}
\end{block}
\begin{block}{set names with data.table}
alternitavly you can use the data.table setname command
\begin{verbatim}
# to change one variable name with setnames
setnames(DT,"OLD" "NEW")
#example
setnames(dat.csv,"ID" "ID2")
\end{verbatim}
\end{block}
\begin{block}{Saving Data}
most of the time we will save data in *.csv format

We can also save our data in a number of formats, including text, Excel .xlsx, and in other statistical software formats like Stata .dta.

The function write.dta comes from the foreign package, while write.xlsx comes from the xlsx package.

\begin{verbatim}
write.csv(dat.csv, file = "path/to/save/filename.csv")
#write.dta(dat.csv, file = "path/to/save/filename.dta")
#write.xlsx(dat.csv, file = "path/to/save/filename.xlsx", sheetName="hsb2")
\end{verbatim}
\end{block}

\begin{block}{save to native R format}
We can also save to to binary R format (can save multiple datasets and R objects)
\begin{verbatim}
# save to binary R format
save(dat.csv, dat.dta, dat.spss, dat.txt, file = "path/to/save/filename.RData")
\end{verbatim}
\end{block}
\end{block}
\begin{block}{Exploring Data}
\begin{block}{Exploring Data}
Now we're going to read some data in and store it in the object, d. We prefer short names for objects that we will use frequently.

We can now easily explore and get to know these data, which contain a number of school, test, and demographic variables for 200 students.

\begin{verbatim}
d <- read.csv("http://www.ats.ucla.edu/stat/data/hsb2.csv")
\end{verbatim}
\end{block}
\begin{block}{Description of Dataset}
Using dim, we get the number of observations (rows) and variables (columns) in d.

Using str, we get the structure of d, including the class(type) of all variables

\begin{verbatim}
dim(d)
## [1] 200  11
str(d)
## 'data.frame':        200 obs. of  11 variables:
##  $ id     : int  70 121 86 141 172 113 50 11 84 48 ...
##  $ female : int  0 1 0 0 0 0 0 0 0 0 ...
##  $ race   : int  4 4 4 4 4 4 3 1 4 3 ...
##  $ ses    : int  1 2 3 3 2 2 2 2 2 2 ...
##  $ schtyp : int  1 1 1 1 1 1 1 1 1 1 ...
##  $ prog   : int  1 3 1 3 2 2 1 2 1 2 ...
##  $ read   : int  57 68 44 63 47 44 50 34 63 57 ...
##  $ write  : int  52 59 33 44 52 52 59 46 57 55 ...
##  $ math   : int  41 53 54 47 57 51 42 45 54 52 ...
##  $ science: int  47 63 58 53 53 63 53 39 58 50 ...
##  $ socst  : int  57 61 31 56 61 61 61 36 51 51 ...
\end{verbatim}
\end{block}
\begin{block}{Descriptive Stats}
summary is a generic function to summarize many types of R objects, including datasets \\
When used on a dataset, summary returns distributional summaries of variables in the data\\

\begin{verbatim}
summary(d)
##        id            female           race           ses
##  Min.   :  1.0   Min.   :0.000   Min.   :1.00   Min.   :1.00
##  1st Qu.: 50.8   1st Qu.:0.000   1st Qu.:3.00   1st Qu.:2.00
##  Median :100.5   Median :1.000   Median :4.00   Median :2.00
##  Mean   :100.5   Mean   :0.545   Mean   :3.43   Mean   :2.06
##  3rd Qu.:150.2   3rd Qu.:1.000   3rd Qu.:4.00   3rd Qu.:3.00
##  Max.   :200.0   Max.   :1.000   Max.   :4.00   Max.   :3.00
##      schtyp          prog           read          write
##  Min.   :1.00   Min.   :1.00   Min.   :28.0   Min.   :31.0
##  1st Qu.:1.00   1st Qu.:2.00   1st Qu.:44.0   1st Qu.:45.8
##  Median :1.00   Median :2.00   Median :50.0   Median :54.0
##  Mean   :1.16   Mean   :2.02   Mean   :52.2   Mean   :52.8
##  3rd Qu.:1.00   3rd Qu.:2.25   3rd Qu.:60.0   3rd Qu.:60.0
##  Max.   :2.00   Max.   :3.00   Max.   :76.0   Max.   :67.0
\end{verbatim}
\end{block}
\begin{block}{Conditional Summaries 1}
If we want conditional summaries, for example only for those students with high reading scores (read >= 60), we first subset the data, then summarize as usual.

R permits nested function calls, where the results of one function are passed directly as an argument to another function. Here, subset returns a dataset containing observations where read >= 60. This data subset is then passed to summary to obtain distributions of the variables in the subset.
\begin{verbatim}
summary(subset(d, read >= 60))
##        id            female           race          ses
##  Min.   :  3.0   Min.   :0.000   Min.   :1.0   Min.   :1.00
##  1st Qu.: 76.5   1st Qu.:0.000   1st Qu.:4.0   1st Qu.:2.00
##  Median :108.5   Median :0.000   Median :4.0   Median :3.00
##  Mean   :109.8   Mean   :0.482   Mean   :3.7   Mean   :2.38
##  3rd Qu.:143.2   3rd Qu.:1.000   3rd Qu.:4.0   3rd Qu.:3.00
##  Max.   :200.0   Max.   :1.000   Max.   :4.0   Max.   :3.00
##      schtyp          prog           read          write
##  Min.   :1.00   Min.   :1.00   Min.   :60.0   Min.   :43.0
##  1st Qu.:1.00   1st Qu.:2.00   1st Qu.:63.0   1st Qu.:57.0
##  Median :1.00   Median :2.00   Median :65.0   Median :60.0
##  Mean   :1.18   Mean   :1.95   Mean   :65.5   Mean   :59.5
##  3rd Qu.:1.00   3rd Qu.:2.00   3rd Qu.:68.0   3rd Qu.:65.0
##  Max.   :2.00   Max.   :3.00   Max.   :76.0   Max.   :67.0
\end{verbatim}
\end{block}
\begin{block}{Descriptive statistics using Hmisc package}
you can get a more detailed view using the describe function in Hmisc

\begin{verbatim}
library(Hmisc)
describe(d)
\end{verbatim}

\begin{verbatim}
--------------------------------------------------------------------------------
prog
      n missing  unique    Info    Mean
    200       0       3    0.83   2.025

1 (45, 22%), 2 (105, 52%), 3 (50, 25%)
--------------------------------------------------------------------------------
read
      n missing  unique    Info    Mean     .05     .10     .25     .50     .75
    200       0      30    0.99   52.23    36.0    39.0    44.0    50.0    60.0
    .90     .95
   66.2    68.0

lowest : 28 31 34 35 36, highest: 66 68 71 73 76
--------------------------------------------------------------------------------
\end{verbatim}
\end{block}

\begin{block}{Histograms}
Typically it is easier to inspect variable distributions with graphics. Histograms are often used for continuous variable distributions
\begin{verbatim}
hist(d$write)
\end{verbatim}

\includegraphics[width=.9\linewidth]{/home/zeltak/Sync/attach/images_2015/screenshot_2015-10-19_15-26-49.png}
\end{block}
\end{block}
