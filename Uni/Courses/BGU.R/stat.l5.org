# -*- mode: Org; org-download-image-dir: "/home/zeltak/org/attach/bgu/courses/BGU.R/images"; org-download-heading-lvl: nil; -*-
#+Title:שיטות כמותיות למתקדמים
#+Author: ד"ר איתי קלוג 
#+Email: ikloog@bgu.ac.il
#+REVEAL_TITLE_SLIDE_BACKGROUND: /home/zeltak/org/attach/bgu/courses/BGU.R/images/stat_large.jpg

#+OPTIONS: reveal_center:t reveal_progress:t reveal_history:nil reveal_control:t
#+OPTIONS: reveal_rolling_links:t reveal_keyboard:t reveal_overview:t num:nil
#+OPTIONS: reveal_width:1200 reveal_height:800
#+OPTIONS: toc:nil
# #+REVEAL: split
#+REVEAL_MARGIN: 0.1
#+REVEAL_MIN_SCALE: 0.5
#+REVEAL_MAX_SCALE: 2.5
#+REVEAL_TRANS: linear
#+REVEAL_SPEED: default
#+REVEAL_THEME: white
#+REVEAL_HLEVEL: 2
#+REVEAL_HEAD_PREAMBLE: <meta name="description" content="Org-Reveal Introduction.">
#+REVEAL_POSTAMBLE: <p> Created by itai Kloog. </p>
# REVEAL_PLUGINS: (highlight markdown notes)
#+REVEAL_SLIDE_NUMBER: t
#+OPTIONS: ^:nil
#+EXCLUDE_TAGS: noexport
#+TAGS: noexport(n)
#+REVEAL_EXTRA_CSS: /home/zeltak/org/files/Uni/Courses/css/left.aligned.css


* Week 5
** Base R graphics
  :PROPERTIES:
  :reveal_background: /home/zeltak/org/attach/bgu/courses/BGU.R/images/hist_BD.jpg
  :END:
*** Histograms
A histogram is very common plot. It plots the frequencies that data appears within certain ranges. 

To plot a histogram of the data use the “hist” command:
#+BEGIN_SRC R :session Rorg  :results none
library(data.table)
w1<-fread("/home/zeltak/org/attach/bgu/courses/BGU.R/data/l4class/w1.csv")
hist(w1$vals)
hist(w1$vals,main="Distribution of w1",xlab="w1")
#+END_SRC
*lets try it on your computer!* (the data w1 is on moodle)

#+REVEAL: split 
The parameter breaks specifies the number of categories to plot or specifies the breakpoints for each category

You can specify the number of breaks to use using the breaks option. Here we look at the histogram for various numbers of breaks:

#+BEGIN_SRC R :session Rorg  :results none
hist(w1$vals,breaks=2)
hist(w1$vals,breaks=4)
hist(w1$vals,breaks=6)
hist(w1$vals,breaks=8)
hist(w1$vals,breaks=12)
#+END_SRC
*lets try it on your computer!*

#+DOWNLOADED: /tmp/screenshot.png @ 2015-11-22 19:03:37
#+attr_html: :width 300px
 [[~/org/attach/bgu/courses/BGU.R/images/screenshot_2015-11-22_19:03:37.png]]


#+REVEAL: split 
The col,xlab, ylab, xlim, ylim options work as in other plots

#+BEGIN_SRC R :session Rorg  :results none
# Create a histogram for autos in light blue with the y axis
# ranging from 0-10
hist(autos, col="lightblue", ylim=c(0,10))
#+END_SRC

#+DOWNLOADED: /tmp/screenshot.png @ 2015-11-22 12:03:09
#+attr_html: :width 300px
 [[~/org/attach/bgu/courses/BGU.R/images/screenshot_2015-11-22_12:03:09.png]]

#+REVEAL: split 
#+BEGIN_SRC R :session Rorg  :results none
hist(dataset$bp.sys, col = "lightblue",
xlab = "Systolic Blood Pressure", main = "Blood Pressure")
#+END_SRC

#+DOWNLOADED: /tmp/screenshot.png @ 2015-11-22 10:19:24
#+attr_html: :width 300px
 [[~/org/attach/bgu/courses/BGU.R/images/screenshot_2015-11-22_10:19:24.png]]

#+REVEAL: split 
sequence breaks:
#+BEGIN_SRC R :session Rorg  :results none
hist(dataset$bp.sys, col = "lightblue", breaks = seq(80,220,by=2),
xlab = "Systolic Blood Pressure", main = "Blood Pressure")
#+END_SRC

#+DOWNLOADED: /tmp/screenshot.png @ 2015-11-22 10:20:13
#+attr_html: :width 300px
 [[~/org/attach/bgu/courses/BGU.R/images/screenshot_2015-11-22_10:20:13.png]]


*** Saving Graphs
Graphs can be saved using several different formats, such as PDFs, JPEGs, and BMPs, by using pdf(), jpeg() and bmp(), respectively.

Graphs are saved to the current working directory.

pdf() produces the highest quality graphics and are easy to include in LATEXdocuments if you use a PDF compiler.

#+REVEAL: split
Example: 
#+BEGIN_SRC R :session Rorg  :results none
# Create a single pdf of figures, with one graph on each page
pdf("~/ZH_tmp/SavingExample.pdf", width=7, height=5) # Start graphics device
#or use setwd("")        # this is where the plot will be saved
x <- rnorm(100)
hist(x, main="Histogram of X")
plot(x, main="Scatterplot of X")
dev.off() # Stop graphics device

# Create multiple pdfs of figures, with one pdf per figure with onefile=FALSE
pdf(width=7, height=5, onefile=FALSE)
x <- rnorm(100)
hist(x, main="Histogram of X")
plot(x, main="Scatterplot of X")
dev.off() # Stop graphics device
#+END_SRC
#+REVEAL: split 
Alternative method:
#+BEGIN_SRC R :session Rorg  :results none
#Save an existing plot) Try the following commands:
plot(july$Day, july$Temp)
dev.print(file="plotfile1.pdf", device=pdf)
#+END_SRC

*** Colors
    :PROPERTIES:
    :HTML_CONTAINER_CLASS: left
    :END:
The function colors() returns a vector of built-in color names.

To create your own color use, rgb(), hsv() or hcl(), depending on what method of color specification you prefer

Create a personal color palette using, palette(). When the argument col=number, R uses the color in the palette that is indexed by number.
#+REVEAL: split
#+BEGIN_SRC R :session Rorg  :results none
# Create and use a custom color
burnt.orange <- rgb(red=204, green=85, blue=0, max=255)
plot(1:10, pch=15, col=burnt.orange, cex=3)
palette() # Current palette()
plot(1:10, pch=15, col=5, cex=3)
# Custom palette()
palette(c("red", "darkorange", "gold", "green3", "blue", "magenta3"))
plot(c(1,10), c(-3,3), type="n")
for(i in 1:length(palette())) points(rnorm(10), col=i, pch=18, cex=1.5)
palette("default") # Return to default, here "default" is a keyword
#+END_SRC
*** Kernel Density Plots
Kernal density plots are usually a much more effective way to view the distribution of a variable.

They are used instead of histograms 

simple Kernel Density Plot

#+BEGIN_SRC R :session Rorg  :results none
plot(density(mtcars$mpg))
#+END_SRC
*lets try it on your computer!*


#+DOWNLOADED: /tmp/screenshot.png @ 2015-11-23 07:23:54
#+attr_html: :width 300px
 [[~/org/attach/bgu/courses/BGU.R/images/screenshot_2015-11-23_07:23:54.png]]

#+REVEAL: split 
Filled Density Plot:
#+BEGIN_SRC R :session Rorg  :results none
d <- density(mtcars$mpg)
plot(d, main = "Kernel Density of Miles Per Gallon")
polygon(d, col = "red", border = "blue")
#+END_SRC
*lets try it on your computer!*

#+DOWNLOADED: /tmp/screenshot.png @ 2015-11-23 07:24:24
#+attr_html: :width 300px
 [[~/org/attach/bgu/courses/BGU.R/images/screenshot_2015-11-23_07:24:24.png]]
*** Boxplots
A boxplot provides a graphical view of the median, quartiles, maximum, and minimum of a data set.

it allows you to convey a lot of information on one simple plot.

useful when your data is not normally distributed 

it is generated by the boxplot() function

#+REVEAL: split 
#+BEGIN_SRC R :session Rorg  :results none
boxplot(w1$vals)
#+END_SRC
*lets try it on your computer!*
#+DOWNLOADED: /tmp/screenshot.png @ 2015-11-22 12:24:12
#+attr_html: :width 300px
 [[~/org/attach/bgu/courses/BGU.R/images/screenshot_2015-11-22_12:24:12.png]]

What we see is a box with a line through it. 

The line represents the median of the sample.

The box itself shows the upper and lower quartiles.

The whiskers show the range (i.e. the largest and smallest values).

#+REVEAL: split 
boxplots options  

We can add axis labels, a main title and colour the box using simple commands. These commands are the same as for those used in producing barplots and histograms. For example:

Again, this is a very plain graph, and the title and labels can be specified in exactly the same way as in the stripchart and hist commands:

#+REVEAL: split 
#+BEGIN_SRC R :session Rorg  :results none
boxplot(w1$vals,
          main='Leaf BioMass in High CO2 Environment',
          ylab='BioMass of Leaves')
#+END_SRC
*lets try it on your computer!*

#+DOWNLOADED: /tmp/screenshot.png @ 2015-11-22 12:45:30
#+attr_html: :width 300px
 [[~/org/attach/bgu/courses/BGU.R/images/screenshot_2015-11-22_12:45:30.png]]

#+REVEAL: split 
A colored Boxplot
#+BEGIN_SRC R :session Rorg  :results none
boxplot(dataset, col = rainbow(6), ylab = "Appropriate Units")
#+END_SRC

#+DOWNLOADED: /tmp/screenshot.png @ 2015-11-22 10:20:56
#+attr_html: :width 300px
 [[~/org/attach/bgu/courses/BGU.R/images/screenshot_2015-11-22_10:20:56.png]]

#+REVEAL: split 
Plotting several samples: 

we can see how to represent a single sample but often we wish to compare samples.

For example, we may have raised types of flies on various sugars. 

We measure the size of the individual flies and record the diet for each.

Our data file would consist of two columns; one for growth and one for sugar. e.g.

#+REVEAL: split 
#+DOWNLOADED: /tmp/screenshot.png @ 2015-11-22 12:50:51
#+attr_html: :width 150px

 [[~/org/attach/bgu/courses/BGU.R/images/screenshot_2015-11-22_12:50:51.png]]

#+REVEAL: split 
We have one variable, growth, and several samples (i.e. the different sugars). 

To plot these we use the boxplot command with slightly different syntax:

boxplot(y ~ x). 

TIP:This model syntax is used widely in R for setting-up ANOVA and regression analyses for example.

To create a summary boxplot we type something like:

#+BEGIN_SRC R :session Rorg  :results none
boxplot(growth ~ sugar, data=fly, xlab="Sugar type", ylab="Growth", col="bisque", range=0)
title(main="Growth against sugar type", font.main= 4)
#+END_SRC

#+REVEAL: split 

#+DOWNLOADED: /tmp/screenshot.png @ 2015-11-22 12:52:49
#+attr_html: :width 600px
 [[~/org/attach/bgu/courses/BGU.R/images/screenshot_2015-11-22_12:52:49.png]]

Now we can see that the different sugar treatments appear to produce differing growth in our subjects.

#+REVEAL: split 
Horizontal box plots

It is straightforward to rotate your plot so that the bars run horizontal rather than vertical (which is the default).

To produce a horizontal plot you add horizontal= TRUE to the command e.g.

#+BEGIN_SRC R :session Rorg  :results none
boxplot(growth ~ sugar, data=fly, ylab="Sugar type", xlab="Growth", col="mistyrose", range=0, horizontal=TRUE)
title(main="Growth against sugar type - horizontal", font.main= 4)
#+END_SRC


#+DOWNLOADED: /tmp/screenshot.png @ 2015-11-22 12:53:32
#+attr_html: :width 300px
 [[~/org/attach/bgu/courses/BGU.R/images/screenshot_2015-11-22_12:53:32.png]]

#+REVEAL: split 
Adding Individual Observations
rug() can add a tick for each observation to the side of a boxplot() and other plots. 
The side parameter specifies where tickmarks are drawn
#+BEGIN_SRC R :session Rorg  :results none
boxplot(dataset$Weight, main = "Weight (in kg)", col = "red")
rug(dataset$Weight, side = 2)
#+END_SRC
#+DOWNLOADED: /tmp/screenshot.png @ 2015-11-22 10:22:05
#+attr_html: :width 300px
 [[~/org/attach/bgu/courses/BGU.R/images/screenshot_2015-11-22_10:22:05.png]]
*** pie charts 

A pie chart of a qualitative data sample consists of "pizza/cake" wedges that shows the frequency distribution graphically.

R supports pie charts using the *pie* function.

The pie function can accept, among other parameters, a vector of numbers and a list of strings to use as labels.

#+REVEAL: split 
#+BEGIN_SRC R :session Rorg  :results none
parts =  c(22,65,10,3)
states = c("New Jersey", "New York", "Pennsylvania", "Maryland")
pie(parts,labels=states)
#+END_SRC
*lets try it on your computer!*

#+DOWNLOADED: /tmp/screenshot.png @ 2015-11-23 07:17:34
#+attr_html: :width 300px
 [[~/org/attach/bgu/courses/BGU.R/images/screenshot_2015-11-23_07:17:34.png]]

#+REVEAL: split 
To colorize the pie chart, we select a color palette and set it in the col argument of pie.

#+BEGIN_SRC R :session Rorg  :results none
colors = c("red", "yellow", "green", "violet", "orange", "blue", "pink", "cyan") 
pie(school.freq,             # apply the pie function 
  col=colors)                # set the color palette
#+END_SRC

#+DOWNLOADED: /tmp/screenshot.png @ 2015-11-23 07:20:29
#+attr_html: :width 300px
 [[~/org/attach/bgu/courses/BGU.R/images/screenshot_2015-11-23_07:20:29.png]]

#+REVEAL: split 
3D Pie Chart:

#+BEGIN_SRC R :session Rorg  :results none
library(plotrix)
slices <- c(10, 12, 4, 16, 8)
lbls <- c("US", "UK", "Australia", "Germany", "France")
pie3D(slices, labels = lbls, explode = 0.1, main = "Pie Chart of Countries ")
#+END_SRC


#+DOWNLOADED: /tmp/screenshot.png @ 2015-11-23 07:21:35
#+attr_html: :width 300px

 [[~/org/attach/bgu/courses/BGU.R/images/screenshot_2015-11-23_07:21:35.png]]

*** Multiple plots 
The number of plots on a page, and their placement on the page, can be controlled using par() or layout()

Set the mfrow or mfcol options

Take 2 dimensional vector as an argument

The first value specifies the number of rows

The second specifies the number of columns

The 2 options differ in the order, individual plots are printed

#+BEGIN_SRC R :session Rorg  :results none
e.g. par(mfrow=c(3,2))        # Creates 6 figures arranged in 3 rows and 2 columns
#+END_SRC

#+REVEAL: split 
#+BEGIN_SRC R :session Rorg  :results none
par(mfcol = c(3,1))
hist(dataset$Height, breaks = 10, main = "Height (in cm)", xlab = "Height")
hist(dataset$Height * 10, breaks = 10, main = "Height (in mm)", xlab = "Height")
hist(dataset$Height / 2.54, breaks = 10, main = "Height (in inches)", xlab = "Height")
#+END_SRC


#+DOWNLOADED: /tmp/screenshot.png @ 2015-11-22 10:25:39
#+attr_html: :width 300px
 [[~/org/attach/bgu/courses/BGU.R/images/screenshot_2015-11-22_10:25:39.png]]
*** Normal QQ Plots
The final type of plot we will look at is the normal quantile plot. 

This plot is used to determine if your data is close to being normally distributed. 

You cannot be sure that the data is normally distributed, but you can rule out if it is not normally distributed. 

The command to generate a normal quantile plot is qqnorm. You can give it one argument, the univariate data set of interest:
#+BEGIN_SRC R :session Rorg  :results none
qqnorm(w1$vals)
#+END_SRC


#+DOWNLOADED: /tmp/screenshot.png @ 2015-11-22 12:30:36
#+attr_html: :width 400px
 [[~/org/attach/bgu/courses/BGU.R/images/screenshot_2015-11-22_12:30:36.png]]

*** qq options
You can annotate the plot in exactly the same way as all of the other plotting commands given here:

#+BEGIN_SRC R :session Rorg  :results none
qqnorm(w1$vals,
         main="Normal Q-Q Plot of the Leaf Biomass",
         xlab="Theoretical Quantiles of the Leaf Biomass",
         ylab="Sample Quantiles of the Leaf Biomass")
#+END_SRC

In this example you should see that the data is *not* quite normally distributed. 
There are a few outliers, and it does not match up at the tails of the distribution.


After you creat the normal quantile plot you can also add the theoretical line that the data should fall on if they were normally distributed:
#+BEGIN_SRC R :session Rorg  :results none
qqline(w1$vals)
#+END_SRC


*** Plotting Two Vectors (scatter plot)
A scatter plot is used when you have two variables to plot against one another.

R has a basic command to perform this task- The command is plot().

As usual with R there are many additional parameters that you can add to customise your plots.

The basic command is:
#+BEGIN_SRC R :session Rorg  :results none
plot(x, y)
#+END_SRC
#+REVEAL: split 
Where x is the name of your x-variable and y is the name of your y-variable. This is fine if you have two variables but if they are part of a bigger data set then you have to remember to attach(data.file) your data set. A more powerful command is:

#+BEGIN_SRC R :session Rorg  :results none
plot(y ~ x, data= your.data)
#+END_SRC

To see a basic scatter plot try the following (using the built in dataset cars)

#+BEGIN_SRC R :session Rorg  :results none
plot(dist ~ speed, data= cars)
#+END_SRC
*lets try it on your computer!* 


#+DOWNLOADED: /tmp/screenshot.png @ 2015-11-26 15:57:59
#+attr_html: :width 300px
 [[~/org/attach/bgu/courses/BGU.R/images/screenshot_2015-11-26_15:57:59.png]]

#+REVEAL: split 
This basic scatter takes the axes labels from the variables and uses open circles as the plotting symbol. 

As usual with R we have a wealth of additional commands at our disposal to beef up the display.

A useful additional command is to add a line of best-fit. This is a command that adds to the current plot (like the title() command). For the above example we'd type:

#+BEGIN_SRC R :session Rorg  :results none
abline(lm(dist ~ speed, data= cars))
#+END_SRC
*lets try it on your computer!* 

The basic command uses abline(a, b), where a= slope and b= intercept. 

#+REVEAL: split 
If we combine this with a couple of extra lines we can produce a better looking plot:
#+BEGIN_SRC R :session Rorg  :results none
plot(dist ~ speed, data= cars, xlab="Speed", ylab="Distance", col= "blue")

title(main="Scatter plot with best-fit line", font.main= 4)

abline(lm(dist ~ speed, data= cars), col= "red")
#+END_SRC


#+DOWNLOADED: /tmp/screenshot.png @ 2015-11-26 15:58:39
#+attr_html: :width 300px
 [[~/org/attach/bgu/courses/BGU.R/images/screenshot_2015-11-26_15:58:39.png]]


#+REVEAL: split 
remember: 
We can alter the plotting symbol using the command pch= n, where n is a simple number.
We can also alter the range of the x and y axes using xlim= c(lower, upper) and ylim= c(lower, upper). 

The size of the plotted points is manipulated using the cex= n command, where n = the 'magnification' factor. 

#+BEGIN_SRC R :session Rorg  :results none
plot(dist ~ speed, data= cars, pch= 19, xlim= c(0,25), ylim= c(-20, 120), cex= 2)
abline(lm(dist ~ speed, data= cars))
title(main="Scatter plot with altered y-axis")
#+END_SRC


#+DOWNLOADED: /tmp/screenshot.png @ 2015-11-26 15:59:35
#+attr_html: :width 300px
 [[~/org/attach/bgu/courses/BGU.R/images/screenshot_2015-11-26_15:59:35.png]]

Here the plotting symbol is set to 19 (a solid circle) and expanded by a factor of 2. Both x and y axes have been rescaled. The labels on the axes have been left blank and default to the name of the variable (which is taken from the data set).


#+REVEAL: split 

Anther example:
 #+BEGIN_SRC R :session Rorg  :results none
plot(dataset$Hip, dataset$Waist,xlab = "Hip", ylab = "Waist",main = "Circumference (in cm)", pch = 2, col = "blue")
#+END_SRC

#+DOWNLOADED: /tmp/screenshot.png @ 2015-11-22 10:17:56
#+attr_html: :width 300px
 [[~/org/attach/bgu/courses/BGU.R/images/screenshot_2015-11-22_10:17:56.png]]

can you spot the Outlier?

#+REVEAL: split 

#+DOWNLOADED: /tmp/screenshot.png @ 2015-11-22 10:18:35
#+attr_html: :width 800px
 [[~/org/attach/bgu/courses/BGU.R/images/screenshot_2015-11-22_10:18:35.png]]
** Dates
*** Basic
Dates are typically entered into R as character strings and then translated into date variables that *are stored numerically*. 

The function *as.Date()* is used to make this translation.

The syntax is *as.Date(X, "input_format")* 

The *default format* for inputting dates is yyyy-mm-dd. 

mydates <- as.Date(c("2007-06-22", "2004-02-13"))

converts the character data to dates using this default format.

*** convert from SAS/excel/other date into R date
#+begin_src r
mod1$day <- as.Date(strptime(mod1$DATE, "%m/%d/%y"))
#+end_src
*** advanced date variable table

#+BEGIN_EXAMPLE
 %a, %A Abbreviated and full weekday name.
 %b, %B Abbreviated and full month name.
 %d Day of the month (01---31).
 %H Hours (00---23).
 %I Hours (01---12).
 %j Day of year (001---366).
 %m Month (01---12).
 %M Minute (00---59).
 %p AM/PM indicator.
 %S Second as decimal number (00---61).
 %U Week (00---53); the first Sunday as day 1 of week 1.
 %w Weekday (0--6, Sunday is 0).
 %W Week (00---53); the first Monday as day 1 of week 1.
 %y Year without century (00---99)
 %Y Year with century.
 %z (output only.) Offset from Greenwich; -0800 is 8 hours west of.
 %Z (output only.) Time zone as a character string (empty if not
available
#+END_EXAMPLE

*** Extract day of the year
you can also extract parts of a date and create a variable

#+begin_src r
mod1$dayofyr <- as.numeric(format(mod1$day, "%j"))
#+end_src

*** subset by date range
1. make sure the date field is converted to standard R date
2. issue the followiing command

#+BEGIN_SRC R
NEWDATA <-subset(FULLDATA, as.Date(DATEFIELD) >= 'DATERANGE' & as.Date(DATEFIELD) <= 'DATERANGE')

#example
mb4 <-subset(mb3, as.Date(rdate) >= '2003-09-02' & as.Date(rdate) <= '2004-09-04')
#+END_SRC
*** create a date range/date time series
**** simple date sequence
#+begin_src R
bd <- as.Date("2007-05-20")
ed <- as.Date("2010-06-13")
seqd <- seq(bd, ed, by="1 day")
#+end_src
**** to create a date range based on start and end points use`
#+begin_src R
days_2000<-seq.Date(from = as.Date("2000-01-01"), to = as.Date("2000-12-31"), 1)
#+end_src
where the 1 at the end of the file specifies the increment , thats is increment by 1 day
*** adding days to date
#+begin_src R
as.Date("2001-01-01") + 45
#+end_src

* Homework-Week 5
** pie charts
lets create a simple pie chart using the pie() command. As always, we set up a vector of numbers and then we plot them.

#+BEGIN_SRC R :session Rorg  :results none
B <- c(2, 4, 5, 7, 12, 14, 16)
#+END_SRC

e9) Create a very simple pie chart


#+DOWNLOADED: /tmp/screenshot.png @ 2015-11-22 11:40:40
#+attr_html: :width 300px
 [[~/org/attach/bgu/courses/BGU.R/images/screenshot_2015-11-22_11:40:40.png]]


Now let’s create a pie chart with a heading, using nice colours, and define our own labels using R’s rainbow palette.
you can control the number of colours using length(B)
again use vector 'B'
#+BEGIN_SRC R :session Rorg  :results none
B <- c(2, 4, 5, 7, 12, 14, 16)
#+END_SRC
e10) add labels to the pie charts for day of the week, a legend and change colors and save the file as a pdf


#+DOWNLOADED: /tmp/screenshot.png @ 2015-11-22 11:42:42
#+attr_html: :width 300px
 [[~/org/attach/bgu/courses/BGU.R/images/screenshot_2015-11-22_11:42:42.png]]
** Box plots

e11) import the w1 data set from moodle , then create a simple box plot with:
a main title of-'Leaf BioMass in High CO2 Environment'
and a y title of 'BioMass of Leaves'

e12) recreate the plot but flip the axis (make it horizontal)
** kernel density plots
e13) using the built in `mtcars` dataset:
-create a density plot with blue filling, green border that looks at the distribution of the variable qsec.


#+DOWNLOADED: /tmp/screenshot.png @ 2015-11-26 15:48:45
#+attr_html: :width 300px
 [[~/org/attach/bgu/courses/BGU.R/images/screenshot_2015-11-26_15:48:45.png]]


** scatter plots
e14) import the cherry dataset using fread (remember to load/install the data.table package)
plot a scatter plot of the volume (as the dependent variable) vs the Girth
add an abline top the plot
then plot the log of volume (log transform the variable) vs the log of Girth
save both files to a jpeg file.

#+DOWNLOADED: /tmp/screenshot.png @ 2015-11-26 15:51:41
#+attr_html: :width 300px
 [[~/org/attach/bgu/courses/BGU.R/images/screenshot_2015-11-26_15:51:41.png]]



#+DOWNLOADED: /tmp/screenshot.png @ 2015-11-26 15:51:52
#+attr_html: :width 300px
 [[~/org/attach/bgu/courses/BGU.R/images/screenshot_2015-11-26_15:51:52.png]]





* Answers
e2) create vector 'B' and plot it in the color "darkgreen"

#+BEGIN_SRC R :session Rorg  
B <- c(3, 2, 25, 37, 22, 34, 19)
barplot(B, col="darkgreen")
#+END_SRC
e3)

#+BEGIN_SRC R :session Rorg  :results none
barplot(B, main="MY NEW BARPLOT", xlab="LETTERS", ylab="MY Y VALUES",col="red")
#+END_SRC

e4)
#+BEGIN_SRC R :session Rorg  :results none
B <- c(2, 4, 5, 7, 12, 14, 16)
hist(B)
#+END_SRC

e5)

#+BEGIN_SRC R :session Rorg  :results none
hist(B, col="darkgreen", ylim=c(0,10), ylab ="MY HISTOGRAM", xlab="FREQUENCY")
#+END_SRC

e6)
#+BEGIN_SRC R :session Rorg  :results none
hist(B, col = "red", breaks=6, xlim=c(0,max), main="My Histogram", las=2, xlab = "Values", cex.lab = 1.3)
#+END_SRC

e7)
hist(B, col = "blue", breaks=bins, xlim=c(0,max), main="My Histogram", las=2, xlab = "Values", cex.lab = 1.3)

e10)
#+BEGIN_SRC R :session Rorg  :results none
pie(B, main="My Piechart", col=rainbow(length(B)), labels=c("Mon","Tue","Wed","Thu","Fri","Sat","Sun"))
#+END_SRC

e11)

#+BEGIN_SRC R :session Rorg  :results none
boxplot(w1$vals,
          main='Leaf BioMass in High CO2 Environment',
          ylab='BioMass of Leaves')
#+END_SRC

e13)
#+BEGIN_SRC R :session Rorg  :results none
d <- density(mtcars$qsec)
plot(d, main = "Kernel Density of Miles Per Gallon")
polygon(d, col = "blue", border = "green")

#+END_SRC
e14)
#+BEGIN_SRC R :session Rorg  :results none
cherry<-fread("/home/zeltak/ZH_tmp/R datasets/cherry.csv")
plot(cherry$Girth, cherry$Volume)
abline(lm(Volume~Girth, data= cherry))
plot(log(cherry$Girth), log(cherry$Volume))
#+END_SRC

